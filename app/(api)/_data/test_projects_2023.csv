Project Title,Table Number,Submission Url,Project Status,Judging Status,Highest Step Completed,Project Created At,About The Project,"""Try it out"" Links",Video Demo Link,Opt-In Prizes,Built With,Submitter First Name,Submitter Last Name,Submitter Email,Notes,Capital One Is Looking To Reach Out To Teams With Outstanding Projects To Potentially Highlight Their Work.,List All Of The Universities Or Schools That Your Team Members Currently Attend.,Tell Us About Your Technology Experience This Weekend.,Domain.Com Domain Names,Team Colleges/Universities,Additional Team Member Count,Team Member 1 First Name,Team Member 1 Last Name,Team Member 1 Email,...
tbd,,"",Draft,Pending,Project overview,05/20/2023 14:05:33,"","",,"","",Jamie,Fong,jamiefongg@gmail.com,,"","","","",University of California - Davis,0
Aggie Baddies,90,https://hackdavis2023.devpost.com/submissions/412476-aggie-baddies,Submitted (Gallery/Visible),Pending,Submit,05/20/2023 14:32:07,"Meet the Aggie Baddies!



Name
Major
Year
School
Main Contributions



Victoria Kerslake
Design
2nd
UC Davis
UI/UX Design


Megan Nguyen
Computer Science  & Engineering
2nd
UC Davis
Logistics, Front-End


Lemuel Surmardy
Electrical Engineering and Computer Science (EECS)
2nd
UC Berkeley/ Diablo Valley College
Full-Stack


Lishen Liu 
Computer Science
3rd
UC Davis
Backend



Inspiration

The Aggie Reuse Store is having trouble managing its spreadsheets for its inventory. We were inspired by their mission to reduce waste and wanted to create a web app for internal use. 

We did some of our own research and found out that:


92 million tonnes of textile waste is produced every year
The average US consumer throws away 81.5lbs of clothes every year 
~42% of Aggies are from low-income families 


We wanted to help our fellow Aggies get free, cute clothes while helping the environment maintain its beauty.

What does it do?

Our web app can help the volunteers at the Aggie Reuse Store keep track of their inventory so that they can more efficiently reduce waste. First, it has a user-friendly main page with a navigation bar so that the volunteer can easily identify the pages. Then, it has a page for the volunteers to log in so that they are able to edit the inventory. If they do not have an ID yet, there is a separate page where they can create an ID and password. After they log in, they are able to add items to the inventory with ease! We created categories to filter each type of clothing which creates its own individual ID,  allowing for easy tracking. Finally, once the item is checked out of the store, the item will be deleted from the inventory! 

How we built it

Project Timeline


Researched Aggie Reuse Store Volunteers by asking questions and examining the current inventory spreadsheet.
Designed low-fidelity sketches web frames using Figma.
Utilized PostgreSQL to handle the databases of the inventory.
 Employed Node.js to input and pull from the databases in order to verify keys, create new items, date items, and categorize them.
 Crafted high-fidelity sketches, web frames, animations, logos, and gifs with the help of Adobe Illustrator, Photoshop, and Figma.
 For easy user interaction, we created the front end using React.js, implementing the designs into the front end. 


Technology Utilized Not Mentioned


Github
Docker 


Challenges we faced


Implementing the design: Through React.js, it is hard to style the design with the styling tools that are installed in React. Also, most of our developers specialized in back-end development, so we all had to learn how to use React.js from scratch. 
Connecting the front-end to the back-end: There were a lot of debugging issues that came with connecting the two components. There were some issues regarding docker and its storage usage and merging the ends to meet via Git.
Lishen's computer broke down mid-Hackathon. He had to drive back home to unscrew his computer to fix his RAM. It was sad. But he was able to get it back up and running again! 


Overall, together we were able to solve every issue we faced! 

Accomplishments that we're proud of :)


Creating a working full-stack web app! As beginner hackers, we were extremely excited to get a working product. 
Learning and employing React.js. As we mentioned prior, our developers have only ever worked on back-end projects. We were excited to fully develop a working front-end that is user-friendly! 


What we learned


Working in cross-disciplinary teams: Most of our developers have never worked with a designer before this Hackathon. In the words of Lemuel Surmardy, ""Wow, my front end has never looked so beautiful before"" (1 AM). We learned how important it is to utilize each of our unique skill sets to create something great!
How to create item keys and verify them, so that each unique user can have a login.


Next Steps


We want to implement a web store so people can online shop and reduce even more waste! We would create this as another page of the website to allow for external use. It wouldn't be too difficult as we already have features to filter the item by size, color, type, gender, and brand!
Want to learn how to upload photos successfully and put the images on the inventory page. 
Update the front-end to match Figma models completely.

","https://github.com/Lishen2147/HackDavisBaddies, https://docs.google.com/presentation/d/19dE9J_9PWZKMG8RnlPFizulNEdmWC_qVmRvwu4I9i9c/edit?usp=sharing, https://www.figma.com/file/GskMklaZsbJMwyt6SxNkYs/Aggie-Reuse%2C-Lo-Fi-Designs?type=design&node-id=102-94&t=ZgKOlUVBrARXzPK2-0",https://youtu.be/myqxZe46wpk,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Design, Best Aggie Reuse Store Hack","react, node.js, figma, postgresql, adobe-illustrator, photoshop, github, docker",Megan,Nguyen,mkdn2002@gmail.com,,Yes,"UC Davis, UC Berkeley/Diablo Valley College",We utilized GitHub! It was useful for collaboration.,"",University of California - Davis,3,Lemuel,Sumardy,sumardy2235@gmail.com,Victoria,Kerslake,vgkerslake@ucdavis.edu,Lishen,Liu,llsliu@ucdavis.edu
Tree Datalize,58,https://hackdavis2023.devpost.com/submissions/412483-tree-datalize,Submitted (Gallery/Visible),Pending,Submit,05/20/2023 15:00:56,"Inspiration

We the representative from TreeDavis on the first day, and in our conversation with him we could see how motivated he was towards making our lives better by planting more trees. The talk was very informative and we decided that we could help the organisation's goals by helping make people more aware of the trees around them and the impact they have.

What it does

Our project educates individuals on the benefits of planting trees. 

The first visualization provides a comprehensive depiction of the cost benefits associated with planting specific trees. By presenting relevant data and information, this visualization showcases the financial advantages that can be gained through tree planting initiatives. It offers a clear and visually appealing representation of the economic benefits derived from planting different types of trees, taking into account factors such as maintenance costs, energy savings, property value increase, and potential revenue generation. With this visualization, viewers can easily grasp the monetary value and long-term advantages of investing in tree planting projects.

The second visualization focuses on highlighting the correlation between the size of trees and their potential to save electricity. By visually illustrating this relationship, the second visualization offers valuable insights into the energy-saving capabilities of various tree sizes. Through data analysis and visual representation, viewers can observe how larger trees possess a greater capacity to provide shade, which in turn reduces the need for air conditioning and overall energy consumption. This visualization aims to raise awareness about the environmental benefits of planting and preserving large trees, showcasing their positive impact on energy efficiency and electricity savings.

How we built it

Before building the application, we asked for any databases that TreeDavis uses and decide to the same one. We queried that database for all the relevant tree data the City of Davis, Yolo County, and extract that data into a .csv file. Then, we cleaned that data with pandas and other data science-related packages in python. After which, we used Dash and Plotly to build the visualization and front end of our application. We then hosted the data app with Flask and a free hosting service through PythonAnywhere.

Challenges we ran into

One of the challenges we ran into as a team was whether or not we should build a web page or an app, and weighing the pros and cons of both. We also faced challenges with our data: what data set to use, and how to clean it because we had data for trees that can be grown in Sacramento, which we had to clean to focus the project on Davis.

Accomplishments that we're proud of

We are proud to be a part of TreeDavis's work, and that we were able to come together as strangers at he beginning of this process and collaborate effectively enough to have something to present to you all in just 24 hours.

What we learned

These past 24 hours have been an impactful learning process. We've exercised team work, time management, and design and development skills; from learning in the workshops to applying those lessons into our product.

What's next for TreeDatalize

In the future, TreeDatalize can be further fleshed out into a fully functioning website.
","https://vinnyxp.pythonanywhere.com/, https://www.figma.com/file/7XrzAsj6vo3GQMYceA5oTV/HackDavis-2023?type=design&node-id=1%3A10&t=igQSzf6tdeKYRLTp-1, https://github.com/VinnyXP/TreeDatalize",,"Best Open Data Hack, sponsored by UC Davis DataLab, Best Design, Best TreeDavis Hack","python, dash, plotly, pandas, flask, figma",Jess,McPeak,jessica.mcpeak@gmail.com,,Yes,California State Univesity East Bay,Figma was very new to me personally and using git was also really fun. I learned a lot from the hackathon. Since we started to make a website I also started to working on react even though we didn't finish it.,"","University of California - Davis, California State University - East Bay",3,Harshit,Jaglan,harshitjaglan78@gmail.com,Abbas,Zaidi,abbashzaidi@yahoo.com,Vinny,Pham,viph0009@gmail.com
RideSync,5,https://hackdavis2023.devpost.com/submissions/412484-ridesync,Submitted (Gallery/Visible),Pending,Submit,05/20/2023 15:01:07,"Inspiration

Our inspiration stems from a desire to make a positive impact on our community. Recent incidents of violence in our area have raised concerns about safety, and we believe that a collective effort can address this issue by providing more opportunities for people to travel safely together.

Through convenient scheduling and affordable fares, RideSync empowers drivers and riders alike. By participating in our platform, you join a movement that embraces safety and community-building. 

What it does

RideSync is a user-friendly ride-sharing app designed to simplify your daily commute. Our platform connects drivers and riders who share similar routes and live in similar areas, making carpooling more accessible and cost-effective.

With RideSync, drivers have the flexibility to schedule their rides in advance or provide a 15-minute notice before departure. Riders within a 0.25-mile radius can request to join their journey, minimizing inconvenience for drivers.

By having the app more driver-focused we create a more economically friendly ride-sharing environment. We prioritize affordability, ensuring that our fares are significantly lower than traditional ride-hailing services. By sharing rides, drivers can save on fuel costs while riders enjoy pocket-friendly fares.

Safety is our top priority. In response to recent incidents in the area, RideSync fosters accountability and safety by promoting carpooling. This creates a safer environment where drivers and riders can rely on each other for their daily commutes.

We are also trying to align with the United Nations' 17 Sustainable Development Goals, RideSync strives to contribute to a more sustainable future. Through carpooling, our app promotes Goal 11: Sustainable Cities and Communities, by reducing traffic congestion and carbon emissions. By facilitating ride-sharing, we support Goal 13: Climate Action, by encouraging a more efficient use of vehicles and reducing overall environmental impact. Additionally, by fostering community connections and accountability, we contribute to Goal 16: Peace, Justice, and Strong Institutions, promoting a safer environment. 

How we built it

For the designing of all the functionalities and UI of the app prototype, we used FIGMA.
For the actual coding aspect of our app, we initially wanted to focus on showing the back-end functionality of connecting the drivers and users using mongoDB but the way we were trying to implement wasn't compatible. So we implemented the google maps to show on the app and pin point the exact location that the user types in! We also implemented the logging in of the users!

Challenges we ran into

Designers: Figma has some functionalities which were working weirdly such as the adjustment of some components which won't shrink, it was also difficult to integrate all the features with a smooth consistent flow. But we were able to work around them! 
Developers: React Native requires careful consideration and expertise to implement mobile applications efficiently. With the level of web dev experience of our team and especially the stubbornness of react-native and it's incompatibility with mongoDB we struggled to implement the driver user connection through backend.  And just connecting mongoDB with our react-native app. 

Accomplishments that we're proud of

As this is most of our teams first hackathon and most of us have no experience in building a react-native app from scratch, we're very proud of implementing different parts of the entire app such as the log in feature, the google maps and attempting to use mongoDB with no backend knowledge or experience. We stuck together and did not give up even after the setback of not getting mongoDB to work in react-native which we had spent basically half of out time on. The designers also learned a lot on devising an entire app, with all the functionalities that we had discussed to be implemented.

What we learned

Design:
We learnt how to make illustrations from scratch on Figma and how to fix the missing fonts error. Most of all, we learned how to work together to produce an app prototype with the styles and functionalities that we all agree upon and also fit together smoothly.

Coding:
We learned the technology required to run React Native almost completely from scratch. Since none of us had extensive understanding of the technology, there was a large learning curve. However, we learned enough to implement different APIs and create Google Map integration. 

What's next for RideSync

Currently we were only thinking about the implementation of RideSync in Davis. In the future we would  like to expand to other communities and other areas. We weren't able to implement all the features that are shown in our Figma so having a fully fleshed out ui and further developing our app to support those features is something we would like to work on as well.
","https://www.figma.com/proto/DmJyi0UA1GcCrzqdmhtsNF/RideSync-Prototype?type=design&node-id=1-10&scaling=scale-down&page-id=0%3A1&starting-point-node-id=1%3A10, https://github.com/smartha2003/RideSync",,"Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity","react-native, google-places-autocomplete, figma, mongodb, google-cloud, google-maps",Shubhada,Martha,smartha@ucdavis.edu,,Yes,UC Davis,MongoDB implementation with react-native is complex.,"",University of California - Davis,3,Ameen,Salim,aysalim@ucdavis.edu,Vinay,Bidin,vbidin@ucdavis.edu,emily,n,leyi1233@gmail.com
Untitled,,"",Draft,Pending,Manage team,05/20/2023 15:01:29,"","",,"","",Manjunath P,Jakaraddi,manjunath180397@gmail.com,,"","","","","",0
Untitled,,"",Draft,Pending,Manage team,05/20/2023 15:12:24,"","",,"","",Aman,Syed,amanuddin2002@gmail.com,,"","","","","",0
Untitled,,"",Draft,Pending,Manage team,05/20/2023 15:43:47,"","",,"","",Alexander,Lin,alecslin@gmail.com,,"","","","",University of California - Davis,0
MooMooTask,78,https://hackdavis2023.devpost.com/submissions/412507-moomootask,Submitted (Gallery/Visible),Pending,Submit,05/20/2023 16:23:24,"What was the inspiration?🐮

We wanted to make self-care fun and engaging! 

how does it work 🐮

Our website gives the positive reinforcement of a game in order to properly motivate the student/user to take care of themselves. When they do the tasks like drinking water, standing up, etc. they end up ""progressing"" through the path to their cow that was kidnapped by aliens, by traveling across planets to get to it, and when you complete your tasks every day, your cow progresses further and furhter.

How we did it 🐮

We built it by using HTML/CSS for the website, MongoDB as a database and node.js for back end, coding the functionalities of the task list, progress bar with planets at the top.

Challenges we ran into 🐮

Coming up with the idea, figuring out the back end , making the HTML/CSS components work for what we wanted in the Design with the checkmarks and progress bar.

Notable achievements 🐮

Even though we lost a team mate's availability during the process, our team members worked together to pick up the rest of the responsibilities we needed to complete, and still got an asthetic and desirable product, design, code, and back end produced, as well as maintaining responsibilities to making a great slideshow, video, and presentation/business pitch.

What we learned 🐮

Implementing MongoDB database using Node.js, running a server, implementing Figma prototype into front end using JScript, HTML/CSS. 

What's next for MooMooTask 🐮

Fully working out the registration, login system for users, data visualization for the tasks in the calendar, better front-end and implementing funny animations into the web. 
","https://www.figma.com/file/DTBchXz2c5HML9SEhuS8AG/draft?type=design&node-id=0%3A1&t=kY6IzzEo5zc2Rjiq-1, https://github.com/bktfuture/hackdavis_cow/tree/trialerror",,"Best Use of MongoDB Atlas, Best Domain Name from Domain.com, Best Design, Most Creative Hack","node.js, mongodb, html, css, figma, javascript",TechTaro,Hameed,pikminpiklopedia@gmail.com,,Yes,"Folsom Lake College, Saint Louis Community College, UC Davis","We interacted with HTML/CSS, Figma, Adobe Illustrator, using GitHub for collaboration was very useful, using MongoDB was exciting, learning from the mentors to help solve our technical obstacles, and learning more/expanding our skillsets as engineers, designers, and coders.",whereismycow.tech,"Folsom Lake College, Saint Louis Community College, American River College",2,Aiturgan,Talant,aiturgan888@gmail.com,Abdul,Nawab,abdulnawab98@gmail.com
Farming Futures,,"",Draft,Pending,Project overview,05/20/2023 16:24:19,"","",,"","",Nathan,Fontanilla,fontanillanathan@gmail.com,,"","","","","University of California - Berkeley, Berkeley City College",1,Julian,Pearson Rickenbach,j.pearbach@yahoo.com
Untitled,,"",Draft,Pending,Manage team,05/20/2023 16:32:44,"","",,"","",brianle423,Le,brile761@gmail.com,,"","","","",University of California - Davis,0
mimo,100,https://hackdavis2023.devpost.com/submissions/412512-mimo,Submitted (Gallery/Visible),Pending,Submit,05/20/2023 16:41:12,"Inspiration

Along with academic stresses, college students also face their own personal challenges. Adolescents and young adults are most vulnerable to trauma and negative experiences disrupting their brain development. With the average age range of college students being 17-24 years old, there is a prevalent rise in mental health issues.

From our own past experiences as college undergraduates, we have had trouble accessing mental health services, and have found ourselves using other therapy alternatives in stress relief such as journaling, capturing everyday photos, and recording voice memos. We believe that we can combine these forms of stress relief in a singular platform to provide individuals more mediums of expression when it comes to tracking their own mental health.

This app functions as a source of therapy for college students who may not have access to professional help. We offer a safe space to journal and facilitate your own mental health journey. Starting therapy can be difficult. But caring for your needs is important. Consider this the first step towards providing care for yourself. 

What it does

We provide both a website filled with resources about different mental health concerns and an online web app that allows a user to log daily thoughts, through text, photo, and voice format to track their own mental health journey. 

How we built it

We utilized MongoDB's database to store daily journal entries. 

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for mimo

We hope to continue building out our journaling functionality to provide audio and image uploading. Because our app is built upon intentions of social good, we want to test the usability of our app amongst college students, and make necessary adjustments to support their needs. Some of these adjustments would include providing an optimal interface and tailoring the resources that we provide.
",https://github.com/kalechip22/hackdavis2023,https://vimeo.com/828789133?share=copy,"Best Use of MongoDB Atlas, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Design, Best Healthcare Hack, Most Creative Hack","html, css, javascript, figma, git, github, mongodb",Savannah,Luy,sqluy@ucdavis.edu,,Yes,"University of California, Davis, UC Davis",We used MongoDB Atlas.,"",University of California - Davis,3,Tiffany,Choy,tachoy@ucdavis.edu,Kayla,Hom,krhom@ucdavis.edu,Jade Lin,Dungca,jddungca@ucdavis.edu
Drowsy,104,https://hackdavis2023.devpost.com/submissions/412513-drowsy,Submitted (Gallery/Visible),Pending,Submit,05/20/2023 16:41:19,"Inspiration

We were inspired by the numerous amount of individuals that suffer from sleep deprivation and poor sleep schedules. Around 60 million Americans suffer from sleep problems whether they be chronic or ongoing sleep disorders. Our project was meant to provide a way to reward people for getting more sleep, and provide greater incentive for people to follow proper sleep schedules. 

What it does

Our app tries to make maintaining a healthy sleeping schedule fun and intuitive by tracking and showing comprehensive sleep data, along with having a streak and credits system to keep the experience fun and motivating. 

How we built it

Our web app was built with Next.js and Tailwind, and uses Appwrite as a backend service which manages the accounts and allows us to create a personalized experience per user. Our data analysis software was written in MATLAB, which analyzes audio files to determine sleep patterns of each user. Our plan was to connect the data analysis to the web app so that the user had good insight into how their sleep went, along with being able to view their sleep history to see how they're doing compared to before.

Challenges we ran into

The main challenges we ran into was with hardware design and the styling for our website. We had a lot of CSS trouble because it was our first time using Tailwind, which had a slight learning. Also, when we were building our circuit, we didn't have the correct capacitor which made it much more difficult to create our circuit and record the user sleep data. Our microphone components also had some quality issues, meaning that testing and prototyping them was affected.

Accomplishments that we're proud of

We're proud of creating a very functional web app minus the MATLAB data that we plan to connect to later. 

What we learned

We picked up a number of technologies from this hackathon, such as NextJS, Tailwind, Appwrite, and Matlab. These are all very important technologies for creating quick and efficient web apps and data analysis, respectively. Overall, it was a very educational experience which will benefit our future endeavors.

What's next for Drowsy

A mobile app


Varied data analytics to benefit from built-in sensors
Notification features on smartphones and smartwatches can be used for profile notifications
Accessibility
Improved signal processing
Recognize health-related trends through respiratory patterns
Referrals to medical professionals

",https://github.com/thatliuser/hackdavis.2023,https://youtu.be/OBTIoh_crvA,"Best Use of MATLAB, Most Creative Use of GitHub, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Design, Best Healthcare Hack, Most Creative Hack","nextjs, appwrite, matlab, tailwind, typescript",Suparn,S,suparn@gmail.com,,Yes,"University of California, Davis","We worked with multiple technologies:
- Next.js was the web framework we used. We chose this because it's very easy to set up, has a lot of nice UI stuff included, uses React (which has a pretty rich ecosystem which is fast to prototype in), and has a lot of optimizations enabled out of the box. Overall, the experience was quite nice, but there was some friction using the ""app"" router because the StackOverflow posts for Next.js are mostly covering the ""pages"" router that was deprecated with the release of Next 13.
- We used Appwrite as our backend provider. Since Appwrite is a MLH sponsor and does a lot of backend setup for us out of the box, we thought it was a good choice.  Overall, the API was quite intuitive and getting accounts set up was almost instantaneous, which was very pleasant.
- We used Tailwind and Daisyui for our CSS UI providers. This was the first time some of our members used Tailwind, but the development setup and environment was quite intuitive and didn't present any problems, so it was overall a good experience.","",University of California - Davis,3,Eric,Liu,eriliu@ucdavis.edu,Jonathan,Wang,jonwan@ucdavis.edu,Andrew,Fu,fuandrew168@gmail.com
Davis Leasing Transfer Dashboard,29,https://hackdavis2023.devpost.com/submissions/412521-davis-leasing-transfer-dashboard,Submitted (Gallery/Visible),Pending,Submit,05/20/2023 17:24:51,"Inspiration

The demand for rooms in Davis is very high, but during the summer, a lot of my friends want to travel to the other place, and they have difficulty transferring their leases. 

What it does

This website provides a platform of room information. 

How we built it

Leveraging HTML, CSS, and JavaScript with jQuery on the client-side and Node.js with Express.js on the server-side, we built an efficient single-page application.

Challenges we ran into

We have the trouble of dumping to JSON and display it, but they are solved. 

Accomplishments that we're proud of

We take pride in creating a practical solution that addresses a common issue, simplifying lease transfers for many students.

What we learned

We learn about javascript, and how that connect to json, and display it. 

What's next for Davis Leasing Transfer Dashboard

Looking forward, we plan to implement a database for persistent data storage, user authentication for data security, and expand our services to assist more students. A search bar and information management would also need to be improved. 
lHere is the link of our project
",https://github.com/Seastell/hackDavis2023Project.git,,"","html5, javascript, css, json, node.js",Siwei,Tan,tswlovexyb@outlook.com,,Yes,UC Davis,learn a lot from Intro to HTML/CSS,"",University of California - Davis,1,Seastell,Ruan,seanrjh@gmail.com
HobbySquare,2,https://hackdavis2023.devpost.com/submissions/412524-hobbysquare,Submitted (Gallery/Visible),Pending,Submit,05/20/2023 17:29:27,"Inspiration

One of our developers is an avid golfer. He always wanted a friend who golfed at his skill level but he had trouble finding someone who could golf with him. We recognized a gap in social networking where people, despite having shared interests, often struggled to connect on a deeper, skill-specific level. We were driven by the potential of a platform that could not only connect hobbyists but also help them grow together. That's how HobbySquare was conceived.

What it does

HobbySquare is a novel responsive web application designed to bring together individuals with similar hobbies at comparable skill levels. Users create profiles detailing their interests and skill level, then HobbySquare does the rest, conveniently matching users for interaction, collaboration, and skill-building. From music and arts to outdoor activities and cooking, HobbySquare accommodates a wide variations of hobbies.

How we built it

We developed HobbySquare using robust front-end and back-end built on Next.js and MongoDB, which allow for dynamic matching and user profile management. The front end is built on TailwindCSS package along with React to ensure a seamless, engaging experience across different platforms. 

Challenges we ran into

One of our biggest challenges was developing an algorithm that accurately matches users based on their hobbies and skill levels. This task was particularly difficult given the diversity and variability of hobbies, as well as the subjectivity of skill levels. Designing a scalable and user-friendly UI was also a significant task since we needed to accommodate a wide array of hobbies without overwhelming our users.

Accomplishments that we're proud of

We successfully developed a user-friendly website that connects hobbyists seamlessly. HobbySquare is capable of running seamlessly on multiple environments thanks to our responsive design. We are also very proud of how nice our web app looks given that the website was developed in 24 hours. 

What we learned

This journey has taught us a lot about the importance of user profiling and the complexities of creating an effective matching algorithm, particularly when dealing with such a diverse range of hobbies. We also learned about the intricacies of designing a user-friendly and scalable interface that can cater to a broad range of user interests. Lastly, we learned to collaborate efficiently with limited time as a team.

What's next for HobbySquare

In the future, we envision a host of engaging new features aimed at fostering real-world interactions and vibrant community connections. A key enhancement will be the introduction of a feature enabling users to both create and participate in local hobbyist events. This aims to bridge the gap between online and offline, bringing enthusiasts of various hobbies together for shared experiences.

As our platform grows and gains more traction, we will incorporate advanced machine learning algorithms. These will analyze user interests and skill levels, enabling a more personalized and effective hobby matchmaking. Not only will this encourage users to connect with like-minded individuals, but it will also inspire them to branch out and explore new hobbies.

In addition, we are keen to explore partnerships with hobby-centric businesses. These collaborations could provide our users with exclusive access to unique resources, tools, and classes that align with their passions. In this symbiotic relationship, businesses can target their promotions effectively, while our users can enjoy their products and services at discounted prices or even complimentary access.

We're confident that these plans will bolster our platform's value proposition, making it a dynamic hub for hobby enthusiasts and forging a pathway for unique, engaging experiences for our users.
","https://github.com/created201/hobbysquare, https://hobbysquare.vercel.app/dashboard/",https://www.youtube.com/watch?v=yuo50-TiKgo&ab_channel=iOSAcademy,"Best Use of MongoDB Atlas, Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Design, Most Creative Hack","javascript, nextjs, tailwind, mongodb, next-auth, vercel",Jaehong,Park,mrpark@ucdavis.edu,,Yes,UC Davis,"Tailwind CSS:
Next.js:
MongoDB:","",University of California - Davis,2,Haneul,Choi,hanchoi@ucdavis.edu,Jin,Lee,yjzlee@ucdavis.edu
Untitled,,"",Draft,Pending,Manage team,05/20/2023 17:30:38,"","",,"","",Marilyn,Hoang,hoangmarilyn@fhda.edu,,"","","","","",0
Untitled,,"",Draft,Pending,Manage team,05/20/2023 18:09:07,"","",,"","",Brendan,Lin,brendanlin8@gmail.com,,"","","","",University of California - Davis,0
AggiePal,57,https://hackdavis2023.devpost.com/submissions/412537-aggiepal,Submitted (Gallery/Visible),Pending,Submit,05/20/2023 18:37:35,"Inspiration

My inspiration stems from a combination of personal experience and a deep desire to improve the educational journey for my fellow students at UC Davis. Having to deal with the complexities of juggling through multiple platforms just to figure out what classes I should be registering for is a lot more of a headache than it needs to be, which I feel detracts students from the core purpose of university: learning.

Recognizing this challenge, I wanted to create a solution that would simplify this process, reduce stress, and allow students to focus on their studies instead of allowing scheduling and graduation requirements to live in the heads of students rent-free. I aspire to make a tangible impact on my fellow students' lives by providing a unified, intuitive platform for all their academic management needs.

What it does

AggiePal serves multiple purposes:


Schedule Builder Integration: It integrates the Schedule Builder tool directly into the app, enabling students to easily plan, manage, and visualize their class schedules. This eliminates the need to switch between different platforms.
OASIS Access: It incorporates the OASIS system to compliment the Schedule Builder to provide easy access to essential academic information, including graduation requirements, academic history, and recommended classes to take on a per-quarter basis. 
Unified Platform: By combining these tools into one interface, the app simplifies the user experience and reduces the time and effort spent on scheduling.
Notifications: The app notifies and reminds students when their pass times have arrived, ensuring that students never miss their pass times again.
User-Friendly Design: The app provides a user-friendly design with intuitive navigation, providing a seamless and stress-free user experience. 
Mobility: Since we went with the direction of making this a mobile app, it offers flexibility to manage academic responsibilities on-the-go, making it the perfect tool for busy students.


How we built it

This app was built using the SwiftUI framework. For the purposes of the demonstration, and in the interest of time, we focused specifically on the design behind the app.

Challenges we ran into

Unfortunately, there is currently no API to directly access UC Davis's course catalog, so I needed to figure out an alternative to properly demonstrate the search features within a short timeframe.

Accomplishments that we're proud of

I strongly believe that this app, if realized to its full potential, will significantly make the registration process easier. If not, I hope it will at least make it simpler, with less bells and whistles, so that students can focus on the important stuff in their education.
",https://github.com/mohalibou/AggiePal,,Best Design,"swift, swiftui",Mohamed,Boutaleb,mohalibou@icloud.com,,Yes,"University of California, Davis",I have not interacted with any of the provided technology this hackathon.,"",University of California - Davis,0
CRM FOR MSME'S,,"",Draft,Pending,Project overview,05/20/2023 18:59:53,"","",,"","",Rohith,Dilip,rohithdilip28@gmail.com,,"","","","",Jyothy Institute of Technology,0
GoAggs recycled clothes,,"",Draft,Pending,Project overview,05/20/2023 19:29:23,"","",,"","",Shivu,Sri,shivusriram2022@gmail.com,,"","","","","",0
EnergyAI,35,https://hackdavis2023.devpost.com/submissions/412546-energyai,Submitted (Gallery/Visible),Pending,Submit,05/20/2023 19:57:52,"Inspiration

The inspiration for this project was to help see the energy increase in today's world to help make people aware of the impending energy crisis. With more attention drawn to this problem, the more people will be motivated to make solutions to tackle the issue.

What it does

Our model accurately predicts the energy consumption of different counties in the US over the following years, based on various factors like location, future population and previous year trends

How we built it

There were two aspects to our project, backend and front end. On the backend, we made a machine learning project that uses linear regression to predict the future energy usages. In the front end, we used Django and Flask.

Challenges we ran into

We ran into various challenges, including not being able to transform and format data collected from the website properly, using Flask and Django as first time users, etc.

Accomplishments that we're proud of

We are proud of the accuracy of our model. It received an R-Squared value of 98% and the results seemed quite reasonably well. We were also able to troubleshoot everything related to it in the time of the hackathon. We were also able to successfully make a website using Django and Flask python frameworks, something we have never worked with before.

What we learned

We learnt to manage our time and set expectations, as in the world of tech there are always unknown variables and things often don't go according to plan

What's next for EnergyAI

We would like to expand our region across the world and make it specific to people's personal habits, so that we can identify exactly what factors affect large consumption of energy
","https://github.com/TheGhostCoder0/HackDavis2023.git, http://www.energyaidavis.tech, https://docs.google.com/document/d/1f3gcFoxZFJHuTxzizi2lgRqoEPRIggetxf9Z73Z3DZI/edit?usp=sharing",,"Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Open Data Hack, sponsored by UC Davis DataLab, Most Creative Hack","python, flask, pandas, numpy, javascript, css, html5, sklearn, seaborn, csv",Keena,Vasiloff,khvasiloff@ucdavis.edu,,Yes,UC Davis,We had an amazing time at our first hackathon! We learned a lot about team collaboration and new frameworks and technologies.,www.energyaidavis.tech,University of California - Davis,3,Rytham,Dawar,rdawar@ucdavis.edu,Jonathan,Mitelman,jhmitelman@ucdavis.edu,Aryaman,Bhatia,arybhatia@ucdavis.edu
Untitled,,"",Draft,Pending,Manage team,05/20/2023 20:01:02,"","",,"","",Rytham,Dawar,rdawar@ucdavis.edu,,"","","","",University of California - Davis,0
LightSight,37,https://hackdavis2023.devpost.com/submissions/412549-lightsight,Submitted (Gallery/Visible),Pending,Submit,05/20/2023 20:03:18,"Inspiration

Our inspiration for LightSight stemmed from the desire to enhance the lives of visually impaired individuals by leveraging the power of computer vision and tactile feedback systems to assist with navigation and object identification. We, as a team, believe that everybody should be able to have a high quality of life. We created this project to act as a valuable addition to someone's life instead of a cumbersome alternative to more traditional approaches.

What it does

LightSight combines real-time object recognition with audio descriptions and intelligent vibrations that adapt to proximity to help visually impaired users create a more detailed picture of their surroundings. Users can simply press a button to hear object labels and feel their surroundings in a more tactile manner.

How we built it

We built LightSight using computer vision algorithms for object recognition, a text-to-speech engine for audio feedback, lidar sensors for distance detection, and vibration motors for tactile feedback. The system was developed using a combination of machine learning techniques and hardware integration. TensorFlowRT running on an Nvidia Jetson Nano provided the compute power needed for real-time object detection. A commercially available lidar sensor provided the accurate distance measurements required to enable precise navigation compared to traditional ultrasonic sensor implementations.

Challenges we ran into

We faced challenges optimizing the response time for real-time feedback and synchronizing the vibrations with the lidar sensor readings. Additionally, ensuring a seamless user experience posed its own set of challenges: integrating the real-time feedback audio with the push button seemed simple but turned out to be one of the more challenging aspects of our project. Moreover, working with microcontrollers and soldering the circuit boards required for the project to function in a portable package proved to be extremely challenging.

Accomplishments that we're proud of

We are very proud of our implementation of real-time object detection, as it is often a challenging feature to implement even with powerful and optimized hardware. Additionally, we are proud of successfully integrating both the lidar and vision systems into a single intuitive package.

Moreover, given our different backgrounds (one of us is a Computer Science major and the other is a Aerospace Science and Engineering Major), we are proud to have come together and used our skills to complement each other and work towards our collective goal for the project. 

What we learned

Apart from gaining an appreciation for the struggles faced by the visually impaired, we also learned a lot from our technical hurdles, which we were able to overcome. We faced complexity on the hardware side, as each system is intricate on its own, and even more so when combined into a single usable system. Particularly challenging was working with a power supply that could portably power the Jetson Nano, as it draws a significant amount of energy during usage.

What's next for LightSight

Moving forward, we aim to improve and train our machine learning model to recognize a wider variety of objects, in order to further optimize the speed and accuracy of LightSight. Additionally, we want to develop LightSight to run on a more custom hardware implementation to reduce the size and weight of the final package. Finally, we plan to incorporate a more robust 3D lidar system to help visually impaired individuals gain greater situational awareness.
",http://github.com/Arnav33R/LightSight,https://www.youtube.com/watch?v=8uXFVaNPS8o&feature=youtu.be,"Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hardware Hack, sponsored by the UC Davis Student Startup Center, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","python, tensorrt, tensorflow, jetson-nano, arduino-uno, lidar, 3d-printing",Arnav,Rastogi,arnavrastogi2002@gmail.com,,Yes,"University of California, Davis","We used a lot of hardware components (Jetson Nano, Arduino Nano, USB Camera Module, LiDAR Sensors, Vibration Motors, etc.)","",University of California - Davis,1,Kevin,Kapoor,kjkapoor@ucdavis.edu
RoutEZ,1,https://hackdavis2023.devpost.com/submissions/412552-routez,Submitted (Gallery/Visible),Pending,Submit,05/20/2023 20:39:26,"💡 Inspiration 💡

In our research we discovered an average commuter to work spends around 4.7 months of their life sitting in front of a traffic light (Assuming you started driving at age 15 and end at the age of 75). 4.7 months is 3384 hours and assuming you make a nice even 100 dollars per hour you are leaving $338,400 on the table! Or comparatively that much of your time you could be spending with your family, friends, or even pursuing a hobby! 

❓ What it does ❓

RoutEZ analyzes data, prepares a route that can be used to get from one location to another. Along with that RoutEZ also uses LLMs to advise the user on what time they should leave to get from one location to the next without much traffic. Our project had a lot of data collection involved so we used a toy car to simulate a car stopping, moving, and accelerating. We used this data to confirm our hypothesis that # of stops is correlated to the commute time. After that we ran tests on Russell Blvd analyzing it and making data points for LLMs to give us feedback with.

👷‍♂️ How we built it 👷‍♂️

We used the drone-car for all of the real life data, javascript, html, css for the frontend, python for the backend. Along with these languages / stack we used Cohere & Langchain for our LLM that analyzes the data and Google API for autocompletion of GPS coordinates. We also made models for the data we collected to better convey our point and used advanced Prompt Engineering to instruct the LLMs.

With our web application, we used the Leaflet API to display a map of the city. For now we are representing the city of Berkeley and Davis. We then get the user input on their desired start location and end location so we can map them the shortest path that avoids the most congested areas according to our data. To get the addresses of the locations, we used Google Map's Places API to validate the users input and suggest the locations as the user types. When the user clicks submit, we send a get request to query the Leaflet API and Leaflet Routing API for the path and use the OpenStreetMap API to  display the tiles of our map and create the markers.

😡 Challenges we ran into 😡

The drone was broken we had to dismantle the drone to fix up the internals along with the right wheel
Github was challenging as half the team was new. Time management, a member of our team arrived 8 hours into the hackathon because of unprecedented delays which gave us less time than rest of the participants. One of the motors of the drone's drone mode was out of commission, so we had to manually repair it. Creating the mapping algorithm finding the shortest route given certain points was the most technically complex. Working with the places API was difficult as half of our members were new to front end development but we successfully queried the API to suggest the address as a user types.

🏆 Accomplishments that we're proud of 🏆

Drone was successfully repaired. We analyzed the data we got and made a lot of meaningful conclusions. Autocomplete finally worked. Our algorithm to find a route between 2 points also worked

🤔 What we learned 🤔

This project was very data heavy, we learned how to analyze data. Frontend isn't very fun 😭

⏭️ What's next for RoutEZ ⏭️

Deploy worldwide 😎
",https://github.com/ceciliapham/RoutEZ,,"Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Open Data Hack, sponsored by UC Davis DataLab, Most Creative Hack","python, javascript, flask, gpt, drone, google-places, openstreetmap, leaflet.js, ajax",Ayush,Garg,ayushrgarg@gmail.com,,Yes,"Foothill High School, University of California Davis, University of California Berkeley","Cohere - We used cohere as the language model to analyze our data; easy and fun
Google Cloud - Autocomplete feature; easy and fun","","Foothill High School, University of California - Davis, Cosumnes River College",3,BaoTran,Tran,btntran@ucdavis.edu,Cecilia,Pham,ceciliap02@yahoo.com,Isabel,Chih,ichih@ucdavis.edu
MealBuddy,105,https://hackdavis2023.devpost.com/submissions/412580-mealbuddy,Submitted (Gallery/Visible),Pending,Submit,05/20/2023 22:10:51,"Inspiration

Around 119 billion pounds of food is wasted in the United States each year. Our project works towards reducing this problem. Initially, our ideas were to create budget friendly meal prep plans in order to increase access to healthy, cost-effective options or creating a community based social app for people to help their neighbors. We decided to combine the two ideas. 
MealBuddies is a fantastic social community platform that allows you to connect with your neighbors and either request or exchange ingredients that you already have in your pantry. This way, you not only reduce food waste, but also create a supportive network where everyone benefits from each other's surplus. MealBuddies is revolutionizing the way we approach food sharing and making a real impact on reducing food waste in our communities.

What it does

Connect with your neighbors: MealBuddies allows you to connect with your local community and build relationships with your neighbors.
Request or exchange ingredients: If you find yourself in need of specific ingredients for a meal, you can post a request on MealBuddies. Your neighbors who have those ingredients can offer them to you, ensuring that unused items in their pantries find a purpose.
Share your surplus: On the flip side, if you have excess ingredients sitting in your pantry, you can list them on MealBuddies and offer them to your neighbors who might need them.
Gain donation credits: Gain donation credits from these excess surplus by exchanging it at a low price to send to your favorite charity cause.
Reduce food waste: By facilitating ingredient exchanges within the community, MealBuddies helps reduce the amount of food wasted. It promotes a culture of sharing and ensures that edible items are put to good use rather than being thrown away. 

How we built it

We built the backend using Node.js and Express, and stored the data in a Mongo Database. For the frontend, we utilized React to create an interactive user interface that enhances the user experience. 

Challenges we ran into

We faced many challenges with our project, such as implementing Google map geolocation APIs and figuring out how to use databases within our website. We also had troubles with our github and updating our code. Additionally, there were some errors we didn’t know how to tackle since we didn’t have much experience with javascript. We didn't have time to implement the front end, so we had to use https://github.com/ed-roh/mern-social-media front end. (this is copyright free).

Accomplishments that we're proud of

We were very happy at the end when we were able to come up with a project. Even though we didn’t achieve our initial goal of creating a web app with the user's location and a translation system, we learnt a lot about web development and building a database. 

What we learned

We learned a lot about databases and how to implement them within a web application. We also learned about what goes into building a website and UI/UX design. We also learned the MERN stack. Before we did not know what goes into building a full stack application but this experience has helped us

What's next for MealBuddies

We want to implement a safer database, transaction protocols, geolocation, and a leaderboard system and displaying individual points based on their donations. We also want to implement our own front end since we didn't have the chance to in the short 24 hours. Our project didn't get as far as we has hoped, but we’re looking forward to implementing more in the future.
",https://github.com/ekye0512/MealBuddy,https://www.youtube.com/watch?v=qmk34vuIlwI&ab_channel=EricKye,"Best Use of MongoDB Atlas, Best Domain Name from Domain.com, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Most Creative Hack","we-built-the-backend-using-node.js-and-express, and-stored-the-data-in-a-mongo-database.-for-the-frontend, we, utilized, react, to, create, an, interactive, user, interface, that, enhances, the, experience.",Eric,Kye,ekye0512@gmail.com,,Yes,UC Davis,MongoDB was very useful in implementing databases as well as the resources for React Native.,mealbuddy.tech,University of California - Davis,3,Britney,Nguyen,nguyen26.bn@gmail.com,Rohan,Tangellapally,rohantangellapally@gmail.com,xntle,Le,antle.direct@gmail.com
Untitled,,"",Draft,Pending,Manage team,05/21/2023 00:20:45,"","",,"","",George,Luu,gluu@ucdavis.edu,,"","","","",University of California - Davis,0
Kleen Kuts ,59,https://hackdavis2023.devpost.com/submissions/412601-kleen-kuts,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 00:22:01,"Inspiration

The recent events that unfolded in Davis, with a serial killer targeting vulnerable individuals, left the city of Davis with a profound sense of empathy and concern for the victims and everyone else involved. These incidents not only caused fear and distress within the unhoused community, but it also spread throughout the entire community, producing a collective sense of urgency to address the vulnerabilities and challenges faced by those without safe and stable housing. 

This compelled us to want to do something, even in the smallest of ways, to address this issue. Inspired by our friend Kurtis, whose passion for cutting hair has brought joy and confidence to our circle of friends, the idea of “Kleen Kuts” was born. We found this to be the perfect mix of combining passion, skills, and giving a helping hand to those who need it most. By providing free haircuts to the homeless, we hope to make steps toward breaking the barriers that often hinder access to stable employment, thus supporting their journey towards financial independence, stability, and improved quality of life. 

What it does

The Kleen Kuts website is an easily accessible resource that allows users to learn about our purpose, book hair appointments, and/or donate to the cause. It also provides a way for local barbers to contribute to the barber team. We linked contact information conveniently and made the overall site easy to navigate. Since those who are unhoused most likely only have access to mobile devices at most, we made it available on mobile. 

How we built it

Using text editors, we constructed and edited html and css files, occasionally using js scripts in addition. We used multiple different embeds and different API’s to achieve the result we wanted in our code. Despite our inexperience, we worked diligently to create a website which has the foundation and capability to connect the unhoused with barbers. When designing the website, we created our own logos and backgrounds using photoshop, while also setting up cross-platform tools such as calendly and youtube to add more to our site. Our large css file dictated the standard formatting for all of our html files, which included a donation page, an about page, a page to register for appointments, and a google forms application to sign up as a barber. To support animations and other features of our website, we also coded a few simple JavaScript scripts which allowed us to do things not normally possible in just css and html.

Challenges we ran into

There were many difficulties that we ran into along the way when making our project. Once we had our idea and began coding our website, we realized that all of us had little to no experience with html/css/js. This posed a large challenge, especially timewise, as it took a lot for each incremental step in our process. Along the way, many bugs and errors were encountered. One of our biggest problems outside of our code was our different devices not syncing properly. When we would upload a version of the project, it would load differently on all of our devices, and dealing with these inconsistencies took a great deal of work. Even simple tasks like moving around elements and containers was a big struggle, but as the night progressed we learned more and more, and were able to take bigger and bigger steps towards our vision. The final, and most difficult challenge was getting the website up and running on our mobile devices. With the different dimensions and properties of a mobile device, attempting to convert the program with the same css file, especially with us having no experience doing so, was extremely arduous, and took us well into the night and morning to even complete in its current state.

Accomplishments that we're proud of

Going into this project, our whole team didn't have much experience working with HTML/CSS and so we're proud of how we were able to make a fully-functioning website with graphics and functionalities that we built from scratch, especially given all the roadblocks we hit working with CSS and getting it to run on mobile devices. 

On a less technical side, we're proud of the amount of knowledge gained through a series of trials and error made in a short amount of time. Lastly, we're proud of our how we were able to initiate using our friend's passion for cutting hair and using it for the greater good. 

What we learned

We gained an intense amount of experience working with HTML/CSS working on this project. We also learned the differences between creating a mobile format versus a desktop format.  

What's next for Kleen Kuts

There are quite a few things which we have to continue to work on for our project. We still need to finish setting up our donation page, and continue working on our mobile proportions. In the future, we would love to develop an app instead of a website on mobile, which would give us much more freedom and make it easier for us to extend the full visual experience of our desktop website to a mobile format. 
",http://kleenkutsdavis.org,,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Most Creative Hack","html, css, photoshop, javascript, calendly, google-form, venmo, youtube",Katelyn,Vuong,katvuong@ucdavis.edu,,No,"University of California, Davis",NA,kleenkutsdavis.org,University of California - Davis,3,Brody,Roberts,bjroberts@ucdavis.edu,Leon,Tanguay,lttanguay@ucdavis.edu,Kyle Gabriel,Galvez,kylegmg@gmail.com
esai,26,https://hackdavis2023.devpost.com/submissions/412602-esai,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 00:26:39,"Inspiration

We were inspired by our interdisciplinary backgrounds in psychology, data science, computer science, and engineering. It's not easy to put labels on mental health issues, so we wanted to find a way to search for strong mental health resources without knowing the term first. Specifically, we were unimpressed with current searchable resources (webMD for example), so we wanted to find a reliable source. No source is more reliable than the Diagnostic and Statistical Manual of Mental Disorders, Fifth Edition, known as the DSM-5, the standard for psychiatrists and psychologists in helping aid mental health diagnoses. 

What it does

esai parses through the entire DSM-5 with semantic search. Basically, a user can roughly describe how they're feeling - such as ""I'm just not having a great day"", and esai will source both the name of any applicable mental disorders and the DSM-5 reference material, along with diagnostic attributes.

For physicians, esai will show applicable analytical information about patients - giving it a wide variety of use cases from being a personal mental health aid to an enterprise tool for professionals.

How we built it

esai uses OpenAI's embedding engines, GPT-3.5 Turbo, Pinecone, and Langchain, built on Next.js.

Challenges we ran into

A significant issue was configuring Pinecone to function with our vector embeddings. 
We also struggled to find ways to excerpt the information from DSM-5 pdfs. 

Accomplishments that we're proud of

We are proud that we learned how to use Pinecone, LangChain, and the OpenAI API, along with building a fairly complex algorithm for scraping the DSM-5 from an HTML version of the DSM-5, accessed through the UC Davis library VPN. 

What we learned

We learned nearly every significant piece of technology that esai used. 

What's next for esai.tech

We want to improve our user interface for enterprise uses. 

DataLab Prompt Link:
link
",https://github.com/ritvikir/hackdavis,https://youtu.be/EcljZ_fbVvw,"Best Use of MATLAB, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Open Data Hack, sponsored by UC Davis DataLab, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Best Healthcare Hack","nextjs, mongodb",Andrew,Kuang,andrewkuang11@gmail.com,,Yes,University of California,I really enjoyed using GitHub and learning better version control.,https://www.mentalheal.tech/,"University of California - Davis, Canyon Crest Academy",3,Ritvik,Irigireddy,ririgireddy1@gmail.com,Bian,Lee,bianlee2004@gmail.com,Keenan,Kalra,keenanlike@gmail.com
InForMed,92,https://hackdavis2023.devpost.com/submissions/412603-informed,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 00:32:28,"Inspiration

Sometimes, I have found cures outside of conventional medicine to be more effective for my health problems and my family. I wish I knew more about practices outside of traditional medicine that, with consultation, I can use for helping/cure medical problems.

I would also wish that everyone, in general, knows about the existence of these medicines and is able to explore more options for treatment with their various doctors. Sometimes, treatments outside of conventional medicine are more effective in time and money for the patient.

What it does

This takes any illness/disease and mentions the following 6 ways to help/cure it:


Ayurveda
Homeopathy
Conventional/Western Medicine
Oriental Medicine (Traditional Chinese Medicine):
Naturopathy
Traditional Medicine


For each of the remedies, we get the following information:


Method name
one common remedy for that method
Potency (how much at a time)
Dosage (how many times)
Duration (over what time period)
Is a prescription required


How I built it

I scraped the treatment methods from ChatGPT and arranged them into a table. I then took the method or remedies that one would like to know more about and asked further questions, to be printed into a paragraph.

Challenges I ran into


I had no idea how to use an API to scrape data
I had no experience in building a front-end
Getting Streamlit in Python to get the paragraph delving into the specifics of a treatment


Accomplishments that I'm proud of


I got the API to work
learned to make a rudimentary front end that displays the results I would like to have
Getting all outputs in Python code even if they were not displayed on the website.
Learned Streamlit in Python


What I learned


Learned Streamlit in Python
Learned OpenAi API
Learned basic Javascript, React


What's next for InForMed


Printing out the paragraph
Getting average costs of the medicine in the searcher's location
Getting locations/distances of the particular practitioners of each medical practice type in the vicinity of the searcher

",https://github.com/CodeIshitaDutta/HackDavis,,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Best Healthcare Hack, Most Creative Hack","python, openaiapi",Ishita,Dutta,ishitadutta10@gmail.com,,Yes,UC Davis,"I was mostly working with ChatGPT on what I can ask when I am searching its API, as well as Streamlit documentation. I feel the Streamlit documentation should have had more written documentation over videos. I also explored the React documentation but realized it was far too complicated for me to learn over the weekend.","","",0
Tree Davis: Great Tree Search Redesign,111,https://hackdavis2023.devpost.com/submissions/412606-tree-davis-great-tree-search-redesign,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 00:55:34,"Inspired by environmentalism, built with Figma to empower citizens and Tree Davis to save the world, one tree at a time. We ran into some challenges trying to prototype certain scrolling interactions, but we're proud of accomplishing what we envisioned. We'd love to turn these little QR scan pages into a real marketing campaign in the future. 
",https://www.figma.com/proto/Gk2ry3cgj0UXEYFo9BFbGM/TreeDavis-Project?page-id=0%3A5&type=design&node-id=17-325&viewport=-2540%2C184%2C0.4&scaling=scale-down&starting-point-node-id=17%3A310&show-proto-sidebar=1,,"Best Beginner Hack, Best Design, Most Creative Hack, Best TreeDavis Hack",figma,Edyn,Stepler,eastepler@ucdavis.edu,,Yes,UC Davis,"Wifi was a little sketchy at times, but we made it work.","","University of California - Davis, UC Davis",2,Emma,Guerrero,egguerrero@ucdavis.edu,Katherine,Ong,keong@ucdavis.edu
Kanjo Compass,66,https://hackdavis2023.devpost.com/submissions/412609-kanjo-compass,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 01:04:52,"Inspiration

The inspiration for Kanjo Compass stems from the recognition of the Japanese concept of ""kanjo inyu,"" which encompasses human connection and emotional immersion. This plays a vital role in human interactions and societal harmony. In an increasingly digital and often impersonal world, we saw a need for a space that encourages and promotes empathy, inviting users to understand different perspectives and grow emotionally.

What it does

Kanjo Compass provides a space for people to anonymously share their experiences and perspectives. The goal is to help people broaden their understanding of human emotion by reading about all kinds of people. It also includes a page to guide deep thinking and a chat bot to give tips and resources about increasing empathy.

How we built it

We used React for the front end and Django rest framework for the back end. For the chat bot, we used Google Dialogflow.

Challenges we ran into

Most of us were inexperienced with React, so we had to learn how to use it on the spot. It was also our first time using Dialogflow.

Accomplishments that we're proud of

We were able to split the work evenly, resulting in an efficient development process.

What we learned

We learned how to collaborate effectively in coding projects and deepened our understanding of full stack applications.

What's next for Kanjo Compass

World peace.
","https://github.com/KenTaniguchi-R/hackdavis_API, https://github.com/Kenta15/hack_react",,"Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Most Creative Hack","javascript, react, python, django",Daisuke,Horiuchi,dhoriuchi001@gmail.com,,Yes,"University of California, Davis","Over the weekend, our team dived into full-stack web development, leveraging React for user interfaces and Django for a solid web framework. The chat bot uses Google Cloud Dialogflow. We used GitHub Flow to ensure seamless team collaboration.

Before coding, we used Figma to design interactive prototypes, helping us visualize our concepts and user experience. This process improved our coding efficiency and reinforced the importance of a user-centered design approach.

This intense weekend enhanced our technical skills and understanding of effective teamwork, showcasing the power of a well-coordinated, skillful group in web development.","",University of California - Davis,3,Sean,N,seantnguyen47@gmail.com,健太,田中,tkenta2929@gmail.com,Ken,Taniguchi,taniguchi.ryusei@gmail.com
Untitled,,"",Draft,Pending,Manage team,05/21/2023 01:16:03,"","",,"","",George,Luu,gluu@ucdavis.edu,,"","","","",University of California - Davis,0
Pool It,6,https://hackdavis2023.devpost.com/submissions/412615-pool-it,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 01:23:17,"Inspiration

The inspiration behind Pool It was to address the transportation and package delivery challenges faced by UC Davis students, specifically during weekend trips to visit family. The goal was to create a convenient and efficient all-in-one platform that facilitates Ridesharing and package delivery within the student community. By addressing transportation, environment and delivery challenges while incorporating sustainable practices and promoting community engagement, Pool It strives to make a positive impact.

What it does:

Pool It is a mobile app developed using Flutter that allows UC Davis students to easily connect and rideshare with fellow students or family members traveling from the university. It also provides a feature for delivering small packages among the student community. The app aims to simplify the process of coordinating rideshares and package deliveries, enhancing convenience for students.

How we built it:

We first started prototyping it on FIGMA, then we built it as a mobile app using the Flutter framework. We used our skills in Flutter development, along with various libraries and tools, to create the user interface and implement the necessary features. The development process involved designing intuitive navigation and ensuring a smooth user experience that matched the design prototypes.

Challenges we ran into:

During the hackathon, we encountered a lot of challenges with Flutter development and making progress on the app's functionality. Overcoming these challenges required troubleshooting technical issues, understanding the nuances of Flutter, and finding effective solutions to keep the project on track. We wasted a lot of time trying to get the basics to work, for instance we made it work with mongo db but then changed it last minute to firebase. We definitely couldn't finish the whole project in time. 

Accomplishments that we're proud of:

The team is proud to have developed a functional mobile app using Flutter that addresses the specific transportation and package delivery needs of UC Davis students. Achieving a user-friendly interface and navigation system were significant accomplishments. Additionally, providing a platform that fosters connections and convenience among students is a source of pride. We came into the competition without any knowledge on how we will be doing this, but we made it this far.

What we learned:

Developing Pool It using Flutter provided the team with valuable experience in mobile app development and working with cross-platform frameworks. We gained knowledge in navigating the challenges of Flutter, overcoming technical hurdles, and creating an accessible and intuitive app interface. Additionally, we learned about the importance of effective communication and collaboration in a hackathon setting.

What's next for Pool It:

Moving forward, the team plans to further enhance Pool It based on user feedback and insights gained during the hackathon. We aim to refine the app's navigation system to make it even more intuitive and user-friendly. Additionally, expanding the app's features and functionality, such as integrating additional services or introducing new capabilities, are part of the future plans for Pool It. For example Advanced Ride Matching: Implementing an intelligent algorithm to enhance the ride matching process, taking into account factors such as preferred departure times, trip distances, and passenger preferences. Safety Features & Social Community Features are also great ideas in mind for our future. 
","https://github.com/Namra-715/Poolit, https://www.figma.com/proto/jCCEYpYNQznQExcauy1VAi/Untitled?type=design&node-id=1-4&scaling=scale-down&page-id=0%3A1&starting-point-node-id=1%3A4",https://youtu.be/L5QG4NYAdWw,"Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Most Creative Hack","flutter, dart, kotlin, firebase, we-tried-mongodb",Ishant,Gandhi,ishant.orange@gmail.com,,Yes,"University of California, Davis","Developing Pool It using Flutter provided us with valuable experience in mobile app development and working with cross-platform frameworks. We gained knowledge in navigating the challenges of Flutter, overcoming technical hurdles, and creating an accessible and intuitive app interface. Additionally, the team learned about the importance of effective communication and collaboration in a hackathon setting.","",University of California - Davis,2,Mohnish,,mohnish.gopi@gmail.com,Namra,Shah,nmrshah@ucdavis.edu
Parkinson's Risk Evaluator,62,https://hackdavis2023.devpost.com/submissions/412616-parkinson-s-risk-evaluator,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 01:27:02,"Inspiration

Our journey began with a deep compassion for those affected by Parkinson's disease and a genuine desire to make a difference in their lives. Witnessing the struggles and challenges faced by individuals living with this neurological disorder, we were inspired to explore innovative ways to support them on their path to wellness.

The motivation to develop ML models for Parkinson's detection stemmed from a shared vision of early intervention and improved outcomes. We believe that every individual deserves the best possible chance at managing their health, and by leveraging the power of machine learning, we saw an opportunity to provide early detection tools that could potentially transform lives.

The immense potential of artificial intelligence and ML algorithms to analyze complex data and identify subtle patterns further fueled our inspiration. We envisioned a future where cutting-edge technology could assist healthcare professionals in identifying the earliest signs of Parkinson's, allowing for proactive treatment plans that mitigate the progression of the disease and alleviate symptoms. 

Moreover, our project's inclusion of an AI virtual whiteboard was driven by a genuine desire to bridge the gap between patients and healthcare providers. We sought to create a collaborative and intuitive platform where individuals could give tests without the hassle of going through multiple layers to upload their projects. By fostering a supportive and interactive environment, we aimed to enhance the overall well-being and quality of care for Parkinson's patients.

In essence, our inspiration stems from empathy, a yearning to make a positive impact, and a deep-rooted belief in the transformative power of technology. We are driven by the profound motivation to improve the lives of those affected by Parkinson's disease, providing them with the tools and support they need to navigate their journey with hope, dignity, and resilience.

What it does

Parkinson's Risk Evaluator is more than just an online tool; it is a compassionate and user-friendly platform designed to empower individuals in assessing their risk of Parkinson's disease. We understand that timely detection is crucial for effective management of the condition, and our inspiration comes from the desire to provide a convenient and accessible solution for early risk assessment.

Through the Spiral Drawing test, users can simply submit pictures of spirals they draw, which are then meticulously analyzed by our advanced ML models. These models are trained to identify patterns present in the drawings that are indicative of Parkinson's disease. Similarly, the Voice-based test captures a brief 6-second voice sample from the user, using AI algorithms to detect subtle markers in speech that correlate with the condition.

It is important to emphasize that while these tests provide valuable insights, they do not replace the need for an official diagnosis from medical professionals. We recognize the vital role of doctors in accurately diagnosing Parkinson's disease. To ensure our users are well-informed, the app not only offers test results but also provides comprehensive information about Parkinson's disease. Users can gain a deeper understanding of the condition, its symptoms, and available treatment options.

In our commitment to support individuals, we offer detailed explanations about the tests themselves, clarifying the purpose and methodology behind each assessment. We believe in empowering users through knowledge, so they can make informed decisions and seek appropriate medical guidance.

For those who receive concerning test results, the app goes a step further by providing additional resources. We understand the emotional impact of potentially alarming results and aim to connect users with support networks, patient communities, and organizations dedicated to Parkinson's disease. These resources ensure that individuals can access further assistance and find solace in knowing they are not alone in their journey.

At its core, Parkinson's Risk Evaluator is a humane and caring initiative. We strive to make a positive impact on the lives of individuals by offering a user-friendly platform for risk assessment, accurate information about the disease, and a compassionate support system. By combining technology, empathy, and comprehensive resources, we hope to create a space that promotes early detection, understanding, and empowerment for those affected by Parkinson's disease.

In addition to the Parkinson's Risk Evaluator, we are proud to introduce our AI Virtual Whiteboard feature, which aims to enhance collaboration and communication among individuals and healthcare professionals in the context of Parkinson's disease.

How we built it

We created the web app with a HTML/CSS/Javascript frontend and Python/Flask server-side, which was used to run the image and voice processing machine learning algorithms written with TensorFlow on Python.

Challenges we ran into

To bring the Parkinson's Risk Evaluator and AI Virtual Whiteboard to life, we utilized a combination of various technologies and frameworks, including HTML, CSS, JavaScript, TensorFlow, Flask, and OpenCV.

The front-end of the application was built using HTML, CSS, and JavaScript. HTML provided the structure and layout of the web pages, CSS was used to style and enhance the visual presentation, and JavaScript added interactivity and dynamic functionality. This combination allowed us to create an intuitive and user-friendly interface for users to interact with the application seamlessly.

For the ML models used in the Spiral Drawing and Voice-based tests, we leveraged TensorFlow, a powerful open-source machine learning framework. TensorFlow provided the foundation for training and deploying the ML models that analyze user input. Through extensive training on datasets containing examples of Parkinson's disease markers, the models can detect patterns and make predictions based on new inputs.

To integrate the application's front-end with the back-end, we employed Flask, a Python-based web framework. Flask allowed us to develop the server-side logic and APIs needed for communication between the user interface and the ML models. It provided a flexible and scalable framework for handling user requests, processing data, and generating responses.

In the case of the AI Virtual Whiteboard, we utilized OpenCV, an open-source computer vision library. OpenCV enabled us to incorporate AI-driven features into the whiteboard, such as handwriting recognition and image processing. These features enhance the functionality of the whiteboard by allowing users to transcribe and manipulate handwritten text, as well as analyze and annotate images.

By combining HTML, CSS, JavaScript, TensorFlow, Flask, and OpenCV, we were able to create an integrated and robust application. The seamless integration of these technologies enables users to conveniently assess their risk of Parkinson's disease, access relevant information, and collaborate effectively through the AI Virtual Whiteboard.

Accomplishments that we're proud of


Georgiy implemented a logistic regression model based on .wav files which proved to be more difficult than initially anticipated. The most complicated part was extracting about 10 different characteristic information from .wav files.
Melody designed the website without any external libraries from scratch. She made the logo from scratch which is a combination of flower (representative of the disease) along with a spiral base (representing the test).
Shyam made a point about having great code quality this time compared to other projects.
Sajid integrated Georgiy's models to the front end using Flask which was pretty challenging.


What we learned

We learned that for the most efficient use of time, development environments should be set up and verified much earlier.
",https://github.com/MelodyLiu012/HackDavis2023,,"Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Best Healthcare Hack, Most Creative Hack","python, javascript, machine-learning, flask, tensorflow, html, sass, opencv, keras, deep-learning",Melody,Liu,geministarco@gmail.com,,Yes,"University of California, Davis","Great to look into new technologies, even if we didn't end up using them in our final product (MongoDB).","",University of California - Davis,3,georgiy,kiselev,kiselevgeorgiy@gmail.com,Shyam,Agarwal,shyagarwal@ucdavis.edu,Sajid,Mohammad,sajidmoha03@gmail.com
Strava Wrapped,41,https://hackdavis2023.devpost.com/submissions/412617-strava-wrapped,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 01:29:06,"Inspiration

As my first hackathon, I wanted to do something relating to one of my hobbies which to run. Strava is a social media where you can post runs, bike rides, or other sports to share with your friends. I was inspired by the Spotify applications, such as the Spotify Pie, which was made by other presumably students so I wanted to do something on that level. I wanted to motivate people to continue exercising as my rationale for social good.

What it does

My web app connects you to the Strava log in and then collects data from the Strava API on your account. It then redirects you to the next page where it shows data such as number of runs this year, distance ran, number of bike rides, etc. It also presents your profile picture and name. 

How we built it

I used Express JS and Axios to manage the html pages and POST and GET the Strava API. Additionally I used HTML to build the web page.

Challenges we ran into

This was my first time using pretty much any of the technologies such as the Javascript libraries as well as the oauth authorization with the API. I wanted to use a Javascript script in the html to collect all the activities in my account to present all the routes on a heatmap but I found difficulty transferring the access token from the oauth script which also was used to work with the redirect after authentication. I ran into the Cross-Origin Resource Sharing error when I would use the access token when it was embedded in the html file so I had to do a workaround. 

Accomplishments that we're proud of

This was my first time with many things so I am happy I decided for myself what I wanted and took steps to work towards what I wanted to build.

What we learned

I learned how Javascript worked as well as its libraries. I learned how to set up an application with OAuth as well as GET and POST calls with access tokens as well as refresh tokens. I briefly learned how to host a server for Node.JS as well.

What's next for Strava Wrapped

My initial ideas were that the web app would present a heat map of the roads the user has ran on as well as longest activities, the people the user ran with often, most liked posts so those would be the next step.
","",https://youtu.be/qEZ2h_cYDjs,Best Beginner Hack,"express.js, javascript, html",George,Luu,gluu@ucdavis.edu,,Yes,UC Davis,n/a,"",University of California - Davis,0
Virtual Artist,85,https://hackdavis2023.devpost.com/submissions/412620-virtual-artist,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 01:46:27,"Inspiration

We were inspired by the Iron Man movies where Tony Stark would interact with Jarvis by seemingly having his every movement recorded to match gestures with actions. 

What it does

Reads user hand landmarks from user's webcam and draws onto a canvas with varying pen size and color. 

How we built it

We built this project by finding out about what libraries could allow us to record our hand movements through our webcams. We found OpenCV and MediaPipe and from there began designing a program that would read hand ""landmarks"" (i.e locations of several key points on one's hand) and draw them out on a virtual canvas.

Challenges we ran into

One of the main challenges we ran into was python syntax/usability, as most of our members are new/beginner to Python. Added on, most of our group members had also not experimented with AI or webcam motion recognition. Another problem we ran into (in regards to our original plan of making an ASL interpreter) was the lack of open-source data. Despite researching companies like SignAll, our group did not manage to be able to find open data sets that would allow our group to train an AI to recognize and interpret sign language on top of being a canvas tool. 

Accomplishments that we're proud of

We are proud that we were able to make the canvas that draws hand movements by using geometry. We are also proud of how we learned Python, OpenCV, and MediaPipe relatively on the spot in order to get our project done. For most of us, this is our first or second major hackathon, not to mention written in Python. Being able to make at least some product is an accomplishment we are really proud of.

What we learned

We learned the value of staying focused and on task but also not forgetting why we are doing what we are doing. Sometimes we would find ourselves solving problems that weren't pivotal to our product's success, and from this experience we've learned an important lesson about task prioritization and time management. 

What's next for Virtual Artist

Next for Virtual Artist would be training an AI with ASL datasets in order to make a platform that can be used in schools by teachers to more effectively communicate with those who are hard of hearing/deaf. On top of that, Virtual Artist, despite our efforts, can still be polished up more to be more user-interactive and ""clean"" overall. We intend, as a group, to further our knowledge in Python, OpenCV, and MediaPipe and potentially do more projects with these services. 
",https://github.com/otyrb0/VirtualArtist,https://youtu.be/kLrFs3w--zo,"","python, opencv, mediapipe",Onur,Yararbas,onuryararbas@gmail.com,,No,"De Anza College, Foothill College","Some technology we interacted with was Google's OpenCV and MediaPipe. The documentation was elegant, but as (mostly) Python beginners, the interface/documentation was overwhelming. 

Other technology we interacted with was Jupyter-Notebook, which, for the most part, worked just fine, but oftentimes had issues when the program was shut down (in the sense that Python would ""crash"" after the program was shut off)",N/A,"cupertino High School, 30",2,Minh Duc,Vo,tomducball@gmail.com,Alan,Kusparmakov,alan.kusparmakov@gmail.com
Doitter,87,https://hackdavis2023.devpost.com/submissions/412621-doitter,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 01:47:36,"Inspiration

Sometimes we need a reminder to celebrate our small successes in life.
Although social media is often used to glamorize our long-term goals, it's even more important to enjoy life every small step of the way.

What it does

DoItter allows users to share their To-Do lists and celebrate checking-off tasks along with your friends. Simply login with your Google account, add some items that you want to track, then share! You can see your friends' to-do lists in a Twitter-like feed.

How we built it

First, we brainstormed ideas and drew rough design diagrams for our end-product.
Then, we split the tasks up into steps and organized them on a Trello board.
For the Front-End we utilized React Next.js and the Material UI Framework.
In the Back-End, we used Auth0 for OAuth authentication, MongoDB to save To-Do lists and user-ids, and Vercel to deploy the web application.

Challenges we ran into

In the Front-End, the Text-field used to create To-Do lists was very tricky to implement. We wanted the functionality to automatically show new to-do items as the user filled out more to-dos but also be able to delete to-do items. The copying and deleting ended up creating a lot of unexpected behaviors. In the end, a solution was found where the app keeps adding new to-dos to an array, but a separate boolean array marks whether that to-do item will be rendered.

Accomplishments that we're proud of

In the Front-End, I (Masaki) had never done any Front-End development before and really struggled in creating anything in the beginning hours of the Hackathon. However by the end of the Hackathon, I felt much more comfortable with using the technologies and am really proud to have been able to create a nice-looking product.

In the Back-End, the project required to have complex but flexible manipulation data. So the process of creating the data schema was tough challenge for us. However, as soon as we got clear idea for data schema, MongoDB made us easy to accomplish what we were imagining in our head.

What we learned

Throughout this project, we learned a fundamental skill of pair programming. We helped each other and overcome technical challenges. On top of that, we realized the significance of using version control when programming with multiple people. Using a version control system allowed us to smoothly work on independently but able to collaborate on our tasks.

What's next for DoItter

Even though we aimed to make a platform like Twitter, due to the limit of human resources and time, we weren't able to implement several crucial fuctionalities. For example, there is no 'like' functionality which is important for people to motivate to work on todo list, there is no functionalities to check the list. Since the API to make the change on backend is already developed, we would like to continue our work and implement those functionalities.
We also want to add optional tags that can be added to To-Do items. Tags will be re-used so that users can keep track of their accomplishments.
For example, a 'Gym' or 'Exercise' tag could be added to To-Do items. On your profile page, you could then see how many times you have successfully checked-off exercise!
","https://doitter.vercel.app/, https://github.com/leej1230/Doitter",,"Best Use of MongoDB Atlas, Most Creative Use of GitHub, Most Creative Hack","javascript, typescript, mongodb, next.js, auth0",Jaewoo,Lee,leejaewoo1230@gmail.com,,Yes,"University of California, Davis","In the Back-End, the project required to have complex but flexible manipulation data. So the process of creating the data schema was tough challenge for us. However, as soon as we got clear idea for data schema, MongoDB made us easy to accomplish what we were imagining in our head.","",University of California - Davis,1,takeuchi-masaki,,themasakitakeuchi@gmail.com
Untitled,,"",Draft,Pending,Manage team,05/21/2023 02:11:52,"","",,"","",Trisha,Baadkar,baadkartrisha@gmail.com,,"","","","",University of California - Davis,0
Good Deeds Connect ,3,https://hackdavis2023.devpost.com/submissions/412633-good-deeds-connect,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 02:29:40,"Inspiration

We were inspired by the countless individuals around the world engaging in diverse acts of social good, yet struggling to measure or multiply the profound impact of their actions, regardless of their scale. This inspired us to create GoodDeedConnects, a visionary website where every social good deed, regardless of its size, has the power to multiply its effects and serve as a catalyst, inspiring others to join in and make a difference.

What it does

GoodDeedsConnect is an innovative website that empowers individuals to categorize their remarkable social contributions and choose from a diverse range of options to highlight the specific impact they have made. Upon completion, users are welcomed with a heartfelt congratulations, accompanied by an enlightening message that reinforces their crucial role as part of a collective of like-minded individuals dedicated to making a tangible difference in the battle against climate change. It also brings in stories from around the world that inspire people to do more social good. It brings updates on the latest sustainable practices being used around the world.

Our project is deeply rooted in the 17 Sustainable Development Goals (SDGs), as it fosters a collective environment of transformative actions, irrespective of their magnitude, to build a world characterized by sustainable communities, enhanced transportation, climate change mitigation, improved education, and many other crucial endeavors. It embraces and empowers individuals from diverse backgrounds, inspiring them to contribute to the greater good and shape a future that prioritizes sustainability in every aspect.

How we built it

We used HTML/CSS and Javascript. 

Challenges we ran into

This was our first time coding a website like this and we had to learn a lot about HTML/CSS. 

Accomplishments that we're proud of

We are proud of the knowledge we gained in HTML/CSS and the website we were able to create. 

What we learned

We learned about HTML/CSS. 

What's next for GoodDeedsConnect

We have exciting plans to enhance the website by introducing user accounts, allowing each person to keep track of their positive impact. Additionally, we are working on implementing a ranking system that will inspire users by showcasing the social good accomplished by others, motivating them to join in and make a difference too. There will also be monthly prizes based on whoever does the most acts of social good so it can serve as an inspiration to others. 
",https://github.com/rajashekarcs2023/Good-Deeds-Connect,,"Best Domain Name from Domain.com, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Most Creative Hack","css, html, adobe, photoshop, javascript",Piusha,P,piusha@gmail.com,,Yes,"California State University East Bay, Santa Clara University","We used HTML, CSS, Javascript, adbobe express, figma, mockit. We learnt how to collaborate on github, we also learnt a lot of new libraries.",gooddeedsconnect.tech,"California State University - East Bay, Santa Clara University",1,Rajashekar,Vennavelli,rvennavelli@scu.edu
Untitled,,"",Draft,Pending,Manage team,05/21/2023 02:43:44,"","",,"","",Ameen,Salim,aysalim@ucdavis.edu,,"","","","",University of California - Davis,0
Visaid,89,https://hackdavis2023.devpost.com/submissions/412640-visaid,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 03:20:46,"Inspiration💡

Our team inspired by the real-life experiences of an international student managing study permits at UC Davis, aims to build an intuitive website for people of various backgrounds to manage their documents and visas efficiently. We recognized the challenges encountered when preparing to travel abroad, particularly the difficulties in obtaining necessary visa information and other related data.
Our mission is to streamline this process with a user-friendly website that presents detailed information about destination countries in a clean, visually engaging design. We intend to leverage our design skills to enhance user experience, prioritizing neatness and graphic representation.

Moreover, we seek to connect our initiative with global humanitarian issues. Many countries today require aid due to war, poverty, and natural disasters, a fact that potential travelers may not be aware of. Our platform aims not only to simplify visa processes but also to educate users about the realities in various countries. We hope to inspire our users to contribute and help those in need. Together, we grow.

What it does👀

Visaid welcomes you with a user-friendly interface, asking you questions about your identity, destination, and passport type to tailor the information to your needs. Our interactive map enhances your browsing experience, allowing you to select your destination by clicking on it directly, eliminating the need to type.

After processing your basic information, Visaid quickly presents relevant visa and passport type, simplifying your pre-travel research. If you decide on a travel destination, our platform stands ready to provide comprehensive visa and passport assistance. As you navigate through our website, you'll discover a wealth of resources to aid your travel planning.  

We believe in making travel a force for good and encourage this through our innovative point system. You earn points based on your flight miles, which can be redeemed to support countries and organizations in need. As you traverse the world, your journey contributes to a greater cause. Your points will be converted into donations to the countries of your choice, turning your travel into a pathway for change. At Visaid, we're not just about facilitating travel; we're about fostering global solidarity.

How we built it💻

Our journey in building Visaid began with an in-depth research phase, during which we explored the complex landscape of global travel and visa access while also identifying key issues and the 17 sustainable development goals faced by underprivileged communities around the world. Through our research, we conceptualized our platform to bridge these gaps, serving the dual goals of streamlining the visa process and fostering global philanthropy.

Armed with this vision, we turned to Figma to translate our ideas into digital prototypes. We designed a user-centric interface to ensure that every feature is intuitive and effective. We focus on creating seamless connections between travelers and the countries they need to travel to, and on making the visa process as straightforward as possible.

Through iterative design and user testing, our prototype evolved. We incorporated feedback, refined our solutions, and ensured that our platform not only lived up to our vision, but also catered to the needs and expectations of our users.

Challenges we ran into💦

One significant challenge was creating a responsive text or picture description upon mouse hover, which required diligent research, online tutorials, and the shared knowledge within our team. Also, the map feature posed its challenges, including the intricacies of chart selection, country area hover capabilities, horizontal scrolling, and transitioning to the next section. These aren't commonly seen functionalities, but we explored and successfully integrated them.

Accomplishments that we're proud of💃

Our website not only delivers essential details but also presents them in an engaging, visually appealing manner, enhancing the user experience. We tried our best to incorporate all UI/UX knowledge to standardize our project. Beyond the tangible outcomes, we're proud of our team’s adaptability and learning agility throughout the project. Our achievements with Visaid are a prove to our commitment, ingenuity, and collective drive for excellence.

What we learned📖

Throughout this project, we honed our animation skills and gained valuable experience in tackling unique challenges.  

Our diverse experiences with Figma served as a learning platform for all. We cross-educated each other on animation intricacies within Figma, leading to enhanced control over the tool. The project, intense and time-constrained, united us towards a common goal. The bond we formed and the knowledge we gained through this collaborative experience is something we will carry forward. Our journey with Visaid was as much about learning as it was about creating.

What's next for Visaid🌟

We are really look forward to explore and work on our website in the future, such as adding more information about the visas and passport type version, keeping updates with different embassy, keep track with the people and organizations the users aided to make our website a logical and solid project. We are excited about making a community to connect Visaiders all around the world!
",https://www.figma.com/proto/6fVDHRIhtVcJPYL11mVb4o/Wireframe?page-id=0%3A1&type=design&node-id=1-2&viewport=586%2C321%2C0.21&scaling=scale-down&starting-point-node-id=1%3A2,https://www.youtube.com/watch?v=4Q8APMzqJ8Q&t=27s,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack",figma,Jiewen,Li,jwlli@ucdavis.edu,,Yes,"University of California, Davis","This weekend our team had the opportunity to work extensively with Figma during the hackathon. As a collaborative design tool, Figma proved invaluable in translating our ideas into visually appealing and functional prototypes. Its real-time collaboration feature allowed us to design concurrently, fostering a truly team-oriented design experience.

The wide array of features, from interactive components to auto-layout, gave us the flexibility to design and iterate rapidly. While the learning curve was somewhat steep, the intuitive interface and comprehensive resources offered by Figma made the process accessible.

Although we primarily focused on Figma this weekend, we are eager to explore other technologies in future hackathons. Tools like GitHub and MongoDB have caught our interest, and we're excited to broaden our tech landscape and incorporate these in our workflow next time.","","University of California - Davis, UC Davis",2,Tina,Jiang,yutongjiangtt@gmail.com,Ruofei,Zhu,rfzhu@ucdavis.edu
AggiePlatter,,"",Draft,Pending,Project overview,05/21/2023 03:40:20,"","",,"","",Matthew,Hong,matthewlhong@gmail.com,,"","","","",University of California - Davis,2,Jeremy,Ha,jeremy1112ha@gmail.com,cd-chan,,caitlindchan@gmail.com
Untitled,,"",Draft,Pending,Manage team,05/21/2023 03:47:28,"","",,"","",dheeksham,magesh,dheeksha.magesh@gmail.com,,"","","","","",0
Freepop,80,https://hackdavis2023.devpost.com/submissions/412657-freepop,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 04:28:04,"Inspiration

We were inspired by the numerous reports about the extreme waste of fast fashion giants like Shein and H&M, which mass produce thousands of new items daily and commit environmental and ethical violations. Clothes are often trendy and buyers often only wear them a few times before tossing it or donating it to the thrift store. Because of the reputation of these brands, customers at the thrift stores often pass up on these items in favor of vintage clothing that stores like Goodwill price the same as items from Shein. On reselling apps such as Depop and Ebay, these fast fashion pieces are often difficult to sell because users can get the piece for nearly the same price new from the fast fashion giants. Freepop seeks to tackle the issue of clothing waste by facilitating clothing donations to ensure that your old fast fashion pieces don’t inevitably go from the thrift store to the landfill.

What it does

Freepop is a fast fashion clothing exchange app where all items uploaded by users must be free. The only fees applied are for shipping. We modeled our app after popular reselling platforms like Depop and Ebay with a social media like feed layout that is user friendly and geared towards younger people. Users who no longer want their old fast fashion clothing but want to make sure that their item goes to someone who needs/wants it rather than ending up in the landfill can upload it on Freepop into the category of tops, pants, skirts, dresses, shoes, or accessories. They can specify size, brand, and have the option of doing local delivery and/or shipping via USPS which the receiver will pay for. The option of local delivery/pickup within their preferred range allows users who live close by to skip shipping fees and do a truly free clothing exchange. Users can “follow” each other, send direct messages to ask about the pieces, and even add hashtags to find clothes that fit a specific trend/aesthetic. Additionally, if the receiver wants to thank the donor, they have the option of adding a “tip” at checkout but are not obligated.

How we built it

We drew out some designs with pen and paper and researched the UI of other platforms like Depop and Ebay for inspiration. We then used Figma to build a prototype that has a functioning and interactive flow interface.

Challenges we ran into

Some challenges we faced include the learning curve to using Figma, such as with building a drop down menu and figuring out the interactions. Additionally, thinking about all the components that we often take for granted in an app and incorporating them into our prototype was difficult but rewarding once we put all the frames together!

Accomplishments that we're proud of

We are proud of our vision for battling fast fashion clothing waste while also prioritizing low income access to fashionable clothing. Additionally, we are proud of the UI of our app as the flow is user friendly and familiar to younger audiences that are accustomed to social media style apps.

What we learned

We learned to plan out the flow and user navigation in detail and think about the functionality of each component and button in an app. We also improved our skills in Figma with designing interactive components and creating a logical and intuitive flow.

What's next for Freepop

The next step is to go from prototype to fully functioning app available on iOS and Android! We would initially invest some of our personal funds into the cost of database services and developer kits for building out Freepop and after it is more established, we plan to move to advertisers. Running ads on Freepop will allow it to sustain the nonprofit model through ad revenue to ensure we never charge users.
","https://www.figma.com/proto/ZP9aPr8EGpkBthTKTdq8Rh/hackdavis23?type=design&node-id=1-4&scaling=min-zoom&page-id=0%3A1&starting-point-node-id=1%3A4, https://www.figma.com/file/ZP9aPr8EGpkBthTKTdq8Rh/hackdavis23?type=design&node-id=0%3A1&t=3SHKyZ5DFlF2MlB3-1",,"Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Most Creative Hack",figma,Christine,Li,cwrli@ucdavis.edu,,Yes,"University of California, Davis",Figma,"",University of California - Davis,1,Bea,Zhu,brizhu@ucdavis.edu
Disaster Strikes!,,"",Draft,Pending,Project overview,05/21/2023 05:23:51,"","",,"","",Megan,Liu,liumegan228@gmail.com,,"","","","",University of California - Davis,0
Visual Tales,97,https://hackdavis2023.devpost.com/submissions/412673-visual-tales,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 05:39:15,"Inspiration

Often times tedious task and assignments that require significant practice can be mundane and boring to most students. We wanted to find a way to apply generative AI to solve this challenge, Specifically in the practice of writing a critical skill all students are required however it can be a dull chore. 

What it does

Our platform allows students to write practice their writing skills in a fun and engaging way. The students enter a paragraph in a story they write and generate an image using Open AI's Dall-E image generation model.

How we built it

we used Replit and Django to host our project, we connected to the Dall-E via API. In order to generate quality results we had to turn user writing passages into quality prompts. This included parsing and removing filler words in user inputs. We used bootstrap to help build an interactive and visually appealing interface.

Challenges we ran into

We ran into many challenges while building this system. First of all, connecting openai to our system via secret key was a hassle. We were able to get past this roadblock by attending the chatgpt plugin workshop and figuring out how using openai works with our system. We also had issues trying to retrieve and show the image to the user after accepting the prompt. The answer of that problem finally came to us through a lot of trial and error.

Accomplishments that we're proud of

We are really proud of getting the API to connect and retrieve images and submit prompts. This was one of the harder parts of the project and a major milestone in making this project. Once we accomplished this we were able to build our interface and build a consistent and stable prompting format.

What we learned

We learned how to build a full stack web application using Django. This was a new task that multiple team members were new too. It proved to be valuable to learn how to connect the backend and frontend of a web application. In order to build a robust and effective application that is easily accessible to users via the web.

What's next for Visual Tales

We plan to add more features to our platform in  order to store whole stories together and have a viewing mode to look through finished stories. We also plan to add security features including a login page and different user roles including teachers and students. In order to allow teachers to better record assignments.
",https://hackdavis.anthonyavendano.repl.co/,,"Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","django, html, python, css",aj-avendano,Avendano,anthonyavendano209@gmail.com,,Yes,CSU Stanislaus,Replit was a great platform for collaborative development,"",California State University - Stanislaus,3,Jason,Eissayou,eissayouj@gmail.com,Anthony,C,anthony1093ca@gmail.com,Robin R,Martin,robinkjbird@gmail.com
Aggie Reuse Inventory!,23,https://hackdavis2023.devpost.com/submissions/412674-aggie-reuse-inventory,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 05:42:02,"The Aggie Reuse Store received over 1,300 clothing items last quarter and diverted over 1,000 pounds of waste. These numbers have been growing every quarter, and they have become too large to be sustained by the spreadsheet they use to keep track of inventory. The current system of manually updating the spreadsheet to keep track of input and output is very tedious for volunteers and is prone to human error. To increase efficiency and sustainability, the Aggie Reuse Store would like to implement an inventory tracking system with a user-friendly, streamlined interface and an organized database for their data analytics team. How can we upgrade the current system to meet the Aggie Reuse Store’s need for an inventory tracking system?

Inspiration

We were inspired by the Aggie Reuse Store!

What it does

We created a database with MongoDB Atlas to store inventory data.

How we built it

We used react.js/css for the frontend and used node.js for accessing our database created using MongoDB. 

Challenges we ran into

Many. Connecting our frontend and backend, debugging react components, and properly updating values in the database.

Accomplishments that we're proud of

Creating a functional database for a real-world scenario. The button.

What we learned

We learned how to effectively collaborate using Github with VSCode, as well as how to communicate what is needed from the backend to make things work.

What's next for Aggie Reuse Inventory!

We hope to fix some bugs related to connecting the front-end to the back-end, as currently there are some bugs when attempting to save to the database. If there is time in the future, we hope to add some data visualizations and the option for users to select dates (via some kind of calendar selector).
",https://github.com/maggiemah/aggie-reuse,,"Best Use of MongoDB Atlas, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Best Aggie Reuse Store Hack","mongodb, node.js, react.js, express.js",Winnie,Zhu,winniez0526@gmail.com,,No,"University of California - Davis, University of California - Berkeley","We used MongoDB to store the inventory for Aggie Reuse. It was relatively intuitive to use, and within 30 minutes I had a fully functional database that I could interact with using many different methods, including Node.js.","",University of California - Davis,2,Maggie,Mah,maggiemah73@gmail.com,Jiff,Pop,jiff13579@gmail.com
TexquisiteCV,42,https://hackdavis2023.devpost.com/submissions/412678-texquisitecv,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 06:10:06,"Inspiration

TexquisiteCV was inspired by the desire to bridge the gap between visually appealing resumes and compatibility with Applicant Tracking Systems (ATS). Recognizing the complexity of LaTeX, the creators sought to simplify the process. They envisioned a seamless solution that combines the power of LaTeX with user-friendly features: GitHub integration, template selection, quick data entry, and automated PDF generation. TexquisiteCV aims to empower individuals in showcasing their talents effectively and efficiently, enabling them to stand out in the competitive job market.

What it does

TexquisiteCV is an open-source platform that revolutionizes the creation of resumes using LaTeX. It simplifies the process for users, making it accessible even to those unfamiliar with LaTeX. By logging in with GitHub, users can choose from a variety of pre-defined templates and effortlessly enter their information. With a single click, TexquisiteCV generates a dedicated GitHub repository and initiates a workflow that compiles the resume into a polished PDF within minutes.

One of TexquisiteCV's unique features is its flexibility. Users can create their own templates by leveraging the platform's defined configuration options. This empowers individuals to tailor their resumes to their specific needs and preferences. Furthermore, TexquisiteCV allows users to publish their self-designed templates, making them available for other students to utilize.

By combining the power of LaTeX, the collaborative nature of open source development, and the ability to share and utilize custom templates, TexquisiteCV empowers students to create visually stunning and ATS-friendly resumes, ultimately enhancing their chances of success in the competitive job market.

How we built it

TexquisiteCV was meticulously built using a robust tech stack and a combination of powerful tools and frameworks. The project leveraged various technologies to ensure a seamless and efficient experience for users.

The templates were constructed using LaTeX, a widely used typesetting system known for its professional-looking documents. To provide flexibility and customization options, the template configurations were written in JSON format, allowing users to easily modify and personalize their resumes.

The frontend and backend of TexquisiteCV were developed using ReactJS and NextJS, respectively. These popular JavaScript frameworks facilitated the creation of a responsive and interactive user interface. Material-UI (MUI) was utilized to design and style the frontend components, enhancing the overall user experience.

For data storage, MongoDB Atlas, a cloud-based NoSQL database service, was employed. It ensured reliable and scalable data management, enabling seamless user profile and template storage.

To streamline administrative tasks, Retool, a powerful platform for building internal tools, was utilized. It simplified various backend processes, facilitating efficient management of user data and system settings. In order to combat false template submissions, the submissions have to go through an approval process which is handled by Retool.

Integration with GitHub APIs and OAuth apps was instrumental in providing key functionalities. These APIs enabled TexquisiteCV to read repositories, generate new ones from templates, modify LaTeX files, and execute workflows. This integration ensured smooth collaboration between TexquisiteCV and GitHub, facilitating automated PDF generation, PDF download, and repository creation.

By leveraging these cutting-edge technologies and integrations, TexquisiteCV was developed to deliver a user-friendly, efficient, and feature-rich platform for creating professional resumes using LaTeX.

Challenges we ran into

During the development of TexquisiteCV, our team encountered several challenges that required innovative solutions and diligent problem-solving.

Learning Curve: One of the primary challenges was the complexity of LaTeX itself. As a typesetting system with a steep learning curve, it required significant effort to understand its intricacies and leverage its capabilities effectively. Overcoming this challenge involved extensive research, experimentation, and collaboration to ensure a user-friendly experience.

Integrating GitHub APIs: Integrating with GitHub APIs and OAuth apps presented its own set of challenges. Navigating the documentation, understanding authentication processes, and implementing the necessary functionality required meticulous attention to detail. Troubleshooting and debugging were crucial to ensuring smooth interactions between TexquisiteCV and GitHub.

Workflow Automation: Building a streamlined workflow for automatically generating PDFs involved orchestrating multiple steps, such as repository creation, file modification, and workflow execution. Coordinating these tasks while considering various edge cases and potential errors demanded careful planning and rigorous testing.

Template Customization: Enabling users to create and customize their templates within the platform required a flexible and user-friendly system. Designing a configuration format that allowed easy modifications while ensuring compatibility with LaTeX templates proved to be a challenge. Striking a balance between customization options and maintaining the integrity of the LaTeX structure required iterative refinement.

Scalability and Performance: As TexquisiteCV aimed to cater to a growing user base, ensuring scalability and optimal performance became crucial. Optimizing database queries, implementing caching mechanisms, and fine-tuning the application's architecture were essential to deliver a seamless experience, even during peak usage.

User Experience and Design: Crafting an intuitive and visually appealing user interface was an ongoing challenge. Balancing the complex features of LaTeX with a clean and user-friendly design required thoughtful consideration and continuous iterations based on user feedback.

Accomplishments that we're proud of

Throughout the development process, the TexquisiteCV team achieved several notable accomplishments that we are proud of. These accomplishments highlight the dedication and innovation behind the project:

Simplified LaTeX for Users: TexquisiteCV successfully simplified the process of creating LaTeX-based resumes for users who are unfamiliar with LaTeX. By providing a user-friendly interface, pre-defined templates, and easy data entry, we made LaTeX accessible to a wider audience, empowering individuals to create visually appealing and ATS-friendly resumes effortlessly.

Seamless GitHub Integration: Our team accomplished seamless integration with GitHub APIs and OAuth apps. This integration allowed users to log in with their GitHub accounts, automatically generated repositories for their resumes, and executed workflows to build polished PDFs. By leveraging GitHub's infrastructure, we provided a streamlined and efficient user experience.

Customizable Template System: TexquisiteCV implemented a customizable template system, enabling users to create and modify their own resume templates. By defining configurations in JSON format, users could personalize their resumes to reflect their unique styles and preferences. This feature encouraged creativity and allowed for diverse and tailored resume designs.

Open-Source Collaboration: TexquisiteCV embraced the spirit of open-source development. We are proud of fostering a collaborative environment where anyone can contribute to the project by creating new templates using the defined configurations. By enabling users to publish their templates, we encouraged the sharing of ideas and resources, benefiting the entire TexquisiteCV community.

Efficient Workflow Automation: We successfully implemented an automated workflow that encompassed repository generation, LaTeX file modification, and PDF compilation. This streamlined process significantly reduced the time and effort required for users to obtain their final resumes, delivering polished PDFs within minutes.

User-Centric Design: TexquisiteCV prioritized the user experience, ensuring an intuitive and visually appealing interface. By incorporating user feedback and iterative design improvements, we achieved a platform that balanced functionality, simplicity, and aesthetic appeal.

What's next for TexquisiteCV

TexquisiteCV has achieved significant milestones, but our journey doesn't end here. We have exciting plans for the future to further enhance the platform and provide even more value to our users. Here's what's next for TexquisiteCV:


Expanded Template Library: We will continue to expand our template library to offer a wide range of designs and styles to suit diverse preferences and industries. This will provide users with more options to create resumes that align with their personal branding and career goals.
Enhanced Customization Options: We aim to provide users with even more customization options for their templates. This includes additional configuration settings, font choices, color schemes, and layout variations, empowering users to create highly personalized and unique resumes.
Advanced ATS Optimization: We will further optimize resumes for compatibility with Applicant Tracking Systems (ATS). By leveraging industry insights and staying up-to-date with ATS requirements, we will enhance TexquisiteCV's ability to generate resumes that pass through ATS filters effectively.
Collaboration Features: We plan to introduce collaborative features, allowing users to collaborate with others on resume creation. This will enable teams, mentors, or career advisors to provide feedback, review, and contribute to the resume-building process, fostering a collaborative and supportive environment.
Integration with Professional Platforms: We aim to integrate TexquisiteCV with professional platforms, such as LinkedIn or job portals, to streamline the resume submission process. This integration will enable users to easily import their profile information and seamlessly apply for job opportunities.
Mobile-Friendly Experience: We recognize the importance of mobile accessibility. We will develop a mobile-responsive version of TexquisiteCV, allowing users to create, edit, and download their resumes conveniently from their mobile devices.
Community Contributions: We will continue to encourage and support community contributions by expanding our open-source initiative. Users will have the opportunity to contribute new templates, suggest improvements, and collaborate on the platform's development.
User Feedback and Iterative Improvements: We value user feedback and will continue to gather insights to drive iterative improvements. Listening to our users' needs and preferences is crucial in shaping the future direction of TexquisiteCV, ensuring it remains a valuable and user-centric platform.

","https://github.com/helloparthshah/cvbuilder, http://texquisitecv.vercel.app",,"Best Use of MongoDB Atlas, Best Domain Name from Domain.com, Most Creative Use of GitHub, Best Use of Retool","nextjs, react, mui, github, github-jobs, mongodb, retool",Parth,Shah,helloparthshah@gmail.com,,Yes,"University of California, Davis","During the HackDavis hackathon, we had the opportunity to interact with various technologies that played crucial roles in the development of TexquisiteCV. Here's some feedback on some of these technologies:

GitHub: GitHub proved to be an essential platform for version control, collaboration, and integration. Its APIs and OAuth functionality allowed us to seamlessly interact with repositories, create workflows, and automate PDF generation. The documentation provided by GitHub was comprehensive and easy to follow, making the integration process smooth.

ReactJS and NextJS: ReactJS and NextJS formed the foundation of our frontend and backend development, respectively. These frameworks provided a robust and efficient development environment, enabling us to create a responsive and interactive user interface. The extensive libraries and strong community support of ReactJS and NextJS helped us overcome various challenges during the development process.

MongoDB Atlas: MongoDB Atlas served as our database solution, offering scalability, flexibility, and ease of use. Its cloud-based nature simplified data management, and the integration with our backend was straightforward. We found the query capabilities of MongoDB Atlas to be powerful and efficient, allowing us to retrieve and store user data seamlessly.

MUI (Material-UI): MUI proved to be an excellent choice for designing and styling our user interface. Its vast collection of pre-designed components and customizable theming options helped us achieve a visually appealing and consistent design across the application. The documentation and community support for MUI were exceptional, providing clear guidance and examples.

LaTeX: Interacting with LaTeX presented unique challenges due to its complex nature. However, once we grasped its principles and capabilities, we recognized its power for creating professional-looking resumes. Despite its steep learning curve, LaTeX provided precise control over document formatting, resulting in high-quality output.","texquisitecv.vercel.app, texquisitecv.tech",University of California - Davis,1,Harshil,Patel,hpppatel@ucdavis.edu
jumpRV,93,https://hackdavis2023.devpost.com/submissions/412679-jumprv,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 06:10:07,"Inspiration

Assembly is the human gateway into the depths of the computer's inner workings. Assembly is a human-friendly way to write and read binary machine code without having to deal with the binary aspect. Ultimately, assembly expresses the lowest level of abstraction and correlates directly with the hardware.

Young computer scientists are expected to be experts in computers. However, many CS students find it difficult to grasp assembly. Many students are first exposed to high-level languages like C and have difficulty expressing program flow in assembly due to its closer-to-the-hardware nature. Many students shudder in fear at the bare mention of x86 assembly.

One could argue that it might be easier to teach assembly to students as their first language due to its relative simplicity compared to other feature-packed languages. However, a barrier to this is the technical aptitude required to get assembly code to run and compile and do useful things.

So, we GAMIFIED ASSEMBLY.  Now students can have FUN learning ASSEMBLY without the TECHNICAL APTITUDE and BACKGROUND KNOWLEDGE required to access it.

(it was Abhi's idea)

What it does

Our educational game is an easy-to-access, gamified path to getting familiar with assembly. 

Our game is a visual and interactive way to experiment with assembly instructions and a gentle introduction to the art of whispering to the machine in its native language.
     ██╗██╗   ██╗███╗   ███╗██████╗ ██████╗ ██╗   ██╗
     ██║██║   ██║████╗ ████║██╔══██╗██╔══██╗██║   ██║
     ██║██║   ██║██╔████╔██║██████╔╝██████╔╝██║   ██║
██   ██║██║   ██║██║╚██╔╝██║██╔═══╝ ██╔══██╗╚██╗ ██╔╝
╚█████╔╝╚██████╔╝██║ ╚═╝ ██║██║     ██║  ██║ ╚████╔╝ 
 ╚════╝  ╚═════╝ ╚═╝     ╚═╝╚═╝     ╚═╝  ╚═╝  ╚═══╝ 

There is an RV that jumps from island to island, controlled by a (R)ISC-(V) virtual machine running user-written instructions. Players must manipulate the virtual machine and use assembly programming concepts to solve the puzzles. Players are guided through a campaign of levels where they will be taught the basics necessary to program in assembly and solve the problems.

How we built it

Even though this project is just a game, it is composed of many diverse technologies painstakingly integrated together to attain a game with a working RISC-V emulator that interacts with the game world.

The game was built with the Unity game engine, FIGMA, magicavoxel, and sheer patience and willpower.

The myriad languages used to build the game include Javascript, Rust, and C#.

We fired up a V8 Javascript Engine to run the assembler as well. That's right, our game has an instance of the V8 engine which we use to do cross-language interop with Rust and then eventually C#. The engine is used to run a Javascript library for disassembling and assembling RISC-V instructions known as rvcodec.js, a product of LupLab @ UCD.
Why did we instantiate a Javascript engine to do the simple act of assembling RISC-V instructions? (i) It's not that simple and takes a long time and (ii) we are lazy.

The heart of our game is a RISC-V emulator, rvemu. Of course, if we are too lazy to write an assembler, we are too lazy to write a virtual machine. So, we wrote some C# bindings for rvemu that allows us to use it in Unity.

Challenges we ran into

Most of our issues were combinations of bugs that took us hours to debug. There was a particularly nasty set of bugs related to the endianness of the encoded instructions, the size of types (64-bit integers vs 32-bit integers) interoperating between languages, and parsing errors. We had bad output values and determined that the assembler was outputting the instructions with the wrong endianness. We swap some of our code to big-endian, and it works a couple of times. We were confused - since the manual specified that RISC-V uses a little-endian memory layout. A bit later, it magically stops working and we fix it by reverting the change to little endian. What? We would have been much more productive if we were more efficient in debugging and not stuck on a single bug for 3 hours.

Our workflow was slow and we did not have a good build system for the various components of the game, and we often debugged through painstakingly running commands and pressing buttons over and over again. We had problems with the .gitignore file because so many parts of the projects were changing that we inadvertently gitignored vital files. 

The V8 engine was a bit hard to set up.
The game concept was a bit hard to think about.
The interop between Javascript, Rust, C# made us want to cry.
One member of the team didn't have tools installed to build and test the game...

Accomplishments that we're proud of

We basically made a RISC-V interpreter and assembler into a game. Also, JAVASCRIPT V8 IN UNITY BAYBEE

What we learned

We learned that next time we will consider using less inter-language components due to the difficulty of debugging.

What's next for jumpRV

Playtesting with Aggies who are interested in picking up programming!
",https://github.com/JaredGivens/RVJump,,"Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","rust, unity, magicavoxel, risc-v, c#, v8",Daria,Buka,dvbuka@ucdavis.edu,,Yes,"University of California, Davis",Yes,jumprv.com,"University of California - Davis, UC Davis",3,Dan,,onomatopoeicboom@gmail.com,Abhiroop,Sohal,abso@ucdavis.edu,Jared,Givens,jareddocg@gmail.com
Happy Feet,53,https://hackdavis2023.devpost.com/submissions/412680-happy-feet,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 06:17:07,"Happy Feet

Inspiration

Happy Feet is a Foot Traffic Tracker, allowing non-profits a cheap and affordable choice in gathering real data to improve store efficiency, allowing for the elimination surveys and manual documentation.

What it does

A database and implementation of affordable hardware that allows for tracking of foot traffic into an area. This can be used to figure out what is the most effective advertisement used to gather visitors into a store. One large benefit is predicting an appropriate amount of employees to be scheduled.

How we built it

Utilizing a HC-SR04 ultrasonic distance sensor and a Arduino we were able to create door way tracker to detect the amount of potential shoppers entering stores, through detecting if someone has pass through the entrance using the signals received from the HC-SR04. Information is processed and ideally visually represented into a website with the help of React.js

Challenges we ran into

Hardware was new for our group, so incorporating tech into our project allowed us to step out of our comfort zone while experiencing something new and exciting. A big challenge we had to work through was implementing a system that was able to fetch our data from our WIFI-less Arduino, and process it into real data. The data sent from the Arduino was hard to make sense of as we couldn't figure out how to decipher it. We spent the majority of our time processing the mock data for our forecasting machine-learning models.

Accomplishments that we're proud of


Getting first-hand experience in utilizing hardware with software.
Coding in different languages, and creating a product that enveloped our skills.
Being able to process data from the Arduino and create an LSTM Machine Learning algorithm to detect and find high foot traffic times.
## What we learned
It was our first time working with hardware and creating a full stack development that involved more than just the back end and data. We learned a lot about working in a team and being able to split tasks and combining all of our efforts into a finished product.


What's next for Happy Feet?

Creating a more interactive site, allowing for a more precise selection of data to look at. Allow for direct importing of a .json file to examine separate data. Creation of comparing different timeframes visually. Creating a section that showcases certain highlights, like peaks, marginal increase/decrease, and popular weeks. Some small things targeted for Aggie Reuse could be advertisements of certain pieces of clothing currently available. 
","",,"Best Domain Name from Domain.com, Best Beginner Hack, Most Creative Hack, Best Aggie Reuse Store Hack","python, html, css, react, javascript, ardunio, c++, ultrasonic-distance-sensor, r",Jason,Ma,jasonbma317@gmail.com,,No,"All four of us attend University of California, Davis","Our group had our first time hands on some hardware and working on code with it. Sadly for the Arduino we chose it didn't have Wi-FI capabilities and made our assignment a lot harder, even failing to get it done with tons of mentor help.","Happy Feet, StrideTrack, TrackFlow, StorePulse",University of California - Davis,3,Ethan,Chang,ethanchangy29@gmail.com,Eric,Sun,erictsun02@gmail.com,JunJHL,Liao,junjiejesse@gmail.com
Aggie Reuse Inventory,32,https://hackdavis2023.devpost.com/submissions/412683-aggie-reuse-inventory,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 06:25:05,"Inspiration

We were inspired by the services Aggie Reuse provide to the local community

What it does

The app allows users to add and keep track of items in the Aggie Reuse Store. Each item has a name, category, description, date/time added, and a unique id. The access page interface allows users to keep track of items in the store efficiently.

How we built it

We built the frontend of this app using Javascript, React and Material-UI. The backend is built using Node.js, Express, and a MongoDB database.

Challenges we ran into

Some challenges we ran into was setting up the backend and connecting it to the front end. We were also unfamiliar with using databases but we tried to make the system as efficient as possible.

Accomplishments that we're proud of

We were proud of building a complete full stack application and using various web development frameworks in the project. This is also our first time working with a database which was a great learning experience.

What we learned

We learned to use several web development technologies like React, NodeJS, and Express.  We also became familiar working with the backend and using MongoDB database.

What's next for Aggie Reuse Inventory

In the future, we planning on improving the UI interface of Aggie Reuse Inventory to make it more user friendly. We also plan on adding several features like editing, deleting, and additional sub categories to items to make it more efficient to manage.
","https://github.com/zhxu33/Aggie-Reuse-Inventory, https://aggie-reuse-inventory.herokuapp.com/",,"Best Use of MongoDB Atlas, Most Creative Use of GitHub, Best Beginner Hack, Best Aggie Reuse Store Hack","react, mui, javascript, html, css, node.js, express.js, mongodb",James,Xu,zhxu33@gmail.com,,Yes,"University of California, Davis",It was a great experience using Github for collaboration. And MongoDB was easy to use with little prior experience to using databases.,"",University of California - Davis,1,hdjekso,,raytamcy@gmail.com
Culinary Clash,56,https://hackdavis2023.devpost.com/submissions/412684-culinary-clash,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 06:26:44,"Inspiration

Our group is an avid fan of the various delicacies that the UC Davis Dining commons provide. The wide variety of choice and superb excellency in taste and quality is truly belonging to a campus with the top 100 dining commons in America.

What it does

Our game seeks to create a roguelike adventure for users to battle various mobs and explore various parts of the Segundo and Latitude Dining Commons. We hope that the implementation of a cross dining common menu may make it easier for students to access the unique entrees for specific days of the week and compare their favorites. We hope that providing this information for students may allow students to pick their favorite foods more often and reduce possible food waste. 

How we built it

We built this project using the Unity Engine Version 2021.3.25f1, C# scripts, and photoshop.

Challenges we ran into

Time constraints were a major issue when it comes to coding and developing in Unity due to the length of time taken to ensuring quality performance and smooth gameplay. Similarly, we were limited on the number of assets we had available and had to be resourceful in displaying more with less. Lastly, we are new to Unity and its tools so we might not have been able to fully utilize its potential.

Accomplishments that we're proud of

We have a very detailed and player friendly map for users to explore and skirmish with the various enemy types. Similarly, our spawner system and menu systems have smooth processing and loading. Our sprites are well defined and animated. We also hope that improvements to the menu may make it viable alternative for students to check the menus ahead of time.

What we learned

Unity is a difficult engine that takes a lot of time to learn and master. There is a lot of work to be done when it comes to animating sprites and getting a backend running for the game. 

What's next for Culinary Clash

We hope to port this game to a mobile format where it would be most convenient to play handheld. We hope that this app may also provide data for the UC Davis Housing and Dining Services to help provide students with a more preferred selection based of popular preference and possibly reduce food waste by having unpopular dishes less often. We also hope to automate the process in uploading the upcoming menus, since many are repeats in possible entree items, there are few scripts needed to make it consistently updatable.
",https://github.com/cioudfox/Hack-Davis-2023-Dining-Common-Game,https://youtu.be/zFk0zzHb6MQ,"Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","c#, visual-studio-code, photoshop, unity",Steven,Chen,guestaguy@gmail.com,,Yes,"University of California, Davis",Wifi was incredibly slow midday and made loading project assets very difficult.,"",University of California - Davis,3,Jason,Wu,jncwu@ucdavis.edu,Young Cheol,Ko,aqr1704@gmail.com,Hongye,Xu,hyexu@ucdavis.edu
ForUs,82,https://hackdavis2023.devpost.com/submissions/412701-forus,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 07:37:56,"We wanted to support LGBTQIA+ people all around us.

ForUs connects members of the LGBTQIA+ community in Yolo county and allowing them to support each other through a central platform.

ForUs was created with the philosophy of Mutual Aid as it's source of inspiration. A community resource application for the LGBTQIA+ community. of Yolo County. ForUs connects members by allowing them to support each other through a central platform.  

How we built it

The website was ideated and drafted in Figma and all illustrated content was created in Adobe Illustrator. 

Challenges we ran into

This project was intended to be a fully developed website and high fidelity Figma prototype. This proved to be too ambitious for the time constraints given so our team pivoted it's focus to the refining our current prototype. 

Another challenging aspect of this website's creation was curating and generating the site's contents. We as designers strived to develop an interface that is accessible while unique in it's style and personality. 

Accomplishments that we're proud of

The team overall is pleased with everything they managed to accomplish as this is their first hackathon. The concept of this project is very close to us as designers and as members of the LGBTQIA+ community. We hope to further develop this project and achieve the functioning website that was initially intended.

What we learned

This project challenge pushed our collective knowledge of web design and coding to it's limits. We were very ambitious with this project and had to learn what it means to make compromises under time constraints. Most of all we learned we work very effectively as a team and look forward to working together in the future. Also, the importance of taking breaks and stepping away to come back with a refreshed mindset. 

What's next for ForUs

The plan moving forward with this project is to continue expanding and developing our concept. We'll continue refining our skills in Figma and programming. Our next pass at ForUs will include an updated design and functioning website that will appear on our collective portfolios.
",https://www.figma.com/proto/PkAwC5wsjfuwz7u14uwNpq/HackDavis-Idea?type=design&node-id=72-3&scaling=min-zoom&page-id=72%3A2&starting-point-node-id=72%3A3&show-proto-sidebar=1,https://www.youtube.com/watch?v=_0GFJwrKbWA,Best Design,figma,Santhoshi,Ramanathan,san.lakh1306@gmail.com,,No,"University of California, Davis",N/A,"",University of California - Davis,3,brenda,padron,b.padron24@gmail.com,Jennifer,Ramos,jenni.prime.illust@gmail.com,kim,hofmann,kchofmann@ucdavis.edu
State Facts!,27,https://hackdavis2023.devpost.com/submissions/412705-state-facts,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 08:01:23,"The Creation of the Radiant Colors: Unleashing the Power of Data Visualization

Once upon a time, in the realm of data enthusiasts, there was a team of visionary minds on a quest to unlock the power of data visualization and tell captivating stories with numbers. Their journey led them to embark on an extraordinary project: creating a map that would reveal the hidden tales of the United States in a truly mesmerizing way.  

The team embarked on a whirlwind adventure, diving deep into the realm of R programming, armed with their passion for data and a burning desire to create something remarkable. The gods (Nick Powers) must have been looking favorably upon them, for they stumbled across a treasure trove of data about each state, capturing the essence of its people, economy, and social fabric.  

With the data in hand, they began crafting the map of their dreams. Equipped with the R Shiny framework and an array of powerful packages, they brought their vision to life. They meticulously designed a stunning interface that would captivate anyone who laid eyes upon it.  

As unseasoned adventurers, they were forced to navigate git and github, dig through the tunnels of R Shiny and leaflet, and square-off against HTML and CSS. Though the journey was arduous, they persisted through all challenges. With an ingenious touch, not without the help of those who came before them (R package devs), they added interactive features that allowed users to choose specific variables to explore. They integrated a selection of diverse categories, including general information, income disparities, housing patterns, living costs, law enforcement metrics, policy landscapes, health indicators, and even the influence of climate. This would empower users to uncover the intricate details that shaped each state's identity.  

The team knew that this subtle interaction would draw users into the narrative, enabling them to connect with the stories unfolding before their eyes. With the final stroke of their digital brushes, the team stood back and admired their creation. The map stood as a testament to their dedication, creativity, and unwavering belief in the power of data visualization. It was not merely a collection of colors and shapes; it was an invitation to explore, to understand, and to spark conversations that could lead to positive change for social good.  
","https://kyraliu1.github.io/, https://github.com/kyraliu1/statefacts",,"Most Creative Use of GitHub, Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs","r, html, css, javascript, github, git",Kyra,Liu,kyraliu@gmail.com,,No,UC Davis,GitHub was very useful when we were exhausted and struggling to figure out how to make necessary modifications to our git configs. We were able to completely bypass this obstacle by simply dragging and dropping files into GitHub.,"",University of California - Davis,1,Ryan,Swift,ryanaswift7@gmail.com
IntelliConverse,30,https://hackdavis2023.devpost.com/submissions/412706-intelliconverse,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 08:01:53,"IntelliConverse

IntelliConverse is a project using Chat-GPT to assist individuals with learning disabilities (like dyslexia and ADHD) and reading difficulties. Our solution offers comprehensive answers through typed and spoken inputs/outputs, fostering effective communication and empowering users to overcome challenges.

How we built it

Backend Development Approach


Custom NextJS server as well as Express Server
Routes:


Speech to text
Text to speech
Adding Data to Milvus and MongoDB
Querying Milvus and MongoDB
Removing Data from Milvus and MongoDB
Chat GPT



Frontend Development Approach


NextJS with Material UI
Implemented three chat interfaces


Regular chat
Voice chat
Voice chat with PDF

Voice chat with pdf allows the assistant to answer your questions with references from the pdf


Things that challenged us:


Testing Azure Speech to Text Backend Route: We encountered challenges while testing the integration of the Azure Speech to Text backend route. Ensuring the accuracy and reliability of the speech-to-text conversion posed difficulties during the development process.
Recording Frontend Audio for Azure Speech to Text: Achieving high-quality audio and format compatibility was difficult but essential for accurate transcription. Overcoming these challenges involved debugging, troubleshooting, and fine-tuning the recording and conversion processes to ensure seamless integration and reliable performance.


Accomplishments


Really happy that we managed to successfully implement both the text to speech and speech to text features
Allows us to implement a voice chat functionality as well as a voice chat with pdf functionality


What we learned


We gained insights in audio capture, ensuring compatibility with Azure Speech to Text. Debugging and fine-tuning ensured seamless integration and reliable performance. 
We enhanced our skills in audio processing and frontend implementation for audio-based applications.


What’s next for IntelliConverse


Customization and Training: We'll customize the Chat GPT model to meet our project's objectives, emphasizing a safe and supportive environment.
User Feedback and Iteration: Collecting user feedback to enhance the system and improve user experiences.
Features: Allow uploading more than one pdf at a time, audio streaming to ensure faster responses
Bugs: Fix known bugs such as over context limit, and improve the UI/UX

","https://github.com/IdkwhatImD0ing/study-assistant, https://converse.art3m1s.me/",,"Best Use of MongoDB Atlas, Best Use of Microsoft Cloud for Your Community, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Karim Majdi Abou Najm Memorial Prize for Technical Complexity","nextjs, mui, openapi, azure, microsoft-cloud, mongodb, react, express.js",Sophia,Thompson,smthom@ucdavis.edu,,Yes,"UC Davis (2), UCSC (1), Stanford University (1)","The programs we included were Azure and Microsoft Cloud. Although they were very helpful throughout the process, more thorough documentation would be beneficial. We also used GitHub throughout the process to share and collaborate on code. Along with this, the VS Code's Live Share feature was very helpful, but some prominent bugs (such as delay, etc) caused some issues in the moment.","","University of California - Davis, University of Southern California, National University of Singapore",3,Bill,Z,billzhangsc@gmail.com,Ryan,Yu,ryuyu@ucdavis.edu,Varun,Swaminathan,flerovious@gmail.com
compatibility calculator,24,https://hackdavis2023.devpost.com/submissions/412719-compatibility-calculator,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 09:06:23,"Inspiration

my crush told me to do hackdavis this year

What it does

this project tells you how compatible you and your crush are based on the letters in your names

How we built it

with python pycharm and no sleep

Challenges we ran into

the last time i did python was a year ago and i forgot everything

Accomplishments that we're proud of

i actually made it without using chatgpt

What we learned

i relearned a bunch of intro python stuff
i have 55% compatibility with my crush

What's next for compatibility calculator


compatibility based on dominance in the relationship
leave + store social media accs for match-making 

",https://colab.research.google.com/drive/1fbdLbNQ8mo1WgXToDmqLVZ9-4dpt1XR5?usp=sharing,,Best Beginner Hack,"python, pycharm",Hillary,Vo,hvo@ucdavis.edu,,No,UC Davis,the 360 blackpink camera was cool,"",University of California - Davis,0
Haptic Hand,36,https://hackdavis2023.devpost.com/submissions/412723-haptic-hand,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 09:19:00,"Inspiration

We wanted to focus on accessibility for our project, as it is a topic we feel needs to be addressed more often when designing technology. We initially thought of creating a multifunctional glove that could act as both a walking stick and could function as a TTS braille translator for those still learning braille through the use of a camera. In the end, we decided to keep our goals realistic and focus on the virtual walking stick aspect of the glove for the duration of the Davis Hackathon.

What it does

The Haptic Glove helps the visually impaired navigate obstacles in their space by acting as a ""virtual walking stick."" Unlike a physical walking stick, the haptic glove can be easily aimed to detect obstructions in any direction the user can point their fingers in. Our glove is designed to give the wearer a sense of the distance between them and objects in their path through the use of a vibrating motor in the thumb. The closer the user is to an object, the stronger it vibrates, and the further away the user is, the less intense the vibration becomes. This helps the navigator using the glove determine if an object is in front of them and allow them to tell their relative distance from the object, all without actually touching the object! The distance which the glove can detect can be physically adjusted with the potentiometer in the glove itself, so it can be used by people of various heights, and for other challenging environments and uses!

How we built it

We decided to utilize an infrared sensor to detect objects about 1.2 meters away. By connecting the sensor to a DC motor and attaching the device to a glove, we made the Haptic Glove. We brought many of the materials ourselves, such as wires and the infrared sensor, but some things, such as the DC motor, velcro, and the glove itself, we needed to get ourselves. We started building the glove by gathering materials to create a device that could cause the motor to adjust its speed based on the distance detected by the sensor. For example, the DC motor we scavenged from a toothbrush, and the glove we bought from Walmart.  First, we accessed the distance readings from the sensor and utilized Python to program the motor spin faster when the sensor reads less distance between it an a detected object, and to stop spinning when it cannot detect any objects within a range of 1.2 meters. Then we needed to power the motor controller and attach it to the glove in a compact way that would not impact the user's ability to move too much. We decided to have the raspberry pi pico microcontroller on the back of the hand, the infrared sensor on the tip of the longest finger (to have a better range of motion in pointing the sensor that one would on the palm or the back of the hand), and put the vibration motor on the thumb.

Challenges we ran into

When prototyping for our project, we started off by connecting all of our components to a raspberry pi pico using a standard breadboard. When it came to mounting our project to our glove and preserving its functionality, we quickly realized that our project would have to take a smaller form in order to fit all of our components and preserve the user's comfort and practicality of the device. In our process to solder all of our components onto a strip board to replace the bulky breadbox, we were tasked with making and discarding many design choices as to how the user would use our device in a real world setting. We also had a couple issues with finding a way to get enough volts to power the motor, and we ended up needing to upgrade from 1 AA battery to 3, on a separate power supply from the pi, which required a battery pack to by carried separate from the glove itself. Finally, we ran into many technical issues in soldering and adjusting the wire lengths to a non-obtrusive size that would be less likely to catch on obstacles and would not obstruct the sensor.

Accomplishments that we're proud of

We were able to put together a distance-sensitive glove motor within a few hours! The rest of the time was buying materials for the glove and trying to attach the components to the glove in a way that was practical. Additionally, we are very proud of the way the glove looks and feels, very comfortable and sci-fi. We are also very happy with the range of motion the glove and the functionality of the sensor. Finally, we are happy we were able to implement the physically adjustable range of the glove's sensor, which is really useful, especially for challenging environments like stairs. 

What we learned

We learned a lot from this years Hackathon. First of all, we came much better prepared this year than last year. We had the majority of the components we needed to feasibly consider this idea, and spent much less time at the store. Because we came better prepared, we were able to finish the project very quickly, and even get some sleep during the Hackathon!

What's next for Haptic Hand

In the future, our team wants to implement more functionality in the Haptic Hand, such as adding the brail and English Text-To-Speech feature to make the glove a multifaceted tool. Another goal of ours is to rebuild the glove with better hardware. Currently, our sensor has a max detection range of 1.2 meters. We want to extend that range so that the glove can detect objects that are further away, and thus give our users the option of having more warning. We also would want a motor with more speed control and access to a stronger vibration setting. Most crucially, we desire to test our glove out with real-world potential users and obtain feedback from them on how to make the Haptic Glove better.
",https://github.com/Patronics/HapticGlove/tree/main,https://youtu.be/bXl9GvT3Ld0,"Best Design, Best Hardware Hack, sponsored by the UC Davis Student Startup Center, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Best Healthcare Hack","circuitpython, raspberry-pi, time-of-flight-sensor",John,Schneider,jschneider2@student.sierracollege.edu,,No,"UC Davis, Sierra College",Needed more hardware to loan or give participants,"",University of California - Davis,3,Patrick,Leiser,patrick27leiser@yahoo.com,Aditya,Kurkut,akurkut2297@gmail.com,Sage,Zimmerman,sazimmerman@ucdavis.edu
Fight to Learn,101,https://hackdavis2023.devpost.com/submissions/412726-fight-to-learn,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 09:23:41,"Inspiration

Inspired by Quizlet, Hearthstone, and Kahoot, Fight to Learn aims to combine exciting and tactical gameplay with a helpful studying tool! 

What it does

Fight to Learn is a tactical card game. The two main aspects are education and strategy-- we designed the app with reinforcement learning and having fun in mind. Through playing certain cards, the player can outsmart the computer in a 1v1 battle, but to secure victory, they must answer Kahoot-style questions from an educational question bank. 

How we built it

We used Unity with C# as our framework to create Fight to Learn. Core graphic assets were designed with Procreate. For version control and collaboration, we used Git with GitHub. 

Challenges we ran into

The biggest challenge for our team was learning game development with Unity and C#. None of us had experience with this framework, so we had to learn from the basics in a very limited time. We ran into countless errors such as losing our entire project (3 times), which forced us to muster our greatest perseverance and problem solving skills.  

Accomplishments that we're proud of

Staying awake, together, and resilient for the entirety of our project despite losing huge portions of our code base several times, overcoming the intense Unity learning curve, and everything we have done so far. 

What we learned

We learned how to use Unity and C# to develop a game. We also learned the great importance of version control and that even you didn't succeed at an ambitious goal, the things you learn along the way are of great value as well. Now that we have some more familiarity with Unity, we could implement a lot more features given enough time. 

What's next for Fight to Learn

Unfortunately, we were not able to implement all of the core mechanics of the game due to aforementioned challenges. However, we have a fully developed game design that we can implement in the future. 
We also have lots of extra improvements and features in mind for the far future of this project, including but not limited to: 


Multiplayer support for players to study with friends
Further tactical complexity
Rewards for winning, like coins to purchase in-game cosmetics
Enhanced deck customization
Learning analytics to optimize learning and target essential concepts
New educational themes, and built-in question banks so users can jump right into the studying!

",https://github.com/PuffyDucks/Fight-to-Learn,,"Most Creative Use of GitHub, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","unity, c#, github, git",Naomi,Zhao,ntzhao@ucdavis.edu,,Yes,"UC Davis,",N/A,"","University of California - Davis, De Anza College",3,Luna,Park,9128cool@gmail.com,Brandon,Grimaldo,brandongrimaldo16@gmail.com,sofia,nguyen,qwerty3690217804@gmail.com
Untitled,,"",Draft,Pending,Manage team,05/21/2023 09:37:37,"","",,"","",Kai,Yu,kaifany1@uci.edu,,"","","","",University of California - Irvine,0
Potential Crime Spots Visualization,49,https://hackdavis2023.devpost.com/submissions/412736-potential-crime-spots-visualization,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 09:53:41,"Hack for Social Good: Potential Crime Spots Visualization

Introduction:

Our project aims to address the issue of safeness for students in Davis by building a website that visualizes crime spots on a map. The visualization will help students become aware of high-risk areas for the chosen period of time and enable them to make informed decisions about their routes and activities. This report will outline the goals, methods, and interpretation of our project.

Goals:

Our primary goal is to improve students’ safeness by providing them with a clear visual representation of crime spots in Davis and notifying students of nearby events in the identified danger spots. By highlighting locations where crimes have occurred, we aim to empower students to avoid these areas and minimize their exposure to potential risks.

Methods:

To achieve our goals, we have defined three main steps:


 Dataset Setup: We obtained the necessary data from multiple sources. The crime dataset was generated from the crime logs maintained by the Police Department at UC Davis. It includes information such as crime location, date, and crime type. The event dataset was collected from Davis Enterprise, a local news outlet. We classified the recent events into categories, which are used to build the wordcloud.
 Crime and Event Location Display: On the website's map, danger spots are represented by red icons, indicating where crimes have occurred. This visual cue alerts users to potential risk areas. Additionally, event locations are displayed using flag icons, providing event information.
 Data Visualization: We incorporated various data visualizations to build up the user experience by updating the visualization of information based on chosen time:


Event Calendar: The website features a calendar that marks the dates on which events are scheduled. Furthermore, users can select specific time slots in the date picker input box, and the map updates accordingly to display danger spots and events during the chosen period.
Event Information: A list of event titles is provided, giving users an overview of upcoming activities in Davis.
Word Cloud: A visually engaging word cloud is generated to represent the frequency of different event categories, providing students with a comprehensive view of the local event.



Target Audience: Our website primarily targets students in Davis, allowing them to select time slots on the calendar and view danger spots and event locations from the past month. 

Challenges:

Since it is our first time joining a Hackathon, we're struggling with the topic of the project at the first time. As for the implementation part, the first challenge we face would be the lack of datasets. Because there are no existing datasets for us to work on, we have to build our dataset with the raw data we've searched. Compared to the backend part of the project, the frontend part is the most difficult. We try hard to show our results with vue.js which generates better and clear visualization. Even though working for 24 hours is a tough task, we still think it is an unforgettable experience for all of us. Our great teamwork makes this project complete.

Interpretation:

Inspired by recent deadly incidents in Davis, keeping all students safe and sound is an issue that is prioritized by the UC Davis community. Our website addresses the challenge of visualizing specific locations of these incidents. By providing a visual representation of danger spots on a map, students have the chance to identify high-risk areas and avoid them if they wish to. Moreover, our website incorporates information about future events and their proximity to dangerous spots, preventing students from unknowingly entering potentially dangerous areas. Ultimately, our goal is to foster a safer environment in Davis and promote social well-being.

Conclusion:

Our project offers a practical solution to the safety concerns faced by students in Davis. By visualizing crime spots on a map and incorporating event information, we empower students to make decisions more carefully about their activities and routes. Through this initiative, we strive to enhance student welfare and contribute to the overall social good in our community.
",https://github.com/Elliot0122/PotentialCrimeAlert,,"","python, javascript, npm, flask, google-maps, google-cloud, vue",Howard,Ku,hango880623@gmail.com,,Yes,University of California Davis,"GitHub, Google Cloud","",University of California - Davis,3,Chen-Yu,Yu,tcyyu@ucdavis.edu,Elliot0122,,elliot990122@gmail.com,yingchengchen,,yingchengchen08@gmail.com
Untitled,,"",Draft,Pending,Manage team,05/21/2023 10:03:27,"","",,"","",Douglasmyu,Yu,douglasmyu@csu.fullerton.edu,,"","","","",California State University - Fullerton,0
Untitled,,"",Draft,Pending,Manage team,05/21/2023 10:17:07,"","",,"","",Kavya,Sasikumar,ksasikumar@ucdavis.edu,,"","","","",University of California - Davis,0
Sign Language Object Detection Project,64,https://hackdavis2023.devpost.com/submissions/412746-sign-language-object-detection-project,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 10:33:56,"Inspiration

The journey of creating our Sign Language Object Detection Project began with a spark of inspiration. It all started when one of our team members, Rachel, encountered a deaf person struggling to communicate with others in a public setting. Witnessing the challenges and barriers faced by individuals with hearing impairments sparked a deep sense of empathy and a desire to contribute towards bridging the communication gap.

What it does

Motivated by the idea of empowering the deaf community, we set out to develop a Sign Language Object Detection Program. The program aims to facilitate real-time translation of sign language into text or spoken language. By utilizing computer vision and deep learning techniques, the program detects hand gestures and translates them into meaningful messages. This breakthrough technology has the potential to revolutionize communication for the deaf community, fostering inclusivity and understanding in various contexts.

How we built it

Building this ambitious project required a multidisciplinary approach. Our team consisted of computer vision experts, machine learning specialists, and software developers. Leveraging their diverse skills, we embarked on an intense development process.

We started by collecting a comprehensive dataset of sign language gestures, encompassing various gestures and their corresponding meanings. This dataset served as the foundation for training our object detection model. Using deep learning frameworks such as TensorFlow, Keras,  and PyTorch, we developed a custom object detection algorithm capable of accurately recognizing sign language gestures in real-time.

To enhance the user experience, we built an intuitive user interface that enables users to interact with the program seamlessly. The interface displays the translated text or spoken language corresponding to the detected sign language gestures, enabling effective communication between deaf and hearing individuals.

Challenges we ran into

Throughout the development process, we encountered several challenges. Training a robust object detection model required a large and diverse dataset, which was time-consuming to collect and annotate. Fine-tuning the model for optimal performance and accuracy also proved to be a complex task.

We faced computational limitations when deploying the program on edge devices. Optimizing the model to run smoothly on resource-constrained hardware required careful consideration of model architecture, quantization techniques, and efficient memory management.

Additionally, accurately mapping sign language gestures to their corresponding meanings presented its own set of challenges. We worked closely with members of the deaf community, seeking their valuable insights and feedback to refine the translation process.

Accomplishments that we're proud of

Despite the challenges we encountered, we're proud to have developed a functional Sign Language Object Detection Program. Our algorithm achieves impressive accuracy in real-time gesture recognition, enabling effective communication for the deaf community. We successfully integrated the program with low-power edge devices, making it accessible and portable.

Moreover, the collaboration and partnerships we formed with the deaf community throughout the development process are achievements we hold dear. Their feedback and involvement ensured that the program caters to their unique needs and preferences, making it a truly inclusive solution.

What we learned

Creating the Sign Language Object Detection Project was a transformative experience for our team. We gained in-depth knowledge about computer vision, deep learning, and the challenges faced by individuals with hearing impairments.

We learned the importance of empathy and inclusivity in the design process. Involving the end-users and considering their perspectives helped shape the project into a solution that genuinely addresses their needs.

Moreover, we honed our skills in optimizing models for edge devices, overcoming computational constraints, and delivering a smooth user experience in resource-limited settings.

What's next for Sign Language Object Detection Project

The journey does not end here. We are committed to continually improving the Sign Language Object Detection Program and expanding its capabilities. Our roadmap includes:


**Enhancing Gesture


Recognition**: We aim to improve the accuracy and robustness of the gesture recognition model by incorporating advanced machine learning techniques and expanding the dataset.


Support for Multiple Languages: We aspire to extend the program's translation capabilities to support multiple spoken languages, ensuring that it becomes a universal tool for effective communication across different cultures and regions.
Incorporating Natural Language Processing: By integrating natural language processing techniques, we strive to enhance the program's ability to interpret complex sign language sentences and deliver more accurate translations.
Community-driven Development: We will continue collaborating closely with the deaf community, seeking their feedback and insights to guide the evolution of the program. Their involvement remains crucial in ensuring that the Sign Language Object Detection Project addresses their evolving needs effectively.


In conclusion, our journey to create the Sign Language Object Detection Program has been fueled by empathy, innovation, and the desire to empower individuals with hearing impairments. Through our efforts, we hope to break down communication barriers, foster inclusivity, and create a world where everyone can express themselves freely, regardless of their abilities.
","",,Best Beginner Hack,"python, labelimg, machine-learning",Ehsaan,Mohammed,ehsaanismail@gmail.com,,No,UC Davis,"We learned our first code, most of us never even wrote on a text editor before!","","University of California - Davis, Chabot College",3,Sachin,Subramanian,subramanian.sachin3@gmail.com,Karen,Chen,twilly1027@gmail.com,Rachel,Lin,racheljingo1102@gmail.com
Gluchart,45,https://hackdavis2023.devpost.com/submissions/412748-gluchart,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 10:38:32,"Inspiration

Diabetes is a chronic condition that causes problems with the production of insulin, a hormone that our body uses to regulate our sugar levels. With little to no insulin
being produced in the pancreas, patients with diabetes must regulate their glucose levels by directly injecting insulin.

About two months ago, our friend and fellow Aggie, Aidan was diagnosed with Type I diabetes. Since then, he's told us about his struggles in self-administering insulin.
He would inject insulin before a meal, only to find out shortly after that it was an insufficient dosage and have to self-administer again. Worse yet was when he would
overshoot and administer too much insulin, bringing his glucose levels to dangerously low levels that could induce a coma. Often he would have to anxiously sit and wait, hoping that his insulin levels would be back within a safe range after readjusting his dose.

We wanted to create an application that could aid Aidan, fellow Aggies, and anyone adjusting to diabetes by showing their glucose levels ahead of time. Our model would be trained on a user's data, and be able to predict their glucose for a set amount of time. If successful, it would enhance insulin dosing accuracies for patients and help them avoid having to readjust, ultimately improving their quality of life.

How to use

Select Glucose, Meal, or Insulin.

For Meal or Insulin, enter the value you wish you predict/record for in the box. The ""predict"" button will show you the ""what if"" for the input.
ex) ""predict"" for 50 grams of Meal (carbohydrate) will chart out predictions for your blood glucose levels for the next 30 minutes.

For Glucose, Meal, or Insulin values, the ""submit"" button will save the input in the box and remember it for future predictions and predict what your blood glucose levels will look like for the next 30 minutes
ex) If you currently dosed for 5 units of insulin, press the ""submit"" button to make Gluchart remember it in consideration for future predictions.

What we learned & Challenges we faced

Brendan:
At my first hackathon, I've learned so much about frontend and React, along with working on a cross-functional team! One of the biggest challenges was working with UseState and bringing those calls to another component, as it was my first time working with such advanced concepts of React.

Sri:
This hackathon was great, I was able to learn about the full power of React.js and utilizing js libraries to enhance our project. One struggle was definitely pushing and pulling the GitHub repo while working alongside my teammates. In particular, merging files and sorting out the lines of code that needed to stay and be removed was definitely challenging.

Tim:
I had a really fun time working with the machine learning aspects of our project. I had always considered ML/AI projects out of my scope, but now having worked on one I am excited to explore more in the future. Deployment on Azure was simpler than I thought, and the challenges we met along the way were fun to overcome.

Jun:
Both machine learning and node.js framework were topics I was unfamiliar with before. During this hackathon, I learned about how to put a machine learning to work and also got to see full-stack development from end to end. The process led me to read documentation and sometimes it felt like some solutions were a last-resort leap of faith, but our team were able to pull through it all. This hackathon made me more familiar with full-stack development and more comfortable with programming outside of my boundaries.

How we built our project

Gluchart is a full-stack application hosted on Microsoft Azure. The machine learning model was written in Python and trained on Azure. The web app was also hosted on azure, with the front end being written in React and the backend constructed with express.
","https://gluchart.azurewebsites.net, https://github.com/TimStewartJ/gluchart",https://youtu.be/oW6Zqqir_FA,"Best Use of Microsoft Cloud for Your Community, Best Open Data Hack, sponsored by UC Davis DataLab, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Best Healthcare Hack","javascript, react, express.js, node.js, azure, figma, python, scikit-learn, keras, chart.js",Jun Min,Kim,joshjun010202@gmail.com,,Yes,University of California Davis,"Microsoft Azure.
We were able to successfully train our machine learning model and host our webapp on Microsoft Azure.",gluchart.tech,University of California - Davis,3,Brendan,Leung,brendansleung@gmail.com,Tim,Stewart,timstewartj@gmail.com,Sriram,Magesh,srirammagesh2@gmail.com
deMeeter,112,https://hackdavis2023.devpost.com/submissions/412750-demeeter,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 10:42:12,"Inspiration

The United Nations lists 17 Sustainable Development Goals for a better tomorrow. We targeted Goal 12: a call for sustainable consumption and production, and Goal 4, aimed to educate everyone regarding harmful effects of the current system. We felt that this social cause had a surprising lack of support, especially from the tech sector.

The UN states that the 8 level food system causes waste at every level, meaning tons of food is wasted before it even gets to the grocery store. In addition, they list climate change, biodiversity loss, and pollution as side effects of irresponsible consumption/production. Eating farm to table would also lead to a healthier diet and improve nutrition, which are common motifs among the UN’s 17 goals.

We thought, why not eliminate the 6 plus middlemen and buy from farmers themselves? This would reduce food waste at every level, creating a responsible, farm-to-table consumption cycle. 

We definitely thought this idea was feasible. After all, Davis has farmer’s markets twice a week, and Yolo County has many more. We also looked to explore the D2C element of buying produce from farmers as we felt that space had been dominated by artisan brands rather than local ones.

So we came up with deMeeter! 

What it does

deMeeter is a website that allows farmers to connect directly with locals in their area. Farmers can list their fresh produce for sale or say what times they will be attending the farmers market. Consumers can order directly on the website or find out where their closest farmers market will be. They can learn more about the hardworking farmer growing their food and also know when they can go to a farmer’s market where that farmer will be present.

How we built it

We used HTML, CSS, and Javascript to develop the front end of the application and MongoDB as our datastore on the backend. We used NodeJS and ExpressJS toWe accessed the Google Maps API to show users events that are local to them. 

Challenges we ran into

We ran into issues storing data and had to spend a good amount of time learning how to implement Mongo-DB. We also tried to implement Azure but struggled to find a balance between simplicity of use and affordability for this project. 

Accomplishments that we're proud of


Creating a full stack Web App that, with a little refining, can be used to help sustainability. 
Learning how to work with several interesting technologies along the way


What we learned

We learned how to implement Mongo-DB on the backend. We also learned how to access and work with the Google Maps API as well as many of the other technologies mentioned above.

What's next for deMeeter

We are currently building a more complete backend and want to get to the point where farmers are able to add their own products. 
",https://github.com/vikramchoudhry2/demeeter,,"Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Most Creative Hack","mongodb, javascript, css, html, node.js",Amar,Singh,awsingh@ucdavis.edu,,Yes,"University of California, Davis",We really liked using Mongo-DB as it provided a simple way to store information.,deMeeter.tech,University of California - Davis,2,Yash,Deshmukh,yashdesh6@gmail.com,Vikram,Choudhry,vchoudhry@ucdavis.edu
AggieVote,14,https://hackdavis2023.devpost.com/submissions/412752-aggievote,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 10:46:17,"Inspiration

We realized not many students take part in the voting for the ASUCD elections. Voting is extremely important as we live in a democratically run government, and if we want society to change for the better, then we have to vote. We decided to focus on the UCD community since very few students are aware of their ability to vote at this school. Due to this, we wanted to design an app as a way to increase voter turnout. 

What it does

Our app allows UC Davis students to find out more about candidates who are running, what measures are being voted on, and statistics from previous years. Additionally, our app is not just informational, but also interactive! Students are able to ask questions to candidates about measures, about the candidates themselves, and choose which topics are of interest to them. It is also supposed to give notifications to the user on deadlines for voting and if their message was answered if the user sent one to a candidate. 

How we built it

We built this using Figma and Python (Colab). We got our data set from a website made by a UC Davis alumnus who worked with ASUCD and collected data on past election turnout. 

Challenges we ran into

We had to learn how to use Matplotlib in making the graph, and it was difficult to find reliable data online. From the design aspect, there were challenges in planning out the user flow. We had two data science majors and two design majors on our team, and all of us are beginners. Because of this, we were not able to create the app yet, only the prototype, since we are still in the process of learning how to do so.

Accomplishments that we're proud of

We are proud of our first hackathon app design and our concept that makes an impact on our UC Davis community. We're also proud that we were able to utilize our members' design and data science skills to create a cohesive project.

What we learned

We learned about different features in Figma as well as how to create graphs using Matplotlib. We also learned the basics of HTML and CSS through the workshop that was held, so we can start the process of coding the app.

What's next for AggieVote!

Our next steps are coding our app in JavaScript and HTML/CSS. In addition, we can implement more features such as polls to see other students’ opinions.
",https://www.figma.com/proto/MmI5N0Q5EN9ubvcLtA2e7p/AggieVote?type=design&node-id=64-4124&scaling=scale-down&page-id=10%3A2&starting-point-node-id=64%3A4086,https://youtu.be/3pmB1jkm4wE,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Design, Most Creative Hack","python, figma",Maya,Nordin,mnordin@ucdavis.edu,,Yes,University of California Davis,We attended the HTML/CSS workshop and we found it very helpful as an introduction and are excited to learn more on our own. We also went to Intro to figma workshop and best design practices which were also super helpful.,"",University of California - Davis,3,Meenakshi,Iyer,meeiyer@ucdavis.edu,Alexandra,Litinskiy,amlitinskiy@ucdavis.edu,Jess,Fong,jessicajeanfong@gmail.com
MindTrack,17,https://hackdavis2023.devpost.com/submissions/412753-mindtrack,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 10:47:55,"Inspiration

Our team sought to develop an innovation aimed at alleviating the stress experienced by college students and enhancing their information retention capabilities. This venture was spurred on by a series of discussions I (Vraj) had with medical students at UC Davis Medical School and other institutions, who expressed a shared frustration: despite investing over six hours daily into their studies, they struggled to retain the information. This suggested a pervasive issue of diminishing focus over time, a problem potentially linked to a myriad of factors including sleep deprivation, which could lead to diminished concentration, delayed reaction times, and a reduced attention span. Other potential obstacles include an abundance of distractions within the study environment, detracting attention away from study materials.

To address this, we engineered a classifier that incorporates an OpenBCI Cyton board and an Arduino system, designed to send an audio signal to alert the user when their focus is waning. As we delved further into the development process, it became clear that this was not the endpoint, but rather a starting point. During our hardware testing, we discovered the potential of utilizing focus as a functional input for various applications.

Due to time constraints, we could only demonstrate this concept through the operation of a single motor as a functional representation. However, we firmly believed that if one motor could function in this capacity, so could multiple motors. This belief formed the foundation of our additional concept: a drone controlled through focus, alongside other elements like a gyroscope.

What it does

The OpenBCI Cyton board sends the signal to a program that we built using Python. The program has high-pass and low-pass filters to remove excess noise from the signal it gets, it then sorts the data value from each thread and uses an algorithm to calculate a singular value of frequency it works with. The frequency can be used to classify different states of the user's brain. This classifier then sends commands directly to the Arduino, which triggers the Arduino code to run. This all happens live-time. 

How we built it

We used Virtual Studio Code to program a Python classifier, the code has a library that communicates with the OpenBCI Cyton board, translates the information into numerical values, and sends the code to Arduino. The string output that Arduino receives then responds to it depending on what it is. The Arduino code has 2 possible outcomes, whether a user is focused or unfocused. The Arduino is connected to two breadboards, one of them has an LCD screen and an active buzzer that vibrates and displays when the user is not focused. We added a delay in the code of about 110ms so there is a buffer period for the user to get back in focus after a brief interaction that might signal them unfocused. 
References: 
link
link
link
link
link
link
link
link

Challenges we ran into

Hardware mostly, it was hard to connect Arduino to two different breadboards that connect and run simultaneously. We ended up spending the whole night on it and just bypassing the ground plug-in issue by inserting two leads in the same place on the breadboard. 

Accomplishments that we're proud of

It works, the program and classifier are just perfect when it comes to analyzing focus vs un-focus. Incorporation of different material last minute, which was unplanned but that functioned as expected too. 

What we learned

How to deal with issues in Python, Arduino, and hardware connection with Arduino. How to better prepare for Hack-a-thons since it was our first one ever.

What's next for MindTrack

Incorporation of the drone idea. We will also look at other applications of using focus as an input where it can advance medicine. Our focus would be on combining the knowledge of neuroscience and engineering. 
",https://github.com/DrNerdyMedula/2-ish/blob/main/README.md,,"Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hardware Hack, sponsored by the UC Davis Student Startup Center, Best Healthcare Hack, Most Creative Hack","python, arduino, openbci, visual-studio",Jayanth Naga Sa,Pasupulati,jaypas@ucdavis.edu,,Yes,"University of California, Davis",We interacted with the integration of open BCI that interacts with Arduino effectively. Uploaded data to GitHub,"",University of California - Davis,3,Vraj,Thakkar,vrthakkar@ucdavis.edu,JordanOgbuFelix,,jogbufelix@ucdavis.edu,Jaynor,Singson,jasingson@ucdavis.edu
CrossWalk,,"",Draft,Pending,Additional info,05/21/2023 10:50:59,"Inspiration

As it is today, most major social media platforms are used to see how many followers you can get, or how much monetization you can get from a sponsored ad. With the era of covid, many turned to these apps to feel a sense of connection in a world that was disconnected. Most of us today don't know who our neighbors are, let alone half of who our ""followers"" are.
Our app CrossWalk aims to do one thing - bring back social media's intended purpose, which is to truly connect us to those around us. 

What it does

When two people who have CrossWalk installed on their phone walk past each other, each person receives a ""pass point"" for the other. The more times you walk past each other, the more your ""pass points"" for that person goes up. 
As soon as you make that initial pass, that person's profile, and their posts from the past 24 hours shows up on your feed. You now have a curated feed of daily updates from those in your vicinity, and people you pass by, often without knowing. If you see someone post something you like, or recognize, you can DM them and/or add them as a friend! 
CrossWalk lets you meet neighbors you've never spoken to before, or those students in your class you were too afraid to go up to. It brings social media into your real life, and allows you to find those missed connections around you.

How we built it

We built CrossWalk using FIGMA and SwiftUI, 

Challenges we ran into

For both of us, this was our first true hackathon, where we sat down and attempted to make a project in 24 hours. To add to that, this was our first time trying to build a mobile app. While not completely new, everything was a learning process -- we truly learned a lot over the last 24 hours. 
Using bluetooth, building a functional design on FIGMA, using Swift, the list goes on. 

What's next for CrossWalk

Longterm, we plan to work on the app until it's completion and launch it on the appstore. 
","https://www.figma.com/proto/pRqT7PEfcF6ZAa9FpCZyCT/crosswalk?page-id=14%3A596&type=design&node-id=47-1466&viewport=503%2C406%2C0.52&scaling=min-zoom&starting-point-node-id=14%3A597, https://github.com/jucobee/Crosswalk",,"Best Beginner Hack, Best Design, Most Creative Hack","swiftui, swift, figma",Aparna,Karthik,aparnak224@gmail.com,,Yes,UC Davis,Our main used technologies are Figma and XCODE.,"",University of California - Davis,1,jucobee,Dominick,jucobee@gmail.com
RareRecipify,114,https://hackdavis2023.devpost.com/submissions/412762-rarerecipify,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 11:19:17,"Inspiration

Do you have a rare, expensive, ingredient that just sits in your pantry for months? You only used it for one recipe, and afterwards it felt like such a waste. 

Rare Recipify is here to help! 

With the ease of pasting your recipe URL, we will help you find more recipes, so you can enjoy good food and keep your pantry fresh. 

What it does

To enjoy the application, follow these simple steps:

🔗 Find a URL that holds your latest recipe!
🔎 Paste the URL into the search bar of our web application
🥬 (Optional) If you have dietary restrictions, select them now
🥘 Enjoy a list of tasty new recipes that share similar uncommon ingredients

How we built it

Rare Recipify uses Flask to support the backend, HTML templates and Flask for the front end, and NLP-python to clean text. 

The backend was built by taking the recipe and scraping for the text that contains the ingredients. Next, we used NLP- python to clean text, looking for solely the  name of edible foods. Finally, we take these ingredients and the user inputted health query, to find other similar recipes. We return these recipes name, url, and ingredients in JSON format. 

The front end takes the JSON data, and formats it into a more visually pleasing manner. The recipe name is big and bold, ingredients are listed in perfect bullet points, and a green button to explore the URL of the recipe. We used HTML templates (Jinja), focusing on a pastel theme. 

Challenges we ran into

At first, we struggled to do our styling with HTML templates and CSS files, but due to loading issues, we switched to using HTML templates with integrated files. 

Next, the format of the websites we were scraping were inconsistent. We fixed this by using NLP to clean and sort ingredients. Due to many dependency and loading issues with NLP, returning the results is often very slow. 

Finally, we struggled with dependency issues on our virtual environment. We fixed this by restarting the environment and redownloading all dependencies. 

Accomplishments that we're proud of

The accomplishments that we are proud of including NLP texting cleaning, web scraping, and using scraped ingredients to find more recipes. 

We are proud of using NLP to find other similar uncommon ingredients, and using those to find more ingredients. We have clean, well styled code, that communicates with the web efficiency. 

What we learned

We learned many skills, both technically and personally. Technically, we learned a new tech stack, new API calls, and new design templates. Additionally, we learned how to integrate NLP into a fun web app. Personally, we learned how to work as a team, and how to network with other teams. 

Finally, the workshops taught us new concepts, Professor Rogaway taught a Radical CS class, which taught us a lot about power in the technology field. 

What's next for RareRecipify

We would like to ensure it works with all recipe website, and strength our NLP analysis. Cheers to the next!
",https://github.com/ainekeenan/hackdavis23,,"Most Creative Use of GitHub, Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Most Creative Hack","python, flask, json, html, css, spacy, requests, beautiful-soup, numpy, pandas, edamam-nutrition",Reina,Itakura,ritakura@ucdavis.edu,,Yes,"University of California, Davis","VS Code, GitHub, Git, Flask, Python, JSON","",University of California - Davis,2,Nivita,Reddy,nivreddy@ucdavis.edu,Aine,Keenan,ackeenan@ucdavis.edu
Horse Catcher,76,https://hackdavis2023.devpost.com/submissions/412764-horse-catcher,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 11:20:31,"Inspiration

We got inspired to take on this project after talking to the people at the American Wild Horse Campaign. AWHC's goal is to create an AI model that identifies wild horses just by a picture of the horse. For this, they required mass amounts of data. AWHC's plan is to utilize community gathered data.

What it does

Our product is a community based app that allows users to submit images of horses to contribute to AWHC's mission in a gamified manner. The core feature of the app is data collection. Users are able to enter details about the Horse such as breed, color, physical markings like spots as well as meta-data like geolocation. Users then take photos of the horse at three angles (required to train the model) and upload their results to a cloud storage bucket. This data is sorted and verified to ensure validity. We ensure that the image was not altered and that the horse is clearly visible through the use of different image classification models publicly available. The data is sorted and stored in Google Cloud Firestore, which makes further data processing simpler.

In order to engage with the community further, we have gamified collecting data. Users receive points for contributing valid images, and are then ranked locally amongst other users. This would motivate users to keep contributing. We also added a way to easily share the photos you have contributed to other social media to entice other potential users to join.

How we built it

We utilized Flutter when building our app. Using Flutter allows us to target many platforms like Android, iOS, and web at once, furthering the possible reach of our app. We also used Firebase to handle most back end tasks such as user management, data management, and storage. We also wrote a custom back end using Flask and Azure to handle things such as image validity. 

Challenges we ran into

It was our first time using Azure and a custom backend, and we ran into lots of issues with deployment and debugging.

Accomplishments that we're proud of

We are proud of being able to implement a (crude) fully fleshed out product that works across the whole stack.

What we learned

Through the process of building our solution, we learned about app development, UI/UX design, and how to implement and deploy a back end. 

What's next for Horse Catcher

We want to improve our custom back end. Right now, it is Flask based which is not as performant as we wished. Optimizing some of that code or switching to a different framework might resolve that issue. We would also like to use more sophisticated ML models for detecting invalid images. We used off-the-shelf models for this prototype, but we believe investing in a custom build model could be beneficial. 
",https://github.com/TerryTong-Git/HackDavis,,"Best Use of Microsoft Cloud for Your Community, Best Beginner Hack, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Best American Wild Horse Campaign (AWHC) Hack","flutter, dart, python, flask, azure, firebase",Akshat,Adsule,akshat.adsule@gmail.com,,Yes,UC Davis,"We used Azure, and it was smooth.","","University of California - Davis, UC Davis",1,TerryTong-Git,Tong,dooshtheboss1@gmail.com
Learning E-Waste,95,https://hackdavis2023.devpost.com/submissions/412766-learning-e-waste,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 11:26:36,"Inspiration

E-waste (electronic waste) is a growing problem in our world today. Every year, we generate about 50 million tons of waste, which is equal to throwing a thousand laptions per second. If not disposed of properly, toxic wastes from E-waste such as lead, furans, PCB, and dioxins can get into our environment and cause health issues. Some health effects from electronic waste are birth defects, impaired nervous systems, and damaged internal organs. Our goal with this project is to educate people about e-waste and how to dispose of common electronics we use on the daily properly. 

What it does

This is a friendly, interactive game that aims to teach players about safe and responsible ways to reduce and recycle e-waste. Players can click through the game to learn about the common process for recycling everyday electronics, and test their newfound knowledge at the end with a fun quiz. 

How we built it

We built our game using unity game engine and we mainly focused on using the text mesh pro UI package within unity to do the majority of the game. We also built some custom scripts to control the states, and used VS code and C#. Graphics were designed by hand using Procreate, in order to give a friendly, DIY feel to communicate that it doesn’t take something special or flashy to make a difference in the world.  Image resizing was done using gim. 

Challenges we ran into

One challenge was scaling images to have a consistent aspect ratio; we couldn’t really do that due to limitations of the text mesh pro canvas. We were also lacking knowledge on some aspects of unity that we needed; since it’s such a complex engine it’s hard to be familiar with all of its functions. In the end, we were unable to complete a major aspect of the game, the quiz, due to time constraints and technical difficulties. 

Accomplishments that we're proud of

We’re all beginner hackers (two of us are completely new to programming), so we’re proud that we were able to produce an interactive game in such a short time frame. We accomplished a lot, from research, programming, to producing all of our own assets. 

What we learned

It was interesting to work with a lot more UI elements in Unity. Another insight was how to work with a new team in such a short time frame. The workshops were also very interesting; we learned about manipulating Chat GPT using current time data, and how to get started designing user interfaces with Figma. 

What's next for Recycle E-Waste

In the future, we hope to be able to finish the quiz portion of our game so that we can provide a more interactive and educational experience for the user. 
",https://github.com/ConanoftheUnreal/HackDavis2023-EWaste,,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","unity, procreate, powerpoint",Conar,Abramson-Davis,conar.lp@gmail.com,,No,UC Davis,.,"",University of California - Davis,3,Erin,Park,eripark@ucdavis.edu,Samantha,Tran,sbhtran@ucdavis.edu,Bradly,Booth,btbooth@ucdavis.edu
InterConnect,25,https://hackdavis2023.devpost.com/submissions/412768-interconnect,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 11:30:22,"Inspiration

Throughout our first three quarters at UC Davis, we noticed that there is an influx of international students. We also observed that there is a lack of connection between the international and domestic students. This gap arises due to various reasons such as cultural differences, language barriers, and limited opportunities for interaction. Despite being part of the same university community, these students often find it challenging to bridge these gaps and establish meaningful connections. In order to bridge the gap between international and domestic students at Davis, we’ve developed the platform InterConnect, which enables both domestic and international students to seamlessly connect with each other through a text messaging app.

What it does

When. users first registers, they are asked to input information about themselves, including their age, school year, the language they know, etc. From there, the user can jump into the filtered search.
The filtered search allows users to find people they want to talk to based on a multitude of factors, such as age, language, and gender, as well as searching by name. After finding some people that they think are interesting or similar to them, they can then jump into the chat feature.
The second part of the app is a private messaging feature, where users can talk to one another and figure out the best way to help each other. The purpose of this is to have students organize meetups and build connections that they normally wouldn't have the chance to make. 
Through this process, we hope to see many more people interacting with communities different from their own.

How we built it

To build the basis for our messaging system, we utilized this github code. We then built off of this basis and this github code for a static search to create a responsive search page based on the user information in our Firebase database and the filters that the user uses. 

Challenges we ran into

The biggest challenge we faced was implementing the backend for the database. Retrieving and sending data without causing errors was quite tough, as we had to wait for the components to be mounted before doing any API calls.
Another big challenge we faced was connecting the two sections of our project together, because we developed each part of the project separately, so the code for each is quite different. We definitely learned that we should communicate more about our sections and plan better so that our pathing meshes together well.

Accomplishments that we're proud of

The main accomplishment we are proud of is creating an app that actively interacts with the backend and one that can help our fellow students expand their horizons. 

What we learned

We learned a lot about web development, especially about React and using databases to improve the app.

What's next for InterConnect

In the future, we hope to improve the integration between the chat and search features in the app, so that the transition is much smoother for the user. We also hope to implement a better screening process for users, such as restricting emails to just UC Davis emails, so that malicious strangers cannot make random accounts to mess with students.
",https://github.com/KiranJoji/InterConnect,,"Best Domain Name from Domain.com, Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Most Creative Hack","react, firebase, firestore, html5, css, javascript",Kiran,J.,kiranvjoji@gmail.com,,Yes,UC Davis,"GitHub: With the new VSCode update, it has become even more annoying to push updates to GitHub.
Firebase: This was a really nice and beginner friendly database.",roomsync.tech,University of California - Davis,2,Timothy,Shen,timshen@ucdavis.edu,Nathan,Bao,nathanbao@gmail.com
Moo-dify,107,https://hackdavis2023.devpost.com/submissions/412769-moo-dify,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 11:30:25,"Inspiration

help students not stress after exams

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

some aspects of full-stack development

What's next for Moo-dify
","https://github.com/Douglasyu02/Moo-dify, https://www.figma.com/file/zPl1QIqkTEEuy9ODMyg07C/Davis-Hackathon-2023?type=whiteboard&node-id=0%3A1&t=JmzCbomzKW7Bjh78-1",,"","php, html, css, javascript, json",Douglasmyu,Yu,douglasmyu@csu.fullerton.edu,,No,"UC Davis, Cal State Fullerton",We used figma and fig jam for ui/ux design and framework.  We used GitHub for our group repository and google sheets for our scrum meeting.,"","California State University - Fullerton, University of California - Davis",2,Samantha,Zhang,smwzhang@ucdavis.edu,Jonathan,Ngo,jonngo@ucdavis.edu
CareerSample,11,https://hackdavis2023.devpost.com/submissions/412770-careersample,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 11:33:22,"Inspiration

We believe that choosing a career is one of the most important steps in life. We realize that the current main option is for someone to complete a short quiz and receive a broad handful of career possibilities but this often leaves the user with more questions than answers. The main issue is that there is no way of knowing what exactly you do in these careers. That's why we created CareerSample. Not only does it help pinpoint potential career options, it also provides users with interactive career demos.

What it does

Start by engaging with the AI chatbot, which asks you targeted questions to help narrow down your potential career choices. Then, visit the 'career' page and find/explore the careers that interest you. Select any career to begin interactive career exercises that provide a glimpse into a potential future. Learn basics about the career, answer questions, and apply your own skills based on your learnings. Helps users gain valuable insights and hands-on experiences that leaves out the 'guessing' when trying to choose a career. 

How we built it

Brainstormed and designed in Google Docs. 
Used HTML, React, JavaScript, and CSS to build the website. 
Used Figma to design the website. 

Challenges we ran into

Implementing some of the design factors like the interactable portions of the website. 

Accomplishments that we're proud of

Implementation of Open AI's chat bot (Chat GPT) in order to narrow down potential career options for the user. 
Interactable exercises such as programming snippets embedded within the website for the software engineer career page and a user editable 'fake' website for the UI/UX career page. 

What we learned

Use virtual machines and less authentication for hackathon projects since it's hard to deploy

What's next for Career Sample


Adding more career options
Incorporating user tracking information (Google Analytics) 
Create mobile-friendly design

",http://career-sample.netlify.app,,"Best Beginner Hack, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","react, javascript, html, figma, google-docs, github, css, mongodb, express.js, gcp",Maxim,Saschin,mnsaschin@ucdavis.edu,,Yes,UC Davis,netlify - difficult to use with fly.io backend,"",University of California - Davis,2,Linden,Wang,linwan@ucdavis.edu,Ayush,Lenka,alenka@ucdavis.edu
ARTEMIS Aggie Reuse TEch Management of Inventory System,48,https://hackdavis2023.devpost.com/submissions/412771-artemis-aggie-reuse-tech-management-of-inventory-system,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 11:34:30,"Inspiration

The Aggie Reuse Store is a non-profit organization dedicated to fostering financial savings for individuals while actively mitigating clothing waste by diverting it from landfills. We thought that was a great idea and wanted help support them by upgrading their inventory tracking system.

What it does

ARTEMIS provides an interface to log students in by their student ID as well as a user-friendly interface to track donations and sales of items. It's been optimized for use on an iPad or similar table, with a simple card reader to swipe UC Davis IDs.

How we built it

The front-end is a React app that sends the entered data to our Node.js instance that is running on GCP. Node.js then utilizes PRISMA to create an entry to CockroachDB.

We are able to collect demographic data on user by utilizing the UC Davis identity store API

We only need an API key to complete this, which can be easily acquired when it's not a weekend.

Additionally, our Node.js server is able to track total user interactions with the store by means of an IR breakaway sensor that can be placed at the entrance to the store.

Challenges we ran into

We had a few challenges on our backend side. CORs kept us from submitting some of our requests, and with our backend group member feeling unwell on the second day, we weren't able to fix that. However, all other API methods work, and the inventory management system as a whole functions perfectly.

Accomplishments that we're proud of

We are very proud of the way our React app turned out. It was emphasized that the user-interface had to be user-friendly and streamlined, and we think that we had accomplished that. We are also proud of how we store the data as the data analytics team can access CockroachDB and query it using SQL.

What we learned

We learned a lot about React and MUI. Additionally, we learned a lot about integrating several different components of a project at the same time, and the challenges that come along with parallel development.

What's next for ARTEMIS Aggie Reuse TEch Management of Inventory System

The next step for ARTEMIS could be to schedule certain queries, that the data analytics team is interested in, to run every so often and create a dashboard to display that data. The data is already there and ready to be read, it's just up to someone to build a simple dashboard.
","https://www.artemisatdavis.tech, https://github.com/IonImpulse/ARTEMIS-HackDavis-2023",,"Best Domain Name from Domain.com, Most Creative Hack, Best Aggie Reuse Store Hack","react, mui, sql, prisma, cockroach, javascript, html, css, node.js, gcp",Ethan,Vazquez,edv121@outlook.com,,No,"Harvey Mudd College, University of Waterloo, Iowa State","We used github, gcp, and cockroach. They were all pretty good, and we were able to get everything done",http://artemisatdavis.tech/,"Harvey Mudd College, University of Waterloo",1,michaelcod,Cao,michaelcao61@hotmail.com
SignSense,65,https://hackdavis2023.devpost.com/submissions/412772-signsense,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 11:37:34,"Inspiration

We wanted to create a game that challenges players' 5 senses and it's importance in our daily lives. However, it also challenges the human's capability to adapt to situations while losing the sense of hearing. This challenges us as a group to find other ways to communicate such as ASL and visual awareness increases. Although, in a video game, the situations aren't very realistic but it keeps the human mind on their toes. By using motion sensors and Unity game engine's basic tool kit, we allowed players to access the ASL community by signing key words to execute game play commands as well as circumventing the language barrier between ASL and Non-ASL users. 

What it does

The project accepts motions and signed words in front of the camera, interpreting it using our own data set, and performing a specific action related to that sign. The program executes the game action and displays what word or key words were signed by the user. Leap Motion Camera detects the motion and corrects the user to the correct signed motion. 

How we built it

Unity game engine to make the environment and using the leap motion camera to receive motion 
control input from players. 

Challenges we ran into

Learning how to use Unity game engine and incorporating leap motion camera technology and utilizing its libraries and example assets.  

Accomplishments that we're proud of

Navigating through unity, creating our own data set of gestures and hand poses, and making our own scrips in C++.

What we learned

How to use the different assets of a game in unity, creating our own assets and the scripts for them. How to include addon for Unity which was the Leap Motion Camera toolkit.

What's next for SignSense

We are eager to improve the data set and its organization to increase the amount of words and commands to the game. Improving the physic interactions with the player and it's environment. Researching the Camera hardware and its tool kit to improve the user input. Adding customizable characters and abilities to increase capability to learn Signed Language.  
",https://github.com/Mon-Rico/HackDavis-2023--Game--Project,,"Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Most Creative Hack","c#, c++, unity, leap-motion, motion-sensor",Monica,Rico-Antonio,ricomonica1108@gmail.com,,Yes,Chabot College,"Leap Motion Camera was unique to navigate for beginners, but it's software has limitations. Unity Engine has a lot of resources that are compatible which leaves a lot of room for experimenting with trial and error. Edge Impulse was touch on briefly and it's beginner user friendly which gave our group ideas for potential use of an API in a game.","","Chabot College, Chabot",3,zaydgta,,zaydgta@gmail.com,Osasusanoo,Ogbeide,ogbeide301@gmail.com,DeFriender,,gonzalesalejandroams@gmail.com
CardifyPro,109,https://hackdavis2023.devpost.com/submissions/412775-cardifypro,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 11:47:37,"Inspiration

At Cardify Pro, our inspiration stemmed from a common challenge faced by students across various disciplines – the need for an efficient and streamlined method to convert lecture slide PDFs and hand writtten and typed notes into personalized study flashcards in a secure location. We recognized the importance of empowering students to take control of their own learning journey and wanted to provide a comprehensive solution beyond Quizlet with its lack of security.

What it does


Upload your notes: Easily import your notes into the web app. Whether you have handwritten notes, PDFs, or raw text, the app accepts various file formats.
Choose the number of flashcards: Specify the desired number of flashcards you want to generate. This allows you to customize the flashcard set according to your study goals and time constraints.
3.Generate flashcards: With a click of a button, the web app generates flashcards based on your uploaded notes. Each flashcard represents a key concept or piece of information from your notes.
4.Regenerate if needed: If you're not satisfied with the initial set of flashcards, simply regenerate them with another click. The web app recalibrates and generates a new set based on the same input.


How we built it

Backend: For the backend development, we leveraged the power of Python, a versatile and widely adopted programming language. Python allowed us to efficiently handle data processing and integration with external APIs. In particular, we utilized the CHATGPT 3.5 API, which enabled us to harness the advanced language generation capabilities of OpenAI's GPT model. This integration empowered our app to generate high-quality flashcards from the provided notes.

Frontend: The frontend of our web app was built using HTML, CSS, Next.js, and React.js. HTML provided the structure and markup of the user interface, while CSS enhanced the visual styling and layout. Next.js, a popular React framework, allowed us to develop a fast and dynamic frontend experience with server-side rendering and easy routing. React.js, a powerful JavaScript library, facilitated the creation of interactive components and seamless user interactions.

Challenges we ran into

We encountered challenges during development, particularly in scaling due to limitations with the token system of the CHATGPT API and constraints on funds. 

Additionally, finding a suitable database hosting solution proved challenging as the free versions couldn't support the data volume we needed. We overcame these hurdles through resource optimization and careful evaluation of database hosting options.

Accomplishments that we're proud of

First and foremost, we successfully integrated the CHATGPT API with the front end, allowing seamless communication between the user interface and the powerful language model. We were able to send requests to the API and parse its outputs into JSON format, enabling efficient processing and manipulation of the generated flashcards.

Another significant achievement is the development of a sleek and visually appealing user interface. Leveraging the capabilities of React.js and CSS, we crafted an aesthetically pleasing design that enhances the user experience. The intuitive layout and carefully chosen visual elements contribute to a seamless and engaging interaction with our web app.

What we learned

One key lesson we learned was the challenges associated with scaling models that require API calls. We discovered that managing and optimizing API requests is crucial to ensure efficient usage and minimize resource limitations.

Another valuable lesson involved handling file input and output operations. We gained insights into parsing various file formats such as PDFs, DOCX, and JPEG. Additionally, we explored Optical Character Recognition (OCR) techniques to extract text from images, expanding the capabilities of our web app to handle diverse sources of input data.

On the front end, integrating React.js with the API taught us valuable lessons in creating dynamic and responsive user interfaces. We gained a deeper understanding of how to leverage React.js components to interact with API endpoints effectively. This integration allowed us to provide seamless interactions between the user interface and the backend functionality.

What's next for CardifyPro

We hope to broaden the capabilities of CardifyPro by extending its reading capabilities. When the API for CHATGPT 4 is released to the public, we hope to integrate it with audio files such as MP3 as well so one can seamlessly convert lecture audio into flashcards to study.
","",,"Most Creative Use of GitHub, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","python, next.js, react.js, chatgpt",Iman,Morshed,iymorshed@ucdavis.edu,,Yes,UC davis,"CHATGPT API, Next.JS, Express, Python3,","",University of California - Davis,3,Raiyan,Ahmed,rsahmed@ucdavis.edu,Iftekhar,Munrat,iamunrat@ucdavis.edu,Youssef,Qteishat,youssef.qt1@gmail.com
Aggie Reuse Radar,83,https://hackdavis2023.devpost.com/submissions/412776-aggie-reuse-radar,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 11:47:57,"Inspiration

Because the Aggie Reuse Store has been receiving more clothing items every quarter and their current way of recording data is by manually entering numbers into a spreadsheet is very tedious for the volunteers, we wanted to help increase the efficiency and reduce human error. 

What it does

We created a streamlined interface and an organized database system to meet the Aggie Reuse Store's need for an inventory tracking system. Student's working at the store can use this to keep track of their inventory, see top products at their store, compare data analytics by day, week, month, and year, and also see how much pounds of waste was diverted.

How we built it

Our design process was split into three parts. We first created had an initial designing phase where we brainstormed ideas and sketched wireframes. After coming to a consensus on the designs we were going to implement, we went on to create lo-fi/mid-fi designs on Figma. Our lo-fi designs were built upon the wireframes by adding more visual details and context to better represent the project's user interface (UI) and interactions. Visually, we added basic colors and fonts so we would have a general idea for our final design. Finally, for hi-fi designs, we polished and refined our lofi’s and finalized our design system and interactive elements. After finishing up hi-fi’s we handed the designs to the developers to provide them with clear visual specifications and assets for implementation. On the development side, as the designers were working on the visual aspects of the project, we built a full-stack website using React, Express, Node, and MongoDB. We used Replit to host and run our frontend and backend separately. 

Challenges we ran into

On the design side, it was challenging to come up with the features we wanted to have on our home page and choose the best way to visually design the different features in a coherent yet visually appealing way. For the inventory page, it was hard to design how to place the information especially when there is only two information needed. On the development side, we encountered challenges in implementing the UI components, and building an entire web design in under a short period of time.

Accomplishments that we're proud of

We were proud of coming up with a with a unique and innovative solution to upgrade the current inventory tracking system. For designs, we were able to create an intuitive, streamlined, and user-friendly interface that enhances the overall user experience. For development, we're proud of how the inventory table turned out, it looks really clean.

What we learned

For some of the members, it was our first time working in an interdisciplinary team so working cross functionally was a good learning experience.

What's next for Aggie Reuse Radar

We plan on:


Making it possible for users to also write/change the data using their keyboards.
Fixing up the UI such that it reflects the design better & user testing.
Fleshing out the data on the dashboard to reflect what the client wants.
Make the webpage responsive.

","https://aggiereuse-frontend.robertau.repl.co, https://replit.com/@RobertAu/aggiereuse-backend, https://replit.com/@RobertAu/aggiereuse-frontend, https://aggiereuse-backend.robertau.repl.co",,"Best Use of MongoDB Atlas, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Design, Best Aggie Reuse Store Hack","javascript, figma, react, node.js, express.js, mongodb, replit",Robert,Au,rbtau@ucdavis.edu,,Yes,"University of California, Davis",it was ok,"",University of California - Davis,3,Jessica,Chu,jfchu@ucdavis.edu,Jaime,Jeong,jmjeong@ucdavis.edu,Winnie,Sich,wnniesich@gmail.com
Aggie Inventory System,79,https://hackdavis2023.devpost.com/submissions/412780-aggie-inventory-system,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 11:53:29,"Inspiration

We took inspiration from our own school CSU Stanislaus that has a similar type of businesses but with food. This business is able to keep track of inventory and people coming in to the store. We thought that it might be nice that they could get the essentials that a business deserves. 

What it does

Our application keeps track of inventory; when items were brought in, which items, how many items, and when items were removed. Our application also tracks foot traffic in the store so managers can preemptively schedule employees to manage rush hour. 

How we built it

We used PYQT for the user interface, Python for the backend, and MongoDB for the backend. We used libraries like QR_Code, os, system, cv2, time, Django, and csv. We used git repository to allow us to work together. 

Challenges we ran into

Our hardest part about this project was by far git. Our group had some newer folks that haven't used git so we got to learn together. We also had to learn how to integrate MongoDB with our python program. 

Accomplishments that we're proud of

Successfully integrated MongoDB into our program as well as succeeded in what we set out to do. 

What we learned

How to utilize GitHub for collaborative coding and learning all the tricks and workarounds to get on the same page in GitHub. How to utilize the pymongoDB framework. 

What's next for Aggie Inventory System

We thought locating places near Davis that are willing to give free clothes or items away and alert the business about them so that the Aggie Reuse store has more inventory to give. 
",https://github.com/ChristianAlameda/Tutoring/,,"Best Use of MongoDB Atlas, Best Beginner Hack, Most Creative Hack, Best Aggie Reuse Store Hack","python, mongodb, qt, django, camera-plus, qr4-qr-code, json",Christian Daniel,Alameda,jazzbilbo@gmail.com,,Yes,"California State University Stanislaus, University of California Davis, California State University East Bay",GitHub was a new experience for a lot of us. MongoDB Atlas was very easy to work with. PyQT5 was a new experience for us that worked out for us.,"","California State University - Stanislaus, California State University - East Bay, University of California - Davis",3,faveingpear,Pearson,mpearsonpear@protonmail.com,Arjun,Kumar,arjunkumariyer@gmail.com,Dev,Rathod,devmanojrathod@gmail.com
Clarity,81,https://hackdavis2023.devpost.com/submissions/412782-clarity,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:02:39,"Inspiration: The ARC Gym at UC Davis

What it does: Our app has the ability to track live crowd maps of the gyms to let users know what are the peak hours or if the busy is empty. We did this through making a QR Scanner Feature that tracks logins and updates the busy meter in relevant time.

How we built it: Flutter, Back4App, Figma

First time full-stack developing; dimensional overflow; backend server set up issues and difficulties; learning interactive user flow

Accomplishments we're proud of: Learning full-stack for the first time and completing an App with an interactive screen and developed back-end. Coordinating as a team and working on a project for a hackathon for the first time.

What we learned: The difficulties of full-stack such as server set up, object creation,  cloud functions, live queries, making a comprehensive user experience design,  error prevention, user research, and proper front-end formatting.

What's next for Clarity: Community features, better error prevention, expanding app features, aesthetically pleasing UI, and stronger database set-up for user login and signup.
",https://github.com/wgvuong/clarity/tree/main,https://www.youtube.com/watch?v=T3P6K3e3eXM,"Best Domain Name from Domain.com, Best Beginner Hack, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack, Best Aggie Reuse Store Hack","flutter, back4app, figma, javascript",William,Vuong,wgvuong@ucdavis.edu,,Yes,University of California - Davis,"We got to talk a bit with MLH booth, and we had a very pleasant experience getting to know more about what they offered in terms of internships and their goodies!",https://clarity.b4a.io,University of California - Davis,3,Ryan,Hang,ryan.hang3r@gmail.com,Kelly,Phan,khphan@ucdavis.edu,Andrew Tri,Tran,atitran@ucdavis.edu
CareShare,69,https://hackdavis2023.devpost.com/submissions/412786-careshare,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:09:02,"Inspiration

Imagine a platform where college students can effortlessly donate their goods to those in need, creating a positive impact within our community and fostering a culture of giving.
With that message and the hackathon’s aim to create social good at the center of our thinking, we were inspired by the aggie reuse store to create Care Share.
We noticed that when many students graduate, they tend to throw out a significant amount of easily reusable goods.
We wanted to create a marketplace to facilitate the exchange or donation of those goods across Davis, increasing sustainability while also providing those in need with access to goods they may not be able to afford otherwise. 

What it does

CareShare allows users to create listings for items that they wish to donate and allows other users to demonstrate an interest in those listings.
These users, who can be either students or UC Davis-Affiliated NPOs, provide a name, image, and category of good they wish to donate in their listing, which other students can message them about and facilitate an exchange. 

How we built it

CareShare was built using a combination of HTML, NodeJS, and MySQL. 
The front end primarily consists of HTML and CSS, with a backend of NodeJS. We stored listings and other important user data using MySQL to store and retrieve data.  

Challenges we ran into

Some of the challenges we faced with this project included passing the data between the frontend and backend of the programs and storing that data into MySQL. 

Accomplishments that we're proud of

This project required linking together the front-end and back-end at multiple key points to provide a smooth website experience and facilitate proper database usage. 

What we learned

Our group learned about integrating MySQL with JavaScript code, and how to transfer data to/from databases to use on a website storefront. It was a challenge making sure every aspect of our program functioned with the rest of the moving parts that we had, which made constructing the storefront a journey of 1000 steps. 

What's next for CareShare

Currently, CareShare's user login validation is only coded to accept certain preset profiles manually stored in the Database. Given more time, we hope to enable users to make their own accounts and store their login details on a remote server using standard encryption protocols.
We also Aim to introduce more NPO-manage their inventory and also add a chatting feature as prototyped in FIGMA. 
CareShare fosters a strong sense of community among students, creating a supportive environment that goes beyond transactions. Donating on our platform empowers students to make a positive impact in their peers' lives, experiencing the joy of giving firsthand
",https://github.com/MinhGiangg/CareShare.git,https://youtu.be/IcPlQGJFrQs,"Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Best Aggie Reuse Store Hack","node.js, mysql, html, css, figma, github",Aadam,Mirza,amirza@ucdavis.edu,,Yes,University Of California Davis,"We used GitHub extensively for this project, which helped in making sure that everyone kept abreast of the project and its constant iterations. In addition, we also used MySQL, which we used to store all of the data into a local server for use in our program.","",University of California - Davis,3,Minh Giang,Tran,mgttran@ucdavis.edu,Mukta,Jaiswal,mukta@jaiswal.in,Nandini,Sharma,nansharma@ucdavis.edu
NeighborhoodGovernance : A Davis Collective,103,https://hackdavis2023.devpost.com/submissions/412788-neighborhoodgovernance-a-davis-collective,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:11:24,"Inspiration

In spite (and perhaps, because) of the amount of information overload we have in the current times, we often do not know what's happening in and around us. Most Americans neglect their responsibilities as consistent voters and well-informed citizens, but in our defense, the electoral system, government policies, and the day-to-day of governance -- how laws or new developments can affect us -- aren't communicated well. In the recent midterm primary election last year, California had a 16% voter turnout, which is very concerning!  

What NeighborhoodGovernance Does

This initiative brings together administrators and citizens to create a community of constant feedback, thereby making local policy more comprehensible and of interest to a resident of a particular locale. There are two roles in this initiative, one is a 'city official' and the other is a 'concerned citizen'. The 'city official' can create policies. For example: currently the 'East Covell Bike Path Project' is being undertaken by the city of Davis. 

If Davis onboarded to our website, a city official would be able to create and manage the status of this project through a form -- whether it is ongoing, who has been contracted for construction, how much money has been budgeted towards this goal, and whether it is on track to completion. We add this information to an interactive map of the city! Multiple projects can be added to one map. Every local resident using the website would be able to save or view the map to understand how improvement projects might affect their day-to-day lives, whether elected officials are keeping their promises, and provide support to longer-term threads that tie projects together into a map -- in one, centralized application.

Functionality Details

We have been able to build a fully functional prototype. The back-end is built in Flask/Python which  uses Atlas MongoDB as a NoSQL database. The front-end is built in React and uses Google Maps API to create an interactive map. Users create 'projects' and add them to a 'layer'. A 'layer' consists of multiple projects part of the same initiative. Other users can 'support' layers that they like and also 'save' them for future reference. We use REST APIs to perform CRUD operations. 

We also have other integration for converting addresses to (latitude, longitude), finding coordinates in a given radius and NLP text-summarization for providing projects tl;dr's! We also implemented a scoring algorithm to create a featured pick-list for users, so they aren't overwhelmed with maps and proposed projects -- initiatives with a lot of support filter to the top of the rankings.

Challenges

It was very challenging to find projects around a particular location considering the number of projects that can be present. It was also our first time doing text-summary, and had to jump a bunch of hoops to get it to work. 

'Layers' and 'Projects' are tightly coupled logically and therefore decoupling them for particular APIs needed some problem solving.

Accomplishments that we're proud of


 A fully functional website, with complete back-end integration for CRUD operations
Integrations with cutting edge technology to provide a better user experience
Tackles a very overlooked problem in our society 


What we learned


 geospatial encoding and operation on them.
REST APIs with flask/python
NLP as a service
Communication and teamwork


What's Next for NeighborhoodGovernance : A Davis Collective

This particular project has a very broad scope, as it can evolve into a collective effort in fostering better understanding of local policies. This would require support from various government agencies involved in the decision making process. 


The first step towards will be to communicate this idea to the city representative and collect their opinions.
We could also add functionalities to comment on initiatives (on top of indicating support via upvotes), allowing officials to easily determine the pulse of the public.
We could collect data on how long projects have been running or where budget is allocated to better understand the effectiveness of the administration. 

",https://github.com/rishabhbhaskaran/hackDavis,,"Best Use of MongoDB Atlas, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","flask, mongodb, rest, natural-language-processing, react, python",Rishabh,Bhaskaran,rishabhbhaskaran@gmail.com,,Yes,"Univ of California, Davis","MongoDB atlas, google maps api, geospatial coordinates, openAI and oneAI APIs","",University of California - Davis,1,Lily,Bhattacharjee,lbhattacharjee@berkeley.edu
Aggie Archive,74,https://hackdavis2023.devpost.com/submissions/412793-aggie-archive,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:23:12,"Inspiration

The inspiration behind Aggie Archive stems from the belief that education is a transformative force that should be accessible to all. Recognizing the challenges and limitations faced by students in obtaining quality educational resources, we were determined to create a solution that would level the playing field and empower learners at UC Davis.

As students ourselves, we experienced firsthand the frustrations of spending countless hours searching for relevant materials, often ending up with outdated or unreliable sources. We saw the need for a centralized platform that would not only streamline the search process but also foster collaboration and knowledge-sharing among peers.

Moreover, we were inspired by the power of community and the collective wisdom it holds. We firmly believe that when students come together to share their insights, experiences, and resources, everyone benefits. We wanted to harness this potential to create a dynamic and interactive platform that would enhance the learning experience for all UC Davis students.

What it does

Our project creates a platform for UC Davis students to search for educational resources, contribute their own materials, collaborate with peers, and engage through commenting and voting. It enhances the learning experience by providing a centralized hub for resource sharing and interaction.

How we built it

This project combines various technologies and aspects to create a full stack application. A MongoDB database was used to store information about courses, users, and resources. JSON files were cached locally from MongoDB database to increase app loading speed.

Front end was built on React.js, and the middleware consisted of express.js and mongoose. 

Non term-specific data was obtained in a headless chrome driver browser through the use of selenium on python, parsing through over 10,000 courses. 

Challenges we ran into

While developing Aggie Archive, we encountered challenges in web scraping data, managing time effectively, and implementing user file uploads.

Accomplishments that we're proud of

Creating an immersive user experience was one of our proudest achievements. Along with that, we were able to make a low resource and easily scalable backend, which allowed us to load our pages fast. Finally we're also proud of how far we came as a team. We came in with not many expectations, but came out with a great product and amazing experiences.

What we learned

Through the development of Aggie Archive, we gained valuable insights and learning experiences. On the organizational front, we honed our time management skills and discovered the importance of effective collaboration. On the technical side, we delved into the fundamentals of the MERN stack, gaining expertise in both frontend and backend development. These learnings have equipped us with a solid foundation to tackle future challenges and continue delivering innovative solutions.

What's next for Aggie Archive

Our next steps involve expanding the platform's features and functionality to further enhance the user experience. We plan to implement advanced search capabilities, personalized recommendations, and improved user interface for seamless navigation. Additionally, we aim to forge partnerships with academic institutions and organizations to broaden the range of available resources. Our vision is to create a thriving global community where students from different universities can connect, share knowledge, and collaborate. Furthermore, we will continuously gather user feedback to refine and optimize Aggie Archive based on the evolving needs and preferences of our user base. 
",https://github.com/Vish-04/AggieArchive,,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design","javascript, react, mongodb, mongoose, express.js, node.js, python, selenium, html, css",Hideaki,Park,hdpark@ucdavis.edu,,Yes,UC Davis,"During the hackathon, our exploration of GitHub and MongoDB proved to be incredibly fascinating. We delved deep into these technologies, uncovering the intricacies and discovering a wealth of useful tools and techniques. This hands-on experience allowed us to gain valuable insights into the nuances and capabilities of GitHub and MongoDB, expanding our knowledge and enhancing our skillset.","","University of California - Davis, UC Davis",3,Akkati,Vishwa Reddy,vishwareddy@gmail.com,Armin-dev-tech,,arminbozorgi.ab@gmail.com,Gursheen,Kaur,gsdkaur@ucdavis.edu
HorseHaven,19,https://hackdavis2023.devpost.com/submissions/412794-horsehaven,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:23:21,"Inspiration

Our team has a unique fascination with animals and nature. But what really inspired us was the discussion we had with a member of AWHC's team. We found out that wild horses are getting their land stolen from them and are being inhumanely rounded up. We felt that by tackling this problem, we could help a community that is never considered, animals. 

What it does

Our app is a mobile app that essentially creates a virtual community for horse owners of the world. It allows users to upload pictures of their horses and share them with others enthusiastic about the horse community. These pictures are then used to create an image dataset of horses which can then be used to train a machine learning model so that the AWHC can easily recognize which horses are wild. The app provides a way for the horse community to engage with each other, all while helping benefit the larger population of horses from their fingertips. 

How we built it

To build the app, we compartmentalized the project into two parts. The front-end and the backend. For the front-end we used figma to model out our entire user interface while the actual application was built in react native, JavaScript, and CSS. Even to access the camera we used Expo to allow for easier integration into the front-end. For the backend, we used Firebase to create an authentication system as well as a way for users to import pre-existing images of their horses. 

Challenges we ran into

We had a few challenges that kept us puzzled for a while. Initially we ran into issues when our version control system delayed changes made to the repository causing some of our code to be lost in the merge. Afterwards, our greatest challenge became accessing the camera with Expo and integrating the front-end with the backend. 

Accomplishments that we're proud of

We are extremely proud that we were able to tackle a real-world problem that has an impact on an overlooked community. We are also thrilled to have learned so much about version control, authentication systems, and accessing camera for user input. 

What we learned

We learned the importance of creating and working on separate branches in Git to ensure no code is lost in the merge process. We also realized the vitality of having more people on the team because then the distribution of work becomes much more manageable and also more productive over the long run. This hackathon was a great learning experience for the both of us and we will definitely look back on this fondly as our first hackathon. 

What's next for HorseHaven

HorseHaven has immense potential. Just within the original constraints of the app, we can finish the integration of the front-end with the backend so that the user experience is seamless. We can also work on making the databasing cleaner and more secure so the users are protected. On top of that, we can use an open source horse classification dataset to train an ML model ensuring that the users only post pictures containing a horse. On the grander scale, this project can be adapted to any animal community, dog lovers, cat lovers. Many people look for an outlet to share their pet passions and this can provide that.
","https://www.figma.com/proto/BKztFQk5kltO06bRtlX86n/Horse?type=design&node-id=68-365&scaling=scale-down&page-id=0%3A1&starting-point-node-id=4%3A2, https://github.com/aaravurg/hd.git",https://www.youtube.com/watch?v=LlsYqqBt8-M,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Design, Best American Wild Horse Campaign (AWHC) Hack","react-native, javascript, firebase, expo.io",Harsh,Karia,hnkaria@ucdavis.edu,,Yes,"University of California, Davis",Our experiences were mostly positive with the technologies we used. However we had quite a bit of trouble with the react-native camera library as well as GitHub. It was hard to find a way to properly integrate the camera in react-native and a delay in the GitHub push caused some code to be lost when we executed a pull.,"",University of California - Davis,1,Aarav,Urgaonkar,aurgaonkar@ucdavis.edu
Safe Grub,40,https://hackdavis2023.devpost.com/submissions/412799-safe-grub,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:29:24,"Inspiration

Food allergies are a significant concern for individuals who need to carefully monitor their diet. Reading and understanding food labels can be time-consuming and challenging, especially for people with visual impairments or those who struggle with ingredient analysis. Our team was motivated to develop an innovative solution to assist individuals in quickly identifying potential allergens in food products. Thus, we created Safe Grub, a web app that utilizes computer vision and natural language processing to detect allergies in food items.

What it does

Safe Grub utilizes computer vision and the Clarifai API to enable users to scan food wrappers using their webcam. The web app captures an image of the food item, detects the barcode using Clarifai's barcode reader AI model, and extracts the serial number. It then parses through a database of ingredients to identify any common allergens associated with the serial number. Finally, Safe Grub uses text-to-speech technology to read the list of ingredients aloud, ensuring accessibility for individuals with visual impairments.

How we built it

Safe Grub is built as a web application using HTML, CSS, and JavaScript. We utilized the following components and technologies:


Webcam Access: We accessed the user's webcam stream using the navigator.mediaDevices.getUserMedia API.
Canvas: We used the HTML elements to display the video feed and capture frames from the webcam.
Clarifai API: We integrated the Clarifai API to detect the barcode from the captured image and extract the serial number.
Ingredient Database: We created a database of common allergens and their associated serial numbers.
Text-to-Speech: We employed JavaScript's text-to-speech capabilities to read the list of ingredients aloud.


Challenges we ran into

During the development of Safe Grub, we encountered several challenges:


Webcam Access: Configuring the webcam access and capturing frames required understanding the getUserMedia API and dealing with cross-browser compatibility.
Barcode Detection: Integrating the Clarifai API and correctly extracting the barcode's serial number presented some complexities.
Ingredient Parsing: Building an efficient ingredient parsing algorithm to match the extracted serial number with the allergen database required careful consideration.


Accomplishments that we're proud of

Despite the challenges, our team achieved several milestones throughout the development process:


Successful Barcode Detection: We integrated the Clarifai API and implemented the barcode detection AI model, allowing us to accurately extract the serial number from the food wrapper image.
Allergen Identification: By parsing through our ingredient database, we successfully identified potential allergens associated with the serial number.
Text-to-Speech Integration: We implemented text-to-speech functionality, enabling Safe Grub to read the list of ingredients aloud, enhancing accessibility for visually impaired users.


What we learned

In this project, we gained knowledge on integrating multiple APIs and leveraging their combined functionality. Additionally, we recognized the significance of accessibility in website development, particularly in ensuring inclusivity for various user groups, such as the visually impaired.

What's next for Safe Grub

We have a vision to expand Safe Grub's capabilities and incorporate additional features to make it an indispensable tool for individuals with food allergies. Here are some future enhancements we plan to implement:


Real-time Ingredient Detection: Utilizing natural language processing
Accessibility: Making it as accessible as possible through converting this web app to a mobile app. 

","https://github.com/Gauthampdn/hackdavis2023, http://safegrub.tech",,"Best Domain Name from Domain.com, Best Open Data Hack, sponsored by UC Davis DataLab, Best Design, Best Healthcare Hack","clarifai, javascript, html, css, data",Parna,Praveen,parnapraveen912@gmail.com,,Yes,"University of California, Santa Cruz & University of California, Davis",X,safegrub.tech,"University of California - Santa Cruz, University of California - Davis",4,Charitha,Gangi,charitha.gangi2@gmail.com,Gautham,Pandian,gauthampdn@gmail.com,Kevin,Chen,kchen194@ucsc.edu,Ashwin,Chembu,ashchembu@gmail.com
Untitled,,"",Draft,Pending,Manage team,05/21/2023 12:29:29,"","",,"","",Piero Leonardo,Calderon,picalderon@ucdavis.edu,,"","","","",El Pinar International School,0
RescueBites,38,https://hackdavis2023.devpost.com/submissions/412802-rescuebites,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:29:55,"Inspiration

We were inspired to create this website after seeing the amount of food that gets thrown out by stores while still being in good condition. The quantity of food waste this creates, while there are people struggling to afford a meal everyday, is outrageous and we decided to take action by creating a site that would help solve these two issues at once.

What it does

This site allows stores to publish and announce excess food sales that will show up in the user's feed depending on the location they are in. Users can see which ""bites"" (sales) are available and order them online for pickup. 

How we built it

We built this program using html and CSS to create a basic website that hosts the announcements of sales, a map to locate stores near your designated location by linking google maps to our site to display select stores. We built a navigation bar that moves through the site and provides searching for ""bites"" across. 

Challenges we ran into

We ran into challenges when attempting to implement the navigation bar for the site as it kept shrinking due to problems with conflicting CSS code. We also ran into issues when implementing the map functionality of the map page as when clicking to select a store it would not show all locations in the vicinity, but rather one. 

Accomplishments that we're proud of

We're proud of organizing the navbar in the end and managing to properly code the design that we envisioned. We're also proud of the speed at which we managed to create multiple pages for the site as one of our team members who was delegated to working on said pages.

What we learned

We learned that to implement the required map functionality we wished to achieve we would have to locate the proper API that allows for that level of interactivity on the actual site, as what we worked on was not sufficient. 

What's next for RescueBites

We will continue to work on this project once this event concludes and refine, as well as fix, the components of the site to get the proper framework up and running for future implementation. 
","https://www.figma.com/proto/NWhYOaguucEHemf5iFcaRT/Untitled?page-id=0%3A1&type=design&node-id=0-3&viewport=193%2C239%2C0.09&scaling=scale-down&starting-point-node-id=0%3A3, https://github.com/TheLastBeast/HackDavis",,"Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design","html5, css3, figma",Andrew,Solbjor,s0lbjorandr3w@gmail.com,,Yes,San Joaquin Delta College,"There were intermittent internet issues throughout the first day of the event, as there was slow connectivity as well as disconnections.","",San Joaquin Delta College,3,CodingEmpire,Kneale,codykneale@yahoo.com,Jeijito,,jj.ramgui@gmail.com,Christian,Kinyon,bluedsteelgaming@gmail.com
Pushin P(ills),102,https://hackdavis2023.devpost.com/submissions/412803-pushin-p-ills,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:30:06,"Inspiration

I constantly forget to make my supplements to help with my anemia, so I thought, ""if I'm constantly forgetting, how many others must be missing doses of much more important medicines?"" Additionally, I read stories about people with Parkinson's struggling to take their pills. They'd drop the medicine and have to consume it from the floor or lick their fingers to hopefully get a pill stuck to their hand. Thus, we sought to solve two problems with one device: Pushin P(ills).

What it does

This device hosts a web server where the user can enter what days and what time they need to take their medicine. At that time, they receive a text message and a light starts flashing to notify them to take their medicine. They then press a button and a pill is dispensed out for them to consume without the difficulties of having to grab it out of the bottle.

How we built it

We used a Raspberry Pi to host a flask web server that we used ngrok to access remotely. We also connected the Raspberry Pi to a circuit with a button, 2 servo motors, and an LED. When the user provides the days and time they want to be reminded at, we store the information and when the time arrives, a Twilio text message is sent. The button is then enabled and the user can press it to dispense a pill, which is done through 2 servo motors that isolate one pill before releasing it.

Challenges we ran into

Our MicroSD card initially wouldn't configure, so we were recommended to use an Arduino. We considered using Webhooks or a Bluetooth app to communicate with the Arduino, but we found that the Arduino did not support Webhooks and there was no Bluetooth module besides an on-board Bluetooth Low Energy (BLE) module. As we began learning how to write a BLE app, a very kind mentor offered to let us borrow his Raspberry Pi, allowing us to revert closer to our original goal. We also struggled with Twilio as we were randomly faced with a business verification process when we start trying to reply to messages, so we once again pivoted to allowing the user to access a web server. Other problems arose regarding hardware components and connecting remotely to the Raspberry Pi, but we were able to steadily overcome them.

Accomplishments that we're proud of

We are extremely proud of how many new technologies we learned in one day. Before this, neither of us had touched a Raspberry Pi, Twilio, and we had almost no experience with circuitry or web servers. We are very proud of being able to finish a project, especially with how many times we had to deviate from our original plan, as well as having the grit to stay awake all night working on this.

What we learned

We learned a lot about constructing robotics and circuitry as well as the intricacies of a Raspberry Pi and its power.

What's next for Pushin P(ills)

We would like to remake this with a 3d Printer and more secure components. This project was made with cardboard and recycled components as we simply did not have access to more expensive materials. I also would like to replace our servos and use more hygienic materials particularly in the pill chute.
","",https://www.youtube.com/shorts/qAUFvFCbDe4,"Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hardware Hack, sponsored by the UC Davis Student Startup Center, Best Healthcare Hack, Most Creative Hack","raspberry-pi, twilio, flask, python, circuitry",Anish,Ahuja,anahuja@ucdavis.edu,,Yes,"University of California, Davis","Twilio was difficult to use. The Raspberry Pi was fun but challenging, though I wish we had some more sensors, resistors, and motors.","","University of California - Davis, El Pinar International School",2,Piero Leonardo,Calderon,picalderon@ucdavis.edu,Eric,Abogado,etabogado@ucdavis.edu
Interpreting Race in LLMs,13,https://hackdavis2023.devpost.com/submissions/412805-interpreting-race-in-llms,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:32:05,"Inspiration

Palantir has recently released a language model-based platform that aids governments in their defense operations. We are currently experiencing an explosion of startups using language models for a diverse array of applications. We need assurances that language models arrive at their conclusions in safe manner that's aligned with human values. But, how can we reliably assert such assurances? Simply put, we don't know. We lack the foundational techniques necessary to asserting crucial assurances. My project attempts at both developing and applying techniques in mechanistic interpretability to understand how a language model generates text. One of the many assurances we want is that the language model is not making racially colored decisions when it would be harmful to. My project focuses on how language models generate text when the prompt involve race to move closer to providing this sort of assurance.

What it does

My project identifies specific components in the 700M parameter language model gpt2-large that are causally linked to the generation of select facts involving race. For example, I observed that a layer 18 MLP in gpt2-large strongly determines the generation of facts associated with ""Indian."" It then makes a basic attempt at linking these identified components to the decision-making process the language model takes when faced with a prompt involving race. 

How we built it

I analyze the pertained model gpt2-large in a Google Colab environment. The primary tools I use are PyTorch and a mechanistic interpretability library called TransformerLens.

Challenges we ran into


Implementing and figuring out how attribution patching works
Putting ""interpreting facts involving race"" into the attribution patching framework
Finding simple prompts involving race that a gpt2 model is capable of expressing explicit facts for
Memory management when handling a 700M parameter model in Google Colab


What we learned


How to use TransformerLens
How Attribution Patching works and how to apply it
Memory management in PyTorch and Google Colab - moving between CPU and GPU, scope, avoiding references
Hands-on understanding of relation between model size and capabilities

",https://github.com/Ooberaj/MechInterpRace,,"Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","python, pytorch, gpt-2, google-collab, transformer-lens",Yuvraj,Virk,yuvivirk344@gmail.com,,Yes,"University of California, Davis","Memory management in Google Colab is annoying
Github is easy to use","",University of California - Davis,0
Psyched to Study,110,https://hackdavis2023.devpost.com/submissions/412806-psyched-to-study,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:32:18,"Inspiration

Study apps I've used in the past were great, but lacking in motivation tools or encouraging rest. Rest is so incredibly important in day-to-day life but plays a crucial role in memory consolidation too. Studies show that sleep and quiet rest allow the brain to encode things learned into long-term memory. However, rest isn't the only important factor. Intrinsic motivation, or the motivation to do something because you enjoy it and not necessarily for an extrinsic reward (eg. money, stickers, etc), is an important predictor for persistence and overall quality of work according to research. My design aims to focus on both of these aspects while maintaining a clean design to reduce stress and/or overwhelm.

What it does

My design would ask a user to input how much time they would like to study (no more than 5 hours per study session to encourage self-care). This time would then be split into one-hour ""reps"" (if the time inputted is at least one hour) consisting of study time (45 min.), meditation/stretch quiet rest (8 minutes), and an optional active rest (7 minutes). Every ""rep"" would earn the user 5 experience points (XP), and XP could later be used as a motivation factor. I would try to implement a small game within the app where you can turn XP points into virtual rewards, almost as a way to track progress while having fun. By doing this, studying would be paired with something fun, helping to boost intrinsic motivation. 

How we built it

I researched psychology studies using Google Scholar. Then, I used Goodnotes 5 to sketch ideation/user flows. Lastly, I started designing on Figma, implementing prototyping whenever possible.

Challenges we ran into

Currently, my project is only a Figma file and ideation sketches/user-flows sketches. I quickly realized that working solo, it would be extremely hard to both design and code everything within 24 hours, especially due to my lack of coding experience. I had to switch my focus from trying to achieve an app to just focusing on creating a Figma that's as well-designed as possible for my skill set. 

Accomplishments that we're proud of

I'm proud of the overall idea I was able to come up with. I'm also incredibly proud of the visual design; I have not practiced my visual design skills much before this event, but through workshops, I was able to learn so much and I believe I have a much stronger understanding of visual design now than I did before. I'm excited to expand on these skills and keep moving forward!

What we learned

This year I learned the consequences of signing up somewhat late and not forming a team before starting. In the future, I will make sure to work in teams because not only is it beneficial to the amount of work outputted, but it's also incredibly beneficial to the input; everyone has a unique perspective to bring to the table and pulling ideas together can end up creating something more amazing than if you were to just fly solo (and I wish I had fully understood this more before going in). 

What's next for Psyched to Study

I would love to keep working on my design and recruit some friends to help me in finalizing designs for Psyched to Study, as well as develop the design into a working app. 
",https://www.figma.com/proto/jEdEcHW8TGPlzC0VAXR0mu/Untitled?page-id=6%3A32&type=design&node-id=8-79&viewport=718%2C210%2C0.28&scaling=scale-down,,"Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Most Creative Hack",figma,Melanie,Born,maborn@ucdavis.edu,,Yes,"University of California, Davis","I briefly looked into Microsoft Azure. I didn't end up using it much because I had to focus on Figma, but it seems very useful when it comes to developing my design into an app. I love the amount of tutorials available too!","",University of California - Davis,0
Via,55,https://hackdavis2023.devpost.com/submissions/412808-via,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:35:39,"Inspiration

Especially during recent times, students all across campus have been concerned about their personal safety. By analyzing historical crime data from UC Davis using machine learning techniques, our solution aims to provide invaluable resources for the campus community by analyzing the danger level of a particular location at a specific time.

What it does

Our website has a form where all you have to do is enter in an address and a time, and it will provide you with a risk level of how likely it is for a dangerous crime to occur if a crime is to happen, based on historical data. With this project, we aim to make a tangible impact by fostering a safer environment for everyone on and off campus.

How we built it

We used Jupyter Notebooks to train a machine learning model on data we collected from UC Davis Police crime reports that we organized into a CSV file. We built the front-end with React and sent the user-submitted data to the Golang back-end, which then communicates with the Python model using gRPC to get a dangerous crime prediction. The result is sent back to the front-end, which displays the dangerous crime likelihood. We created a MongoDB database and used their GraphQL API to query our data in Retool. With this data we used Retool's drag-and-drop interface to create user metrics and crime statistics.

Challenges we ran into

Collecting the data was tedious because the police department didn't provide it in CSV format, and none of us knew web scraping so we entered the relevant information by hand. Setting up gRPC for interlanguage communication also took a bit of time.

Accomplishments that we're proud of

We set up a complete communication chain between the user and our machine learning model that displays the user in a clean, easy-to-understand manner.

What we learned

We learned how to communicate between services in different languages using gRPC, and how to use Golang to build a backend server.

What's next for Via

We would like to refine our ML model with more information as the UC Davis police continue to provide reports. We could also host our project on a URL for users to access, instead of going through GitHub and cloning the project.
","https://github.com/PatrickELee/Via, https://pelee.retool.com/apps/2776cbb6-f7bc-11ed-b286-e318d888d506/Via",,"Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Open Data Hack, sponsored by UC Davis DataLab, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Best Use of Retool","react, python, golang, grpc, retool",Glenn,Chen,glenn.jun.chen@gmail.com,,Yes,"University of California, Davis","We used Jupyter Notebooks and Python to train the machine learning model for crime prediction. We used Golang, Javascript, and gRPC for the backend server communication, and React for the frontend. We also used Retool to display user metrics.","",University of California - Davis,3,Michael,Kim,mijkim@ucdavis.edu,Patrick,Lee,pelee@ucdavis.edu,Chi Chon,Leong,chichon.leong1038@gmail.com
Rate My Apartments,44,https://hackdavis2023.devpost.com/submissions/412809-rate-my-apartments,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:36:12,"As students looking for an apartment to live in for the next school year, it is a difficult and grueling task to look for an apartment that not only fits your budget but also provides quality that matches that budget. Since this school year is about to come to an end, we know that many students will have to find a new place to live and we want to make it easy as possible to find the best apartment for each individual.

Rate My Apartment is an application that allows users to make reviews about an apartment. These reviews include a scale from one to three for the price point (one is cheap and three is expensive),  a text box for any experiences or comments, and an icon that displays the number of rooms and bathrooms that the user had.

First, we drew out our ideas and prototype through Figma and used mainly React native to build our app. To build our map, we attempted to use WebMap to display the locations of the apartments with their specific pins.

Unfortunately, we were not able to finish building the map portion, running into difficulties that would not allow the map to print on our screen. With more time, we may have been able to debug our problems and figure out what went wrong.

We were proud of our home screen, or first page, as we aimed for a sleek and minimalistic look that we think we achieved quite well.

With this project, we tried to learn how to use the WebMap API, as it was new to all of us. We also discovered how fast 24 hours went by, as sometimes we think we have enough time to do a certain portion but we end up running into difficulties, whether it is bugs or something that doesn't look the way we want it to.

What's next for Rate My Apartments? We will have to fix the WebMap portion, which is our priority, then add other details, such as an email authenticator.
",https://github.com/kaitlynlie/Rate-My-Apartments,,"Best Beginner Hack, Best Design","react-native, javascript, webmap, figma",kaitlyn,li,kaitlynli0903@gmail.com,,Yes,UC Davis,"We used GitHub as a method of pushing code, and we did not interact with any other tech.","","UC Davis, University of California - Davis",2,John Quang,Tran,itzjtran@gmail.com,zkH2O,,zizeng39@gmail.com
The Trash App,99,https://hackdavis2023.devpost.com/submissions/412810-the-trash-app,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:38:02,"Inspiration

Our team’s inspiration was to make the world a greener place! Landfills are being overran with recyclable materials and it is our job to stop this! We also wanted to create a very simple app that will let people have the power at their fingertips to distinguish the differences between recycling and trash. This is our first step in creating an AI that will completely change the world!

What it does

An app powered by machine learning to scan your trashcan and calculate the California Refund Value(CRV) that you can claim from the nearest recycling center.

How we built it

Through Python and Yolo algorithms, we deployed the model on AWS through Django, then we built the front end using Flutter and Dart for the user interface.

Challenges we ran into, What we learned, and Accomplishments that we're proud of.

With limited time, besides all the tremendous coding challenges, technique difficulties, and limited computation resources, the hardest part is actually communicating with each other and keeping each other in the loop, through this experience, we gained a lot of experience in co-development and we learned so much from each other, which helped us grow our technical skills a lot.

What's next for The Trash App

What’s next for our app? As stated in our inspiration we want to create the most powerful AI to determine what is recycling and what is waste. We would like to implement features such as electric detection that will give the user the ability to take pictures of things such as TVs phones and even cars. This will then send a location and a website to where they can request someone to take their items and we as a company will dispose of those items.
",https://github.com/rickNrip/thistrashai;https://colab.research.google.com/drive/1CcJVUDqsp8vCimhz1OCP9gm4asLxpYbT?usp=sharing,,"Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Open Data Hack, sponsored by UC Davis DataLab, Karim Majdi Abou Najm Memorial Prize for Technical Complexity","python, amazon-web-services, yolo, tensorflow, django, flutter, dart",Wendon,Song,wdsong@ucdavis.edu,,Yes,"University of California, Davis;","google colab is an awesome platform to use for training our model. However, we constantly encounter the problem of not having GPU access due to the high usage during 24 hours. I hope next time we could take off that limit for the hackathon window.","","University of California - Davis, California State University - East Bay",2,rickNrip,Bailey,baileyricky79@gmail.com,Andrew,Bustos,bustosandrew28@gmail.com
Untitled Cat Game ,46,https://hackdavis2023.devpost.com/submissions/412812-untitled-cat-game,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:38:54,"Inspiration

This project was inspired by a research paper where ChatGPT was used to simulate human agents in a game instance. I wanted to do an extremely simple version where the in-game character can move around somewhat dynamically.

What it does

It's a relaxing conversation game where you chill with Willow, a slightly-magical cat who's home you stumbled into. Just hang out and watch Willow poke around their house as you talk.

How we built it

The game instance is made with Unity Game Engine, and the AI is driven by OpenAI's API (gpt-3.5-turbo)

Challenges we ran into

I had trouble getting the API calls to work with the game engine due to lack of experience. The other major issue was designing the prompts such that segments of the response could be parsed into in-game movement actions.

Accomplishments that we're proud of

Idk lol

What we learned

How to make POST calls through Unity's provided HTTP request library. How to use OpenAI's API, how to do some basic structuring of prompts.

What's next for Untitled Cat Game

Ideally there would be more interactions beyond just moving around, similar to the research paper. The interaction effects would be human designed, but the AI would decide on when events occur.
",https://doublebrackets.itch.io/untitled-cat-game,,"Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Most Creative Hack","c#, unity, aseprite",Arthur,G.,arthurgan29@gmail.com,,Yes,UC Davis,Unity - I have prior experience with it so I'm a little biased towards it. Decent game engine.,"",University of California - Davis,0
ScheduleFlow,86,https://hackdavis2023.devpost.com/submissions/412817-scheduleflow,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:41:34,"Finals is a stressful time for everyone

In UC Davis, for teachers, they are busy preparing for lectures and creating exams for students. For students, they are studying for final exams and wrapping up projects and written papers. The current finals' week in UC Davis is from Monday to Friday with finals starting as early as 8AM and ending at 10PM. By having early and late start times for final exams, it adds additional stress to teachers and students. In addition, since there is neither a study day/ week nor blocking of final exam times, UC Davis often prepare for their earlier finals during the weekend prior to finals week, but then, struggle to prepare for their later finals. 

What it does

We implemented an scheduling algorithm that will create a schedule for finals course with one study day during finals week (Monday or Wednesday), where students are given more time to study and prepare for finals. The algorithm will also remove finals that start at 8AM and 8PM by creating five time blocks in which each day of finals week that final exams can occur. 

How we built it

We used Python to web scrape available seating in many UC Davis buildings for final exams from an openly accessible dataset through the University Registrar. Moreover, the course data was web scraped and modified to be fit for data analysis. With Python, we also created the scheduling algorithm that will generate a JSON file, assigning courses with an final exam day and time block. That JSON file was then processed through a front-end program designed with React and other front-end technologies to show markers on the buildings with the assigned courses with finals.

Challenges we ran into

We were new to web scraping, so scraping for the course data and seating availability posed as a hindrance to overcome. Precisely and accurately implementing a scheduling algorithm that used all the necessary and proper data structures was a great hurdle.

Accomplishments that we're proud of


Web scraping with Python
Popular scheduling algorithms
Front-end API calls


What we learned


Web scraping with Python
Popular scheduling algorithms
Front-end API calls


What's next for ScheduleFlow

The scheduling algorithm can be optimized, and other edge cases can be handled.
",https://github.com/adityaseth8/FinalSchedulingTool,,"Most Creative Use of GitHub, Best Open Data Hack, sponsored by UC Davis DataLab, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","python, react, html, css, javascript, pandas, numpy, beautiful-soup, requests",Brian,Li,brianli4824@gmail.com,,Yes,UC Davis,GitHub is a great service for version control.,"",University of California - Davis,1,Aditya,Seth,aseth@ucdavis.edu
Pawfect Sitters,4,https://hackdavis2023.devpost.com/submissions/412819-pawfect-sitters,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:46:14,"Inspiration

Our inspiration for Pawfect Sitters stems from our love for animals and the recognition of the need for reliable and convenient pet care services. We understand that finding trustworthy pet sitters can be a challenge, so we wanted to create a platform that connects pet owners with responsible individuals who can provide quality care for their furry companions.

What it does

Pawfect Sitters is a user-friendly website that allows people to search and find pets in need of temporary care. Our platform enables pet owners to post details about their pets, including their names, descriptions, and specific care requirements. Pet sitters can easily browse through these listings, find pets that match their preferences, and offer their services. The website provides a seamless communication channel for pet owners and sitters to discuss arrangements and ensure a good fit.

How we built it

We built Pawfect Sitters using Next.js, a React framework for server-side rendering, and Node.js with Express for the back-end functionality. MongoDB served as our database management system for storing pet data securely. We leveraged Firebase to store images, ensuring efficient and reliable image hosting. Auth0 was integrated for user authentication and login features, providing a secure and streamlined experience for all users.

Challenges we ran into

At the beginning of the project, we faced difficulties due to our lack of experience in setting up a Next.js project. However, through collaboration and perseverance, we overcame these challenges and established a solid development flow. Additionally, the challenge of uploading images led us to choose Firebase as our image storage solution, as MongoDB presented complexities in this regard. The decision to integrate Firebase proved successful and allowed us to provide users with efficient and reliable image hosting.

Accomplishments that we're proud of

We are proud of successfully implementing a user-friendly and responsive website that effectively connects pet owners with potential pet sitters. The seamless communication features and easy-to-use interface make it convenient for both parties to find suitable matches and make arrangements. Additionally, our focus on data security and privacy measures ensures a safe environment for all users.

What we learned

Throughout the development of Pawfect Sitters, we gained valuable insights into web development, including front-end design principles, back-end architecture, and database management. We also learned about the importance of effective user experience (UX) design and how it can greatly impact the success of an online platform.

What's next for Pawfect Sitters

In the future, we plan to enhance Pawfect Sitters by introducing additional features, such as user reviews and ratings, to further establish trust and credibility within the community. We also aim to expand our platform to include additional services like dog walking and grooming, providing a comprehensive solution for pet owners' needs. Furthermore, we will continuously improve the website's performance, security, and user experience based on user feedback and emerging industry standards.
","https://github.com/hansonguyen/hackdavis2023, https://www.figma.com/file/G633h9sHcIBJOw6mLmkJmg/HackDavis-2023?type=design&node-id=0%3A1&t=vLAHPjJhocYj7QAb-1",,"Best Use of MongoDB Atlas, Best Domain Name from Domain.com, Most Creative Use of GitHub, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","next.js, express.js, node.js, react, mongodb, firebase, auth0",Hanson,Nguyen,hansonhn369@gmail.com,,Yes,UC Davis,"We had some challenges importing images using MongoDB, so we opted for Firebase for storing all our image needs.",pawfectsitters.tech,"University of California - Davis, UCDAVIS",3,Naomi,Prem Lim,naomipremlim@gmail.com,dorothybalkon,,dorothyjbalk@gmail.com,Eric,Du,ericdu602@gmail.com
TBD,94,https://hackdavis2023.devpost.com/submissions/412821-tbd,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:48:55,"Inspiration

We noticed that Aggie Reuse Store would be more popular if they had an inventory system online, as well as organized their hours by tracking when students and non-students alike visit their store the most often. So we had the goal of tracking visitor data as well.

What it does


Aggie Reuse Store inventory & traffic management system
## How we built it
SQL + Python for database management
Python for backend services connection
Html, CSS, JavaScript for web front end
Arduino for hardware door traffic sensor system


Challenges we ran into


Database wire behavior
Connecting visitor traffic data to the existing server


Accomplishments that we're proud of


We successfully separated roles equally
We developed an (almost) fully functional inventory system


What we learned


We learned how to incorporate front and back end web development
We learned how to interact with hardware


What's next for TBD


Fix existing minor bugs in the inventory system
Link visitor data with the server via WiFi

",https://github.com/oycheng/hackdavis23,,"","python, html, css, javascript, flask",Honghui,Li,hohli@ucdavis.edu,,Yes,UC Davis,nice peers,"",University of California - Davis,3,Orien,Cheng,oriencheng@gmail.com,Dylan,Teehankee,teehankee@ucdavis.edu,paoloyap22,,paoloyap22@gmail.com
RMP Extension,75,https://hackdavis2023.devpost.com/submissions/412823-rmp-extension,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:49:51,"Inspiration

The inspiration for this project came about from a friends of ours who found a simple inconvenience when having to switch back and forth between websites when scheduling classes

What it does

Our project utilizes web scraping and utilizing rate my professor's api to pull the professors ratings from Rate My Professor

How we built it

We built our application using python libraries (bs4, pandas, numpy) to create various data frames to store professor full names then utilized Rate My Professor's api to grab each professors overall rating, level of difficulty, etc. When the search button on schedule builder is pressed, the extension we created correlates the information collected in out data frames to display all professors ratings according to the data frame.

Challenges we ran into

Some challenges we ran into was the fact that Rate my Professor did not have a very clear or efficient API to use. Because of this, we tried web scraping the actual site line by line which held even more issues to deal with. Eventually we found a API for rate my professor however it used the professors full name as input, however schedule builder does not provide full names. Thus we had to create another data frame to get professors full names from the UC Davis directory and then use those full names to put them into the API and attain professor data. Another was actually developing the extension as we did not have much experience creating one.

Accomplishments that we're proud of

I believe the biggest accomplishment we had was figuring out how to connect professors emails to their ratings. Using a middleman pandas data frame we were able to attain the professors full name, also creating the table of all professor data was another big accomplishment for us. And of course not giving up!

What we learned

We learned a lot about how web-scraping and creating extensions work. As well as the functions and power of data frames and how they can be used to display different information. Lastly, we of course learned the power of perseverance and overcoming the feeling of quitting.

What's next for RMP Extension

In the future, we will look to expand our extension by including perhaps the top comment on rate my professor, as well as decreasing the margin of error for the data, so that our extension always provides information for any professor and the information is always accurate.
",https://github.com/DaveStutler/RMP_extension,,"Best Beginner Hack, Best Open Data Hack, sponsored by UC Davis DataLab, Most Creative Hack","python, javascript, api, html, json, csv",shuaibahmed01,Ahmed,shuaib.ahmed012@gmail.com,,Yes,UC Davis,All technologies worked well except of course the efficiency of some API's that were utilized.,"",University of California - Davis,2,Huy,Nguyen,hxnguyen@ucdavis.edu,marksoliman3,,mtsoliman@ucdavis.edu
HopeLift,71,https://hackdavis2023.devpost.com/submissions/412825-hopelift,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:50:01,"Inspiration

Walking through the streets of downtown Davis, my heart couldn't ignore the sight of homeless individuals struggling to find their next meal or stay warm during the cold winter nights. Witnessing their hardships stirred a deep sense of compassion within me, igniting a powerful inspiration to take action. It became clear that I had to make a difference, to bring even a glimmer of hope into their lives, no matter how big or small.

What it does

At HopeLift, we believe that no one should go hungry, shiver in the cold, or be devoid of opportunities to thrive. Our mission is to provide holistic support by addressing the immediate needs of food and clothing, while also focusing on the long-term solution of job training and career development. We believe in empowering individuals, nurturing their potential, and equipping them with the skills necessary to create a better future.

How we built it

I brainstormed on a notion page first. Then I used a template from wix.com. I worked on it for around 6 hours. Then I gave up on it because it didn't produce what I had in my mind. I then started binding together HTML, CSS & Javascript code on Adobe Dreamweaver. It was too time consuming because I was working alone. By this time, 12 hours of the hackathon were done. I then decided to use another website: squarespace.com. I found a template I liked & worked with it. there were a few hiccups here & there. I fixed them with the mentors' help. 

Challenges we ran into

-lack of a team
-Time constraint
-minimal coding experience. 
-brainstorming during the event wasted time 

Accomplishments that we're proud of

This is my 1st ever hackathon. I'm so proud I did it. I effectively used the resources. This initiative is empowering homeless individuals. 

What we learned

-Coding requires patience. 
-Adaptability & Problem solving are crucial
-An hour of hackathon = an hour of growth
-Time Management

What's next for HopeLift

I plan to extend this service to 24/7. I also want a healthcare wing where the homeless people receive free medical treatment. I also want to collaborate with similar existing initiatives.
","",,"Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Healthcare Hack",squarespace,Liza,Tinku Jose,ltinkujose@ucdavis.edu,,Yes,"University of California, Davis",squarespace.com was great,"HOPELIFT.TECH(might not by published yet), https://bulldog-gazelle-cbjm.squarespace.com/(Password is HACKDAVIS2023)",University of California - Davis,0
Aggie Reuse Version 2.0,77,https://hackdavis2023.devpost.com/submissions/412826-aggie-reuse-version-2-0,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:50:20,"Inspiration

Being active users of aggie reuse and the pantry on campus in the past, we really wanted to help them make full use of their service without having to worry about manual data entry, tracking real-time customer traffic while also providing them with several trends and models to analyze and enhance their already booming service to reach maximum efficiency.

What it does

Our Project tackles two key issues facing Aggie Reuse - 1) No viable way to manage and study customer traffic to the store. 2) No real automated inventory system that can be studied and analyzed from.
We provide Aggie Reuse with solutions for both of these issues. 
We provide them with a very minimalistic tracking facility to monitor and study real-time customer traffic to the store. This is ably assisted by our data-driven models and trends that they can access and study, to choose hours of maximum customer interest and involvement. 
We tackle the second issue of a lack of automated inventory system, by providing them with two parallelly developed fully automated databases, that they can simply operate with a click. This database comes with several models and data trends already programmed that Aggie Reuse can simply access and make decisions such as finding out their in-demand categories, days and hours of the week that sell the most, and others. 
With this, we hope to solve both of the problem statements that Aggie Reuse required assistance with do so with a very smooth and attractive interface.

How we built it

We employed React.js and Node.js to successfully create a web app with multiple pages, connections to databases, etc. We used MySQL for our database while also displaying all our data on the actual website, making it easy for everyone to access and study.

We utilized CRUD functionality with React and Node. Aggie Reuse can simply select the category of the item they receive, and we handle the rest, updating it in the backend.

Challenges we ran into

Trying to find an optimal solution that is not easy to develop but makes it easier for every user on the other end to utilize and work with was our biggest hurdle to tackle. Multiple conversations with the representatives from the Aggie Reuse team helped us devise an idea and product that we believe accomplishes everything that they required.
Coming up with the model of data that will be of most use to study for the user was particularly hard as we had to devise a strategy that compares multiple variables and provides the user with the option from choosing a table, bar graphs, etc to study from. 
The biggest challenge was to come up with a solution for the foot traffic as we struggled to come up with solutions that would not use a sensor or some kind of hardware. We finally landed on a simple clicker that automatically stores the number of people who walk into the facility and provides them with trends for hourly and weekly data, that can help Aggie Reuse decide what days to operate and what hours to open in for maximum customer participation.

Accomplishments that we're proud of

It was imperative for us to provide a smooth user interface that can be understood and utilized by any person. Our interface keeps it very simple, and we take responsibility for doing the complicated modeling and data analysis for you. 
Coming up with one solution for both the problem statements is also something we are extremely proud of as we knew from the get-go that we need one product that can smoothly deliver both solutions.

What we learned

Our biggest lesson was making a product that is very easy to navigate and grasp on first look. We used several react-components, web frameworks to do this and also made sure that none of this is hard coded for any study.  We also learned a lot about how Aggie Reuse operates and how they keep track of inventory.

What's next for Aggie Reuse Version 2.0

Providing the user with more options to analyze and study the data is our utmost priority. Offering more data analysis options than what we already have is our number one goal. We would like to get approved by and work closely with Aggie Reuse to ensure we meet all of their requirements and goals. This is a complete product with several updates on the way.
",https://github.com/yugii28/aggiereusehack,,"Best Open Data Hack, sponsored by UC Davis DataLab, Best Design, Most Creative Hack, Best Aggie Reuse Store Hack","javascript, mysql, html5, css3, node.js, react, express.js, highcharts",darshan,shivakumar,darshiv03@gmail.com,,Yes,University Of California Davis,"We utilized React, and Node.js for our web application while employing MySQL for our database.","",University of California - Davis,1,Yugandhar,Retharekar,yugha@ucdavis.edu
Trunk Tracker,8,https://hackdavis2023.devpost.com/submissions/412827-trunk-tracker,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:51:07,"Inspiration

Here in Davis we are very fortunate to have so many trees spread around campus. They not only provide shade but also reduce CO2 in the air and also save electricity, however many people don't fully realize just how much of an impact trees have. 

What it does

The goal of our website is to make information regarding the benefits of trees more accessible to people. It gives projected electricity saved, runoff avoided, CO2, NO2, and O3 reduction. This allows for more people to consider planting a tree themselves, which is better for the environment as a whole.

How we built it

By utilizing the api from i-Tree Planter, we were able to get estimates on how much impact a given tree would have at a certain location. We parsed this data for relevant information, creating a data set of all the benefits of a tree with a given planting scenario. Using MongoDB Atlas we were able to store the data on the cloud and utilize smart searching capabilities.

Challenges we ran into

Writing and reading to MongoDB created numerous issues ranging from objects not transferring from front-end to back-end and vice versa, to formatting issues when data was being read. In addition to that over half of the team has never worked on a large coding project like this one. As a result of this, there were many challenges that came with simply learning how to work with the tools at our disposal, such as Github.   

Accomplishments that we're proud of

We are simply proud of tackling a project like this as a group of mainly beginners who have had limited coding experience. One of the major components of the project that we are proud of, was being able to utilize MongoDB in our project to manage and search through our data set.

What we learned

Throughout the entire 24 hours we have learned a lot about how to break down such a big project into more achievable steps. With so much to do it was very overwhelming to start, but as the day progressed we were able to make progress in steady increments. Through all the sharing of code and individuals working on different sections of the project, we also learned how to communicate effectively as a team.

What's next for Trunk Tracker

Since we were unfortunately unable to implement all of the features into the website that we were hoping to have, our next goal is to be able to add those features. This includes scaling the project to not only include data from Davis. Other ideas include using image recognition to allow someone to upload a picture of a tree, and our website would be able to provide all of the statistics on that just from that one picture.
","https://github.com/Ruprabhu25/trunkTracker, https://www.figma.com/file/xFLGR7zFH5nTYFdu1YriB4/iTreeHelper?type=design&node-id=0-1&t=CCpRIMJelm21z5u3-0",,"Best Use of MongoDB Atlas, Most Creative Use of GitHub, Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Best TreeDavis Hack","python, javascript, css, html, mongodb, atlas, github, figma, pandas, csv, i-tree-planting",swong95,Wong,seawong@ucdavis.edu,,Yes,UC Davis,"The overall experience with the tech during this hackathon was very good. Once we got the hang of GitHub, it became the star of the show by allowing us to all work on the project simultaneously without overwriting each others' code.","",University of California - Davis,3,cjlindh,,rapunzel@lindhdesign.com,Rahul,Prabhu,ruprabhu25@gmail.com,David,Elgourt,delgourt@ucdavis.edu
Live Gym Population Simulator,91,https://hackdavis2023.devpost.com/submissions/412828-live-gym-population-simulator,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:51:18,"Inspiration

During our first year at UC Davis, we frequently visited the gym. We would go around night time to avoid large populations. While we would be successful at times, there were lots of times when we weren't. Many gyms have live population counters, and we wanted to see something similar happen at the ARC.

What it does

It simulates a live population counter and displays the general number of people for each time period.

How we built it

We built our simulator using HTML, CSS, and JavaScript

Challenges we ran into

A challenge we ran into was bitting off more than we can chew. We had to simplify a lot of back-end development to accommodate for the skills and knowledge that we currently possess. Another challenge was finalizing on an idea. 

Accomplishments that we're proud of

We're proud to be able to finalize an idea and collaborate on a product.

What we learned

We learned a lot from this hackathon. We learned to come in with a project in mind in order to save time and bite as much as we can chew.

What's next for Live Gym Population Simulator

Our next move for Live Gym Population Simulator is to take ""Simulator"" off its name and develop an actual product that can be used at the ARC.
",https://hackdavis.dylantran25.repl.co,,"Best Beginner Hack, Best Design, Most Creative Hack","html, css, javascript",David,Lee,dqlee@ucdavis.edu,,Yes,University of California - Davis,N/A,"",University of California - Davis,1,Dylan,Tran,dyltran@ucdavis.edu
Plan2Plant,52,https://hackdavis2023.devpost.com/submissions/412830-plan2plant,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:54:25,"We were inspired by the i-Tree website and TreeDavis's mission.

Our mobile app, Plan2Plant, was designed to create an accessible, public tool for homeowners to learn about the most suitable tree(s) to plant in their individual spaces.

Our team looked at the i-Tree tool to understand its strengths, and weaknesses, and draw key insights from our analysis. We then created sketches of potential ideas and used card sorting to further narrow down the features of the app. We went through an accelerated sprint process when designing our prototypes that ensured the most valuable features were part of the final design.

Our biggest challenge was time constraints, which compromised our design decisions for our prototype.

We are most proud of the different choices we give our users to achieve their goals.

Research is always the strongest foundation of your product. As we ideated and drafted our ideas, the data we collected through research provided us a strong clarity of what our users desired.


Learned how to manage our time within the given time frame to produce a design that provided a solution to our problem statement.


- Flesh out the typing system so individuals can type their thoughts and have a voice AI read it out with included closed captions.


Finalize the plant page. 

",https://www.figma.com/proto/eNpKyrm8ULsezrqPvLT7pJ/Hack-Davis-Tree-App?type=design&node-id=39-1914&scaling=scale-down&page-id=1%3A1408&starting-point-node-id=39%3A1914,,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Design, Most Creative Hack, Best TreeDavis Hack","figma, canva",Jessica,Dong,jmdong@ucdavis.edu,,Yes,"University of California, Davis",We used Figma and Canva.,"",University of California - Davis,2,Michelle,L.,mxsliu@ucdavis.edu,Juliana,Viado,viadojuliana@gmail.com
Untitled,,"",Draft,Pending,Manage team,05/21/2023 12:55:14,"","",,"","",Corey,Chen,coreychen.mp2@gmail.com,,"","","","",University of California - Davis,0
Inventoree,34,https://hackdavis2023.devpost.com/submissions/412833-inventoree,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:56:44,"Inspiration

What inspired us was our interest in solving Aggie Reuse Store's issues and how some stores utilize technologies in order to make the inventory management process streamlined.

What it does

Efficient and user-friendly inventory management system coupled with extra features to make the experience more convenient

How we built it

HTML, CSS, JavaScript, Python, MongoDB, GitHub, 

Challenges we ran into

Getting the database to work, getting back end to work with front end, and getting the Machine Learning AI to work.

Accomplishments that we're proud of

Getting the backend to work with the front end. Successfully implementing the AI into the app. We managed to get most of what we wanted complete, the rest being very close to successful.

What we learned

We learned a lot about working with Google API, MongoDB, SQL, machine learning, and working as a team on a project with a deadline.

What's next for Inventoree

We plan on implementing features that we thought up of but weren't able to finish or did not get to, prioritizing the goal of making the inventory management experience better.
",https://github.com/vznh/inventoree,,"Most Creative Use of GitHub, Best Beginner Hack, Best Aggie Reuse Store Hack","python, html, css, javascript, mongodb, google",JasonVinh,Son,jvson@ucsc.edu,,Yes,"University of California, Davis. University of California, Santa Cruz. De Anza College","For our frontend we used basic HTML, JavaScript and CSS. It was pretty much our first time working with databases however, so at first we were using MySQL but encountered problems with connecting to the database so we decided to use MongoDB instead, where we still encountered some issues but was at least able to connect to it. We also used TeachableMachine by Google to train a model on clothing recognition. For the backend, we used Python Flask mainly, and it was mainly straightforward and easy to use.","","University of California - Santa Cruz, University of California - Davis, De Anza College",3,Corey,Chen,coreychen.mp2@gmail.com,Tommy,Nguyen,tommyn0225@gmail.com,Vidhata,Singh,vdsingh@ucsc.edu
Bike Detector ,16,https://hackdavis2023.devpost.com/submissions/412835-bike-detector,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 12:58:00,"Inspiration

Many students and individuals’ main source of transportation is through biking. Nearly over 1000 bicyclists die and 130,000 bicyclists are injured every year and we want to minimize as many tragedies as possible. 

What it does

A button can be pressed and the camera rotates 90 degrees and finds the number of bikes per lane. The LED for the lane with most bikes will turn green, and if there are no bikes the light turns green in a counterclockwise fashion. If there is the same number of bikes, it chooses the most counterclockwise lane. It cannot turn green twice in a row for just one lane. It repeats until the button is pressed again. 

How we built it

We 3-D modeled and 3-D printed the bike detector using Solidworks. The bike detector includes a mount and base, which mimics a Lazy Susan. The mount is angled so the camera can cover ground through 90 degree rotations, scanning three lanes. The mount includes a cutout for the servo recess and the servo is coded to allow the mount to rotate on top of the base. The base holds the servo and completes the Lazy Susan design. 

We coded the logic. We took a bottom-top approach, focusing on smaller modules first, such as object detection for images, controlling the camera to take pictures, the traffic light logic and finally integrating all these subparts together.

Challenges we ran into

We started with a Raspberry Pi and the pins wouldn’t work so we decided to use an Arduino instead. Also, running the Arduino with Python instead raised difficulties because we had to run Python for the camera, Arduino, and on the computer. 

Accomplishments that we're proud of

We are proud of the servo fitting the cutout without interference, without sanding down edges. We are proud of integrating the Arduino with the camera using all Python. 

What we learned

We learned how to use an Arduino with Python, gaining skills in integrating hardware with software. We also learned to use pretrained AI models to detect everyday objects, but especially for bicycles, in order to control traffic lights. 

What's next for Bike Detector?!

In the future, we hope to include more cameras and incorporate Raspberry Pi, create a system of computers sensing traffic to improve flow, be able to detect the lane the bike is in, ignore bikes leaving a line.
",https://github.com/ShinyGiratinaEX/Hack-Davis-2023-Bike-Detector.git,https://youtu.be/qGQDOPYIgVk,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Hardware Hack, sponsored by the UC Davis Student Startup Center","python, arduino",Brandon,Gee,bdgee@ucdavis.edu,,Yes,"UC Davis, UC Berkeley","GitHub, Python, OpenCV, Tensorflow, Pyfirmata, Arduino, SolidWorks","",University of California - Berkeley,2,Aimee,Tieu,aatieu@ucdavis.edu,Tyler,Lam,tydalamb@gmail.com
Yolo county Food Rescues,20,https://hackdavis2023.devpost.com/submissions/412837-yolo-county-food-rescues,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:00:04,"Inspiration

The hardships faced by individuals due to inflation and their struggles with food insecurity have served as a profound inspiration for the creation of Yolo County Food Rescues. Witnessing the challenges our community members endure prompted us to take action and develop a solution that addresses this pressing issue head-on. We are driven by the belief that everyone deserves access to nutritious meals and a sense of food security.
In our pursuit to make a meaningful impact, we were mindful of the diverse audience in Yolo County. We recognized the importance of creating a user-friendly interface (UI) that caters to individuals from different backgrounds, cultures, and technological proficiency levels. Our aim was to ensure that the platform is welcoming and accessible to all, fostering inclusivity and empowering individuals to easily navigate and benefit from the resources provided.
By implementing a friendly UI, we aimed to break down barriers and bridge the gap between individuals facing food insecurity and the available free food options. Our intention is to create a platform that not only addresses the immediate needs of our community but also fosters a sense of belonging and support. Yolo County Food Rescues stands as a testament to our commitment to making a positive impact and creating a healthier, more resilient community for all residents of Yolo County.

What it does

Our innovative web app showcases a meticulously curated list of food establishments, featuring comprehensive information such as their operating hours, location, contact details, and the types of food they serve. Designed with an elegant and user-friendly interface, our platform offers an exceptional browsing experience, ensuring easy readability and seamless navigation.

With our advanced features, users can conveniently explore food options within specific date and time ranges, enabling them to plan their visits effectively. Additionally, our platform empowers users with the ability to apply filters based on their desired dates and times, allowing for customized search results tailored to their availability.

We take pride in delivering a professional and comprehensive solution that not only presents essential details about each vendor but also enhances the user experience through a visually appealing and intuitive interface. Our goal is to provide individuals in Yolo County with a powerful tool to access free food resources conveniently and efficiently.

How we built it

Our development process consisted of two main stages. Initially, we focused on data gathering, utilizing open-source data from various online sources related to free food resources. This data was carefully compiled and formatted into a CSV file. Leveraging natural language processing (NLP) techniques and other data engineering methods, we transformed this raw data into actionable and useful information. Python played a significant role in this stage of the project.

The second stage involved the creation of our web app. We employed React.js, a popular JavaScript library, to build a stunning and user-friendly interface. Additionally, we utilized Flask, a micro web framework, to handle data transfer between the front-end and back-end of our application. The visual elements and structure of our website were developed using CSS and HTML, ensuring a polished and professional appearance. For data management, we employed SQLite, a lightweight and efficient relational database management system. Our design was originally made in Figma. 

By leveraging these technologies and frameworks, we were able to create an effective and seamless web app experience for our users, combining the power of data-driven insights with an intuitive and visually appealing interface.

Challenges we ran into

Transforming data into useful information is always a challenging task, especially when it comes to formatting dates for compatibility with our React backend. In order to accomplish this, we relied on Python's datetime module and employed various regex expressions to further refine and clean our data.
The front-end development proved to be equally demanding, given the extensive functionality involved. We acknowledge that adopting a bottom-up approach instead of a top-down approach was a blunder on our part, primarily driven by time constraints. Unfortunately, this resulted in certain limitations, as we were unable to implement some additional filtering options.
Ensuring the stability of the web app posed another significant challenge. Our goal was to create a user-friendly experience that would appeal to a broad demographic. Balancing ease of use and user-friendliness while striving for stability required careful attention and thorough testing.
Despite the difficulties encountered during both the data transformation and front-end development stages, we remained committed to delivering a valuable and accessible web app. Our aim was to reach the widest possible audience, addressing food insecurity in Yolo County and making a positive impact on the lives of many diverse individuals.

Accomplishments that we're proud of

We take pride in several accomplishments that we have achieved throughout the development process:

Successfully transforming complex data into usable information: Overcoming the challenges associated with data transformation, particularly date formatting, was a significant achievement. By leveraging Python's datetime module and employing regex expressions, we effectively cleaned and processed the data, ensuring its compatibility with our React backend.

Creation of a functional and feature-rich frontend: Despite the inherent complexities involved in building a frontend with numerous functionalities, we successfully developed an intuitive and user-friendly interface. Our efforts to make the web app accessible to a wide demographic have allowed us to reach a larger audience and address the issue of food insecurity more effectively.

Delivering a stable web app: Ensuring the stability and reliability of the web app was a top priority for us. Despite the challenges of maintaining stability while prioritizing usability, we dedicated extensive testing and optimization efforts to create a robust and smooth user experience.

Making a positive impact on the community: Our ultimate accomplishment lies in the potential positive impact of Yolo County Food Rescues on the community. By providing crucial information on available free food options, we aim to alleviate food insecurity and foster a healthier and stronger community in Yolo County.

These accomplishments reflect our commitment to addressing the challenges of food insecurity and our dedication to creating a valuable resource for individuals in need.

Fun Fact Actually, our logo was designed by hand by one of our team members Amabel!

What we learned

During the hackathon, one valuable lesson we learned was the importance of using a top-down approach in our development process. We realized this after initially opting for a bottom-up approach, which led to some hilarious and unexpected challenges. It felt like trying to build a house by starting with the roof and realizing we forgot the walls!
In addition to this comical mishap, we gained valuable insights into managing dependencies. We utilized various tools and technologies to bring our vision to life. From Python's powerful datetime module for data processing to React.js for frontend development, each dependency played a crucial role in our project's success.
However, it's worth mentioning the effects of fatigue on individuals during the hackathon. As we pushed ourselves to meet deadlines and overcome obstacles, we experienced the exhaustion that can set in when working on intense and time-sensitive projects. Despite the fatigue, we persevered, learning the importance of pacing ourselves and supporting one another to maintain focus and productivity.

What's next for Yolo County Food Rescues

The journey for Yolo County Food Rescues doesn't end here. We are committed to further enhancing the platform by adding more features and functionality to better serve our community. Our goal is to make it an even more comprehensive resource for accessing free food options in Yolo County.

In order to reach a wider audience, we would love to collaborate with organizations such as Yolo County Health and Human Services (HHS) and UC Davis. By partnering with these institutions, we aim to raise awareness about Yolo County Food Rescues among a diverse range of individuals. Expanding our reach will help ensure that more people, regardless of their background, have access to this vital resource, ultimately working towards reducing food insecurity and preventing hunger in our community.

We remain dedicated to the mission of Yolo County Food Rescues, continuously seeking opportunities to make a positive impact and create a healthier, more food-secure environment for everyone in Yolo County.
",https://github.com/GavinLang9/HackDavis_2023,https://www.youtube.com/shorts/tTQt4OCDnMg,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design","python, json, csv, natural-language-processing, react, sqlite, flask, css, figma",Naveed Ahmed,Sekender,sekendernaveed1@gmail.com,,Yes,UC Davis,"During the course of the project, we engaged in a range of technology-related activities to develop and improve Yolo County Food Rescues. We started by gathering data from open-source online platforms, extracting relevant information, and formatting it into a usable CSV file. This process involved utilizing Python and leveraging its datetime module to handle date formatting and employing regex expressions to clean and refine the data.

To create the user interface (UI) for our web app, we utilized React.js, a powerful JavaScript library known for its component-based approach. This allowed us to build a visually appealing and interactive frontend that enhances the user experience. Additionally, we leveraged Flask, a micro web framework, to facilitate data transfer between the frontend and backend of our application.

CSS and HTML played a crucial role in styling and structuring the website, ensuring a polished and professional appearance. We also employed SQLite, a lightweight and efficient relational database management system, for data management purposes.

Throughout the project, we embraced a collaborative and iterative approach, constantly refining and improving our technology stack to meet the needs of our users. Our experiences during this period have provided us with valuable insights and hands-on experience in data processing, frontend development, and database management.","",University of California - Davis,3,Sukhpreet,Aulakh,saaulakh@ucdavis.edu,Amabel,Gale,avgale@ucdavis.edu,Gavin,Lang,gclang@ucdavis.edu
Aggie Reuse Inventory,106,https://hackdavis2023.devpost.com/submissions/412839-aggie-reuse-inventory,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:00:41,"Inspiration

The Aggie Reuse store diverts over 1000lbs of clothing waste every quarter and its growing constantly. We wanted to create a way for the store to effectively monitor their inventory.

What it does

It is a simple UI that connects to a Mongo Database to store logs for the many transactions the store processes every day.

How we built it

For our MVP we built an HTML page (with JS) and connected it to a python backend with flask. The python script managed the interactions with MongoDB Atlas.

Challenges we ran into

We ran into hurdles developing an operable front end since we previously had no experience with javascript or more specifically react.js. We ended up simplifying the process by going with an html/js front end from scratch. Another substantial problem we faced was integrating the front with the back with the biggest problem being SOP when the preflight requests were going through.

Accomplishments that we're proud of

We are proud of finally figuring out how to integrate the front and back end with real-time updates. We are also proud of connecting to MongoDB because it is our first time accessing a cloud-based database of this type. Most importantly, we are grateful for the opportunity to support our local community through the promotion of responsible consumption and production, which is part of the 17 Sustainable Development Goals (SDGs) to address shared socioeconomic challenges. 

What we learned

We learned a lot about designing an interface with the purpose of solving the user's needs. While it seems obvious, it's important not to overthink it, and the simplest interfaces can often be the most important.

What's next for Aggie Reuse Inventory

The first order of business is to implement the user-friendly UI we demoed with Figma. Next, a specific requirement by the aggie reuse team, we will finish the analytics page with relevant info to the staff.
",https://github.com/nithinsenthil/BOMBOCLAAT.git,,"Best Use of MongoDB Atlas, Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Aggie Reuse Store Hack","javascript, json, html, python, mongodb, css, github",Nithin,Senthil,nithin020304@gmail.com,,No,University of California Davis,"MongoDB was perfect, very easy to use.","",University of California - Davis,2,Pearl,Vishen,pvishen@ucdavis.edu,Hannah,Wen,lihwen@ucdavis.edu
Rural Reach,68,https://hackdavis2023.devpost.com/submissions/412840-rural-reach,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:01:08,"Inspiration

Having first hand witnessed the difficulties and the marginalization experienced by kids living in rural areas, especially in developing countries such as India, I felt the need to use the paradigm in the distribution of information as an opportunity to provide accessible education to the members of such populations, who often lack access to stable internet connection and therefore miss out on valuable knowledge available on the internet.

What it does

A fully offline fullstack app that uses context specific cloud trained GPT models, available as local deployments through a local fastAPI server. 

How we built it

using Electron and React for the frontend, HuggingFace Transformers for the pre-trained GPT models along with Azure Databricks for fine tuning of these models on custom data. The model is made available via a connection to a FastAPI server. 

Challenges we ran into

testing different frameworks such as Ray and DeepSpeed for loading and training of the transformer models before settling on azure databricks. 

Accomplishments that we're proud of

Developing a functional end to end software that has the potential to provide real value to its users.

What we learned

deploying a fully offline app and the process of downloading pretrained models and training them.

What's next for Rural Reach

More specific fine-tuning of different models with richer datasets, using a more powerful model and better computational resources for faster training. Multi-language support for 
",https://github.com/amogh-opsverse/RuralMind,,"Best Use of Microsoft Cloud for Your Community, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Karim Majdi Abou Najm Memorial Prize for Technical Complexity","fastapi, huggingface, react, electron, azure, databricks, three.js",Amogh,Prakash,amoghshiv99@gmail.com,,Yes,Cal Poly Pomona,learned a ton!,n/a,California State Polytechnic University - Pomona,0
Code Red,73,https://hackdavis2023.devpost.com/submissions/412842-code-red,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:01:59,"Inspiration

The inspiration behind ""Code Red"" is to provide a mobile application that assists women in managing their menstrual cycles and addresses emergency needs for menstrual products. The app aims to create a supportive community where women can discreetly communicate their urgent requirements for menstrual products and find assistance from others willing to share their spare products.

What it does

""Code Red"" provides functionality for:


Emergency requests for menstrual products: Users can create requests for menstrual products, specifying the type of product needed and the urgency level.
Nearby users willing to share: The app connects with nearby users who have indicated their willingness to share spare menstrual products, facilitating a community-based support system.
In-app messaging platform: The app provides an anonymous and secure in-app messaging platform, allowing users to communicate with each other regarding the requests and potential product sharing.
Product availability notifications: Users receive notifications about the availability of requested menstrual products, helping them find the needed items more efficiently.
User reviews and ratings: The app allows users to provide feedback and rate their experiences with product sharing, promoting transparency and accountability within the community.
Privacy and security measures: The app prioritizes the privacy and security of users' personal information, ensuring that all communications and interactions are protected.


How we built it

The ""Code Red"" app can be built using the following technical components:


Mobile App Development: The app was built using the cross-platform framework Xamarin, enabling development for both iOS and Android platforms.
Backend Development: The backend was developed using the framework ASP.NET Core, implementing secure user authentication, profile management, and database management.
Database Management: The database was planned to be done through Appwrite API endpoints.


Challenges we ran into

During the development of ""Code Red,"" some potential challenges could include:


Authenticating with Appwrite API to perform CRUD operation on our database instance.
Verifying with OAuth API to provide seamless login functionality for users.
Ensuring user privacy and data security while facilitating anonymous communication.
Implementing an efficient matching algorithm to connect users with available product providers nearby.


Accomplishments that we're proud of

Some potential accomplishments that the team could be proud of regarding ""Code Red"" include:


Creating a platform that addresses the urgent needs of women during their menstrual cycles and fosters a supportive community.
Developing a secure and anonymous messaging platform that enables open discussions and coordination of product sharing.
Fostering accessibility by providing cross-platform support of our application (iOS and Android).


What we learned

While working on ""Code Red,"" the team might have learned several valuable lessons, such as:


The importance of user privacy and data security in a sensitive app like this.
The challenges and considerations involved in building a community-driven platform with features like emergency requests and discreet sharing.
The technical aspects of integrating location services and ensuring user anonymity.
The significance of creating an intuitive and user-friendly interface that caters to the target audience's needs.


What's next for Code Red

For the future of ""Code Red,"" some potential next steps could include:


Continuously improving user safety measures and implementing user feedback to enhance the app's security and reliability.
Expanding the app's availability to more regions and countries to reach a wider user base.
Collaborating with menstrual product manufacturers or suppliers to ensure a steady supply of emergency products.
Integrating additional features based on user feedback, such as personalized recommendations for menstrual products, educational resources, or mental health support related to menstrual cycles.
Conducting research and leveraging advancements in technology or data analytics to enhance the accuracy of cycle tracking and prediction algorithms.
Partnering with relevant organizations or nonprofits to support initiatives addressing menstrual health and hygiene on a broader scale.
Connect with payment processing service to facilitate financial transactions between users.
Implement a rating system to phase out unreliable suppliers.

",https://github.com/anish-kondepudi/CodeRed,,"Most Creative Use of GitHub, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Best Healthcare Hack, Most Creative Hack","c#, xamarin, appwrite, oauth, .net, xaml",Mihika,Krishna,krishna.mihika@gmail.com,,Yes,"University of California, Davis","We developed our cross platform application using Xamarin Forms in C#. We tried to authenticate with OAuth and Appwrite. These were extremely difficult to work with, especially Appwrite with its lack of documentation for C# development.","",University of California - Davis,1,Anish,Kondepudi,anish.kondepudi@gmail.com
Campus Connected,7,https://hackdavis2023.devpost.com/submissions/412846-campus-connected,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:05:15,"Inspiration

In the month of April 2023, the city of Davis, California faced an unfathomable event: the serial stabbings that took the lives from two of our beloved community members. Fear was beaming from students on campus, who had no parental protection to help guide them through this rough time. Some professors were accommodating; however, some weren't in the slightest. Team member Michael's enzyme professor denied his request asking for a class-wide extension on their homework assignment during the time when the killer had not been detained and was still lingering in the city. Perhaps, if there was a way for other students to express their agreement with Michael, the professor may have granted that desired extension. The students were stuck navigating a stressful time with a stressful assignment.

According to the 2021 UC Davis Student Health and Well-Being Data, the academic performance of nearly half of all UC Davis students are negatively impacted by stress and anxiety.
1 in 3 UC Davis students are experiencing psychological distress.
Along with the feelings impacting academic success, the frequency of psychological distress highlights the immediate need for support and resources for the UC Davis community. Our app will help those closed off due to minimal mental well-being to connect with their professors, resulting in more extensions and academic flexibility, thus decreasing feelings of stress and anxiety.

What it does

Professors and campus administration (including ASUCD officials) can begin links (our term for making a post) that connect the community, one interaction at a time. Active students at the university can anonymously interact with links through sliders, multi-select, emoji reactions, or multiple choice options. Professors can ask students to rate specific lectures, homework assignments, exams, and deadlines. Administrators can poll students for feedback on campus organizations, legislations, and processes.

In the recent ASUCD elections, the student-run team has struggled in receiving voter participation from the campus community. One important measure, the Green Initiative Fund, has been distributing money to student sustainability projects for years. Due to the lack of voter participation, the initiative dissolved, which threatens many projects like the UC Davis Sheepmowers. The Sheepmowers provide an important mental wellbeing break in the middle of a stressful day for students, faculty, and staff. They have become a CRUCIAL part of the Davis community due to their benefits on mental health.

The benefits of the UC Davis Sheepmowers are many:


decrease reliance on fuel for machinery and labor reductions
enhance soil nutrition and promote carbon sequestration from the atmosphere
encourage UC Davis affiliates to get fresh air and sunlight
promote community building and community interactions
alleviate symptoms of anxiety or of academic stressors


Without TGIF, the Sheepmowers can not function at maximum capacity. We hope that with the simplicity of downloading an app as opposed to having to navigate through multiple websites, we can help increase the voter participation across campus and help maintain measures like TGIF.

There are a handful of students who have introverted personalities or tendencies, and another handful battling mental health issues like depression and anxiety. These qualities have shown to discourage affected people from immersing themselves into social settings, decreasing their likelihood to communicate with their professors or school officials. With the anonymity and simplicity of our app, we hope to encourage these populations to provide feedback to those they may not regularly communicate with.

How we built it

We built our project using ReTool, an easy-to-use GUI tool that allows us to drag and drop our design and implement a backend to store user data and posts in.

Challenges we ran into

With only one programmer who had little experience in the field of SQL and app development, it took a while for us to get on our feet at the beginning of the hackathon. We however saw this as a learning opportunity and have taken a lot away from the development process.

Accomplishments that we're proud of

Compared to the end of quarter course evaluations, our app would provide immediate feedback to course instructors, allowing for prompt changes to assist the well-being and stress levels of the students.

Due to the anonymity and accessibility features of our app, our project matches with the UN's Sustainable Development Goal of Reduced Inequalities. The mental health benefits from using our app also match with the goal of Good Health, as anxiety tends to increase risk of ""coronary heart disease, congestive heart failure, stroke, fatal ventricular arrhythmias, and sudden cardiac death"" (Olafiranye, et al.), which our application will impede.

Students can view a graph of responses based on how other students responded to links created by professors or campus officials. This feature increases the digestibility of information, thus increasing the accessibility towards understanding the data.

What we learned

We learned a lot more about 3rd-party app development and tying together many tools like JavaScript and SQL to make a finished product. We also learned how to use our interdisciplinary experiences to delegate tasks relative to each of our abilities. Furthermore, we learned about the intersection of public health and computer science.

What's next for Campus Connected

First off, we plan on expanding our application to be user-friendly for ALL college campuses in the United States of America. Looking at mental health statistics from other campuses, we see that our project can be useful elsewhere. For example, the University of Michigan reports that in the 2021-2022 academic year, 44% of students were experiencing depression and 37% of students were experiencing anxiety. On top of this, surveys carried out by fortune.com found that over 40% of students across the United States were battling some form of anxiety. The National Health Interview Survey estimates that 12% of U.S. adults were experiencing some form of worry, nervousness, or anxiety in 2022. This data comes of concern as over half of the adults in the United States attend college (Forbes), and a peer-reviewed article published in the National Library of Medicine has found that ""high-anxious individuals are more likely to avoid such social interactions as communicating with strangers"" (Wu, et al.) A healthy learning environment, just like a healthy relationship, requires communication between the students and professors to cater learning to maximize effectiveness and efficiency in learning and understanding course content. Stress and anxiety hinder the establishment of ""a sense of belonging, and being cared for, valued, and supported"" (CDC), quickly transforming academics into a mental burden.

We hope to form a team that focuses on campus partnership to aid in the registration process and promotional process from campus-to-campus.

As time did not allow, we were unable to add a slider and multiple choice feature to our project. We also would have liked to add more customization features to increase accessibility such as different font sizes, themes, colors, or layouts.
",https://kwpickle.retool.com/mobile/apps/Campus%20Connected,,"Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Most Creative Hack, Best Use of Retool",retool,Michael,Tsortos,mtsortos@gmail.com,,No,UC Davis,.,"",University of California - Davis,1,Kyle,Pickle,kwpickle@ucdavis.edu
Aggie Tracker,43,https://hackdavis2023.devpost.com/submissions/412847-aggie-tracker,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:06:00,"Inspiration

The dining halls have such a variety of food that it is hard to remember the health facts for all the foods. For many students, the dining hall food makes up most of their yearly meals. Students should have a stronger view of their health as they eat at the dining hall and thus Aggie Tracker was born.

What it does

The app allows students to select their meals as they are eating and it will give them information about the nutrition of those meals. This allows students to have a clearer idea of what they are putting in their bodies and allows them to take control of their own health.

How we built it

The app uses the information web-scraped from the dining hall into a database websites in order to display the macros for each food item. This saves students the hassle of having to go to the website itself and have all the food knowledge in their pocket. The mongodb database is the backbone of the app as it holds all the information on each food item. 

Challenges we ran into

Accomplishments that we're proud of

We were able to create a fitness and health food tracker app in less than a day and we believe that many students on campus can actually see something like this as useful. There is a severe clarity of information for the food we consume on campus and we were able to create an app that gives students the power to take their health into their own hands.

What we learned

We learned how to utilize databases to store massive amounts of data and to take that data and make it useful in a way that benefits students. We also learned how to create apps on IOS and got experience working with UI design as we coded in Swift.

What's next for Aggie Tracker

The UI is not perfect for the app and it can be a lot prettier. There are also extra features we wanted to implement such as adding other schools into the system so that college students around the nation could have a one-stop location for being able to track calories without having to look all over the internet and pay for apps that do the exact same thing as Aggie Tracker.
",https://github.com/rahulb1218/aggieTracks,,"Best Use of MongoDB Atlas, Most Creative Use of GitHub, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Open Data Hack, sponsored by UC Davis DataLab, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Best Healthcare Hack, Most Creative Hack","python, swift, mongodb",Jassan,Dhami,jassandhami@gmail.com,,Yes,"UC Davis, Yuba Community College",The MongoDB database was the main technology we used during the event. It was our first time using it and we noticed that the experience was very user-friendly.,MooMooMunch,"UC Davis, University of California - Davis",3,Arjun,Takhar,arjuntakhar5@gmail.com,rahulb1218,Budhiraja,rahulb1218@gmail.com,asidhu0,Sidhu,asidhu359@gmail.com
Aggie Reuse Inventory,60,https://hackdavis2023.devpost.com/submissions/412848-aggie-reuse-inventory,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:06:05,"Inspiration

We were inspired by the short presentation that Aggie Reuse Store gave at the opening ceremony. We wanted to help them create an easy way to track their inventory so that they can move on from using a simple spreadsheet.

What it does

This web app tracks the store's current inventory. It also sorts items by category and type. It includes adding and removing functions that adds and removes items and an analytics page to check inventory trends.

How we built it

We used HTML, CSS, JS, MongoDB, and Microsoft Azure.

Challenges we ran into

One main challenge we faced was figuring out how to make the UI as simple and user friendly as possible. We also had to think critically about the different use cases of this web app and how to better suit this web app for the Aggie Reuse Store's demands.

Accomplishments that we're proud of

We're proud of being able to give a local non profit organization a way to make their daily tasks easier and more efficient.

What we learned

We learned more about how to create a fullstack web app. We also learned more about what it takes to create a useful product to meet the demands of an organization.

What's next for Aggie Reuse Inventory

For the future, we would like to improve the UI and make the analytics graph and transaction data more comprehensive
",https://btom13.github.io/hackdavis/,,"Best Use of MongoDB Atlas, Best Use of Microsoft Cloud for Your Community, Best Aggie Reuse Store Hack","javascript, css, html, mongodb, azure",Anthony,Tan-Andia,attanandia@ucdavis.edu,,Yes,"University of California, Davis",One trouble that we had this weekend was the wifi. Some of our team members could not connect to the wifi at all so we had to move to a different location,"",University of California - Davis,2,Brian,Tom,batom@ucdavis.edu,Xinyi,Li,xwyli@ucdavis.edu
Study Buddy,98,https://hackdavis2023.devpost.com/submissions/412849-study-buddy,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:06:09,"Inspiration

According to the American College Health Association (ACHA),  63% of college students feel ""very lonely"".  A little bit of help goes a long way--making friends and finding studying partners can be extremely difficult. We wanted to foster more connections in classes through an app. 

What it does

This app will collect inputted user data and match individuals with common information. The connections are when and where individuals study, majors, career interests, and current classes. It will suggest others' profiles which the user can directly message through the app.

How we built it

We used JavaScript within the React Native framework.

Challenges we ran into

Our hardest challenge was learning JavaScript within React Native and writing an app as beginners. Specifically, learning how to store data was difficult.

Accomplishments that we're proud of

We are proud of materializing a draft of our ambitious idea. We are also proud of having a tickle of understanding the process of how a product is created.

What we learned

We learned the basics about the tools.

What's next for Study Buddy

We intend to continue our current direction for the app--create a matching feature.
",https://github.com/rs0919/hackDavis_2023.git,,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Most Creative Hack","javascript, react-native",Rohith,Saravana,rsaravana@ucdavis.edu,,Yes,UC Davis,We had a bit of confusion due to the internet issues.,"",University of California - Davis,1,Jonathan,Chang,2017jonathanchang@gmail.com
Munch.AI,67,https://hackdavis2023.devpost.com/submissions/412850-munch-ai,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:06:11,"Introduction
Hello esteemed judges, we are a team of passionate foodies who are excited to present our groundbreaking project - [Munch.AI]. We believe that cooking should be easy, fun, and accessible to everyone, no matter their dietary needs or budget.

The Problem
As college students, we understand the struggles of finding healthy and affordable meals that cater to our busy schedules and unique dietary needs. We also recognize the challenges faced by individuals with food allergies or intolerances, who often struggle to find recipes that meet their needs. Moreover, the lack of diversity and availability of nutritious options in dining halls and restaurants can lead to unhealthy eating habits and obesity among students.

The Solution
That's where [Munch.AI] comes in. Our AI-powered website generates new and exciting recipes that cater to your taste buds and dietary needs. With [Munch.AI], you can discover delicious and healthy meals that fit your busy lifestyle and budget. We carefully approach the social issue of unhealthy eating habits by providing a platform that makes cooking easy, fun, and accessible to everyone. By utilizing seasonal ingredients and supporting local farmers, we also promote a more sustainable and equitable food system.
The Impact
We believe that everyone should have access to delicious, healthy, and affordable meals that cater to their unique dietary needs and restrictions. By addressing the social issue of unhealthy eating habits among students, we hope that [Munch.AI] can be an alternative, innovative way of tackling this problem.

What if we had more time?
If we had more time, we would create a cleaner high-fidelity interface for desktop, tablet, and mobile devices. We want to make sure that [Munch.AI] is accessible to everyone, no matter what device they use.

The Struggles
As first-year students competing in our first-ever hackathon comprised of an international team from UCSD, we faced internal conflicts of confusion and simply doubt. However, we persevered and overcame these challenges to create a highly technical and impactful project. We are excited to present [Munch.AI]( to the judges today and share our passion for creating a more sustainable and equitable food system.

What we Learned
Besides the technical knowledge coming into his hackathon with no experience in web development from any of us, I think the most valuable experience we learned today was how to navigate unfamiliar territory together. Coding and development is an intimidating field, but we managed to muster up the courage of asking for guidance and taking every error as a learning moment. There were times when we raised our voices in passion, but in the end, we understand our common goal of creating projects for a good cause empowers us. By working together, we can empower our community to make healthier and more sustainable food choices. Thank you for considering [Munch.AI] as a contender for this hackathon.
",https://github.com/BlackDeath12/Hackaton/tree/main/FinalProject,,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Design, Best Healthcare Hack","figma, openai, anima, react.js, node.js, html5, css3",Justin,Kim,justinkidding17@gmail.com,,Yes,"University of California, San Diego","The Technology
[Munch.AI] is powered by cutting-edge technology from OpenAI, incorporating complex algorithms to generate recipes that are tailored to your unique needs. Our website also incorporates front-end micro interactivity to create a seamless and enjoyable user experience.

Our back-end team leveraged the power of OpenAI's GPT (Generative Pre-trained Transformer) technology to generate unique and healthy recipes. while also being able to answer questions about cooking or replacements. To ensure a seamless user experience, we utilized ReactJS and NodeJS to create a responsive and interactive front-end interface.

Our front-end team focused on parallax effect and dynamic user flows, with high fidelity interaction and micro-interactions to suggest users have a pleasant seamless experience. We used design software such as Figma, Anima, and a ton of plugins to showcase our technical skills throughout this project.","",University of California - San Diego,3,Tsering,Wangyal,tsering.w1029@gmail.com,Leonel,Montoya,leonelmontoya12@gmail.com,Saturn,,sardor.sobirov07@gmail.com
Davis Adventure Game,54,https://hackdavis2023.devpost.com/submissions/412856-davis-adventure-game,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:09:42,"Inspiration

This project was inspired by our desire to build a game that would encourage folks to go outside and appreciate our beautiful campus. We decided to integrate this idea with a tour-like game that would help incoming freshmen and transfers navigate our huge campus! 

What it does

This website is set up in a series of missions that require you to solve a puzzle to unlock the next one. On the final page, you defeat the villainous fog that has been taking over campus. 

How we built it

We used Hugo to build the website while creating our own html pages for each mission. Each mission is guided by individual storylines as well as an overarching plot of a mystical, invisible fog taking over the UC Davis campus. 

Challenges we ran into

We were often limited by our knowledge of html and building websites. Through lots of research, as well as trial and error we were able to overcome these challenges and better understand web development. 

Accomplishments that we're proud of

We are very proud that we were able to create a website from scratch and host it online. Managing the flow of the game and keeping each mission engaging and creative as possible was very important to showcase our creativity. 

What we learned

We learned about the interactions between html, javascript, and css. We also learned how web development can be an important tool to have in our toolbox as bioinformaticians. We hope these skills will help us in the future with building software tools for biologists.

What's next for Trouble In Moo Town

We hope to add more missions and add more fun and engaging games plus side quests to encourage further campus exploration.
","https://saisuresh2.github.io/davis_adventure_game/, https://github.com/saisuresh2/davis_adventure_game",,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Most Creative Hack","hugo, html, css, javascript",Meghana,Manepalli,mmanepalli@ucdavis.edu,,Yes,UC Davis,Hugo was very useful but not always beginner friendly,"","UC Davis, University of California - Davis",3,Sai,Suresh,saisanjanaa1@gmail.com,Jenna,Noueihed,jfnoueihed@ucdavis.edu,Claire,Hsieh,clhsieh@ucdavis.edu
Aggie Reuse Database App,88,https://hackdavis2023.devpost.com/submissions/412857-aggie-reuse-database-app,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:10:03,"Inspiration - The prompt sounded like a very important and obvious problem. We were flooded by ideas of how we could help the store but this app is what we finally settled on.

What it does - Lets donors upload photos of their donations before hand, reducing the workload of volunteers, while also advertising the clothes available at the thrift store. At the same time, it also helps the store keep track of their inventory easily.

How we built it - We used Figma to design the app. Then, we made the app in Android Studio with Java, while using MongoDB Atlas to manage the database of the inventory.

Challenges we ran into - MongoDB and Figma were both completely new concepts to us. We also took a long time to finalise upon an idea. Our project was a big race against time.

Accomplishments that we're proud of - Learning two new technologies while also connecting front end to the back end database in a relatively low amount of time is something we are very proud of.

What we learned - Figma, MongoDB Atlas, and inventory management and tracking. Also gained further insights into front-end design.

What's next for Aggie Reuse Database App - Making it more efficient, and building a database strong enough for expanding the store.
",https://github.com/aaryanmohta04/HackDavis2023,https://youtu.be/BEfkCFbgIJs,"Best Use of MongoDB Atlas, Best Beginner Hack, Best Design, Best Aggie Reuse Store Hack","java, android-studio, mongodb, vs-code, figma",varun22,Thakkar,varunthakkar31@gmail.com,,No,UC Davis,"I liked the technologies, especially MongoDB which was completely new but ended up being very important to our project.","",University of California - Davis,3,Simon,Gooden,sdgooden@ucdavis.edu,Maanit Himanshu,Shah,mshah@ucdavis.edu,Aaryan,Mohta,asmohta@ucdavis.edu
Storefront,12,https://hackdavis2023.devpost.com/submissions/412858-storefront,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:10:24,"Inspiration

This project was built to make an easy way to manage and analyze data and inventory, two things that services on campus such as the Aggie Reuse Store and the Pantry both need to do at all times.

What it does

The UI allows staff to track inventory and sift through a paginated list of items in stock. Staff are able to track what is in stock and what goes out of stock through the page and analyze data such as when the most people visit the storefront and keep track of the most popular hours and days of the week. The provided tools give easy access to pre-analyzed data that allow the staff to make informed decisions over changing opening hours and what items are popular or unpopular.

How we built it

The project is made with a Django backend backed by a MongoDB database for persisting activity data, inventory items, and crunching the latest numbers for the charts on the UI. The frontend is written with React and NextJS and uses ChartJS to visualize data with some additional modifications to add guides and easy navigation. The appearances are created with the aid of TailwindCSS alongside copious amounts of normal vanilla CSS for Javascript-less animations that run smoothly.

Challenges we ran into

Creating animations and timing them correctly with purely CSS proved to be a more difficult task than it appeared. It resulted in a stunning visual but ate away at a lot of time I could have spent working on the API design and integration. As a single person, this results in a noticeable improvement in the UI of the frontend but meant that there were some features I was unable to add.

Accomplishments that we're proud of

I initially started this as it is a project I've been meaning to work on for the past couple months. I wanted to see how far I could go with my current skills alone and I'm proud of what I was able to accomplish in this short time frame. An especially large highlight is the CSS animation used for the landing page that took up over 200 lines of pure CSS and a lot of timing changes and pushed what I knew about CSS to get the elements to do what I intended.

What we learned

I learned today of the limitations of working alone and methods to improve productivity given a tight time constraint. Planning early with a smaller scale idea and building it up to what I thought of at the beginning is a great place to start and while I accomplished a lot today, I could have created a lot more with some better planning.

What's next for Aggie Reuse - Storefront

I would like to finish up the codebase for the project. This was a project that I have wanted to complete for months and now I have a solid start to it. Once it is completed, I can think of some places I have the ability to implement parts of the work into for beneficial results as I initially selected my tech stack for compatibility in mind!
",https://github.com/malee31/Storefront/settings,,"Best Use of MongoDB Atlas, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Best Aggie Reuse Store Hack","nextjs, react, tailwind, django, mongodb, css3, css, html5, html, storybook",Marvin,Lee,malee31@s.sfusd.edu,,Yes,UC Davis,I used GitHub and MongoDB as usual. GitHub was pleasant and MongoDB was a bit slower to load than I would have liked,"","",0
N/A,51,https://hackdavis2023.devpost.com/submissions/412859-n-a,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:11:44,"N/A
","",,"",n/a,deleted,deleted,deleted+7946244@devpost.com,,No,N/A,N/A,N/A,San Joaquin Delta College,1,amberraeber,Raeber,amberraeber@gmail.com
Bloom,31,https://hackdavis2023.devpost.com/submissions/412860-bloom,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:13:17,"Inspiration

simple day draws a lot of inspiration from another Google Extension called Momentum, a Google Extension that replaces the new tab page with a personal dashboard. We noticed the lack of involvement that students felt in our community, because they aren't aware of the events that interests them. We were inspired to create a tool that enables UC Davis students or anyone in general to be notified of important events and stay organized with their task. Hence making their days simpler.

What it does

Bloom is a web app that can be accessed on any browser. It displays the current pollen levels in the air coming from grass, trees, and weeds. It also displays normal weather features such as the temperature, wind speed, and weather condition. From the variable conditions, it calculates the severity of the average impact of allergies on people and displays a score and rating to the user. Along with this, it cycles through tips and recommended actions the user can to to mitigate allergy symptoms. This web app uses the user's current location and several APIs to pull information regarding pollen levels and weather conditions.

How we built it

We started brainstorming and prototyping on Figma. We each created a few user sketches and prototypes. Then we combined our ideas to formulate a final low-fi design. After this we split into teams of developers and designers. The developers used Retool and JavaScript to develop the web application. Meanwhile, the designers continued to design the high-fi design and worked on the css.

You can view the prototypes here: 
https://www.figma.com/file/jdRLqtA0LRoWmiKPhla4it/HackDavis-2023?type=design&node-id=0%3A1&t=KgkmvcCMeZvmVAwA-1

Challenges we ran into

One of the major challenges we ran into was adding the weather and quote api into our extension. We had to resolve issues with the JavaScript files conflicting with each other.

Accomplishments that we're proud of

We're proud to have finished within the limited amount of time and also laid out a foundational idea for a project we will continue to pursue in.

What we learned

Initially, we struggled to compromise on a design but we've learned to work together as a team and agree upon our differences. We divided the workload into the developer and designer teams, and each of us learned something new from the project.

What's next for Bloom

We hope to implement additional customization functions for users, such as a personal class schedule view and different themes (such as dark mode and other color choices). And we would hope to implement an automatic process of getting the important dates.
",https://pollinator.retool.com/apps/381fce94-f74a-11ed-ae69-d334f431230a/Bloom,,Best Use of Retool,"javascript, retool, weatherapi, pollenapi",Calvin,Chen,calvinchen345@gmail.com,,Yes,"University of California, Davis",We had a fantastic learning experience using Retool to build our project. Retool's ready-made templates and building blocks greatly facilitated the process of quickly constructing a user interface for our web application. This allowed us to spend more time on our core features which were getting our pollen data analyzer the necessary data to work. We also worked with Figma a lot to design our initial prototypes and with our amazing designer we were able to quickly come up with a design for the developers to implement,"",University of California - Davis,2,Newland,Luu,newland1461@gmail.com,jessicatrans,,jgtrans@ucdavis.edu
CySafe,72,https://hackdavis2023.devpost.com/submissions/412864-cysafe,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:15:21,"Inspiration

Being in a town where biking is so prevalent along with bike accidents made us wonder what the primary reasons for those crashes were. The main pain points were lighting, lack of awareness of surrounds, and delayed assistance.

What it does

We have 4 main features: blinkers, brake lights, a car tracking system, and crash detection system. The blinker lights are on either side of the handlebars and turn on with a button next to them. To turn them off, simply re-press the button. As for the brake light, the button is located on the right brake handle so that when you brake, you're also pressing the button. Holding down the button turns on the back brake light while releasing it turns the light off. The car tracking system utilizes a camera that is secured to your helmet to track cars coming from behind you. Once a car is detected, a light in your peripheral will be lit to let you know. The crash detection system uses a piezo vibration sensor to detect if you have crash through a large force/vibration. If a crash is detected, a text will be sent to emergency services saying ""Bike crash detected. Emergency services in need.""

How we built it

The blinker and brake lights were built using an Arduino Uno. The components were LEDs and resistors. The crash detection system was built using both an Arduino Uno and Raspberry Pi. The Arduino Uno is connected to a piezo vibration sensor which detects if a large vibration/force breaches a certain benchmark. If it does, the Arduino will communicate with the Raspberry Pi to send a text out to emergency services with our custom message. The webcam detector is programmed with Tensorflow and OpenCV installed onto a raspberry pi 4. This allowed us to program a user interface that would be able to identify what is in the image in real-time. We then took this information and powered ON the LED light whenever it detected a reasonably close car/vehicle near the biker. A 3D model of an example enclosure and mount was made using SolidWorks to show how the Arduino, for example, was to be mounted onto the bike frame. However, due to the long printing time and our lack of time, we were unable to print it out. So as a substitute, we prototyped the enclosures using cardboard.

Challenges we ran into

We ran into a challenge for each feature as we were building the four core features. When building the car detection system, we did not expect how long it took to download all the needed libraries, which took almost 4 hours downloading onto a raspberry pi alone. When building the collision detection, we tried using an accelerometer. However, the component was unable to connect with Raspberry Pi, and the Arduino was unable to connect to the internet.  Hence our final solution, which uses a piezo vibration sensor that connects the Raspberry Pi with the Arduino

Accomplishments that we're proud of

We're proud of being able to incorporate a good amount of hardware and software together. We also enjoyed using both the Arduino and Raspberry PI together.

What we learned

We learned that some simple tasks may take longer than expected, and some difficult tasks may just miraculously work. 

What's next for CySafe

Our next steps are to engineer better hardware so it would function as a clip-on mount onto both the helmet and the bicycle. The device would be weatherproof and lightweight. We also plan on adding a GPS feature for lost or stolen bicycles. Lastly, the camera system would be able to utilize image tracking to its full potential to only light up the LED within a tighter threshold.
",https://www.tinkercad.com/things/5XF2hcb4guc-hackdavis-blinkerbrake-lights/editel?sharecode=xHOK0mY-7Zg3j00y5tti9U5ftEqexKdoAhqztVVM9iU,https://youtu.be/B7rBdtvDHy4,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Hardware Hack, sponsored by the UC Davis Student Startup Center","arduino, raspberry-pi, solidworks, machine-learning, tinkercad, opencv",Katerina,Rahhal,katerinarahhal@gmail.com,,No,"University of California, Davis; University of California, Irvine",We had a great time building off of what we knew using the various hardware and software. It was very interesting learning how different features interact. Overall a really insightful and memorable experience.,"","",1,Kai,Yu,thekaiyu@gmail.com
AlertMe,21,https://hackdavis2023.devpost.com/submissions/412872-alertme,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:18:40,"Inspiration

The inspiration came from the recent stabbing situation, where students were not notified until they checked their social media. Though 911 had been called minutes after the stabbings, no alerts showed up on PulsePoint or Twitter until hours later. This, on top of other incidents, made us realize the importance of having access to real-time information in such situations. With AlertMe, users are able to view or notify incidents to ensure that everyone is always aware of any potential safety threats nearby.

What it does

AlertMe allows users to report incidents near them so that others can be notified of these events and be safe. Users will be able to view a feed in live time that updates whenever there is an incident that is reported near them. They will also be able to upvote or downvote a reported incident so that others can verify if the report is accurate. This helps people avoid dangerous incidents in realtime, without relying on user-generated content. In an emergency, safety is the priority; information from social media apps may not always be an option.

How we built it

Since we were building a phone application, we built AlertMe using React Native, creating custom components along the way (alerts, posts, feed, etc.). To get the user location and the map onto the screen, we used Google Maps API and the Geolocation API.

Challenges we ran into

Setting up the application was difficult as we had never used React Native before, and it took us a couple of hours to just get a simple screen to show on our phones. Additionally, we had trouble getting the incident data from the Map screen onto the Feed screen since we had trouble passing props to the Feed screen. Another challenge we had was getting the street name of an incident that was reported using just the latitude and longitude from the Geolocation API. We were able to resolve this issue by using the reverseGeocodeAsync API that gets the location name by using the latitude and longitude.

Accomplishments that we're proud of

We were able the make the whole application functional within 24 hours, which included features such as viewing the feed in live time and adding incidents onto the map for others to see. We are also proud that we contributed to a project that keeps people safe and notified of incidents near them.

What we learned

We learned how to build mobile applications in React Native and use multiple APIs such as Geolocation and Google Maps. Specifically, one concept we learned that was important in our app was getting the current user's location so that it shows their location on the map.

What's next for AlertMe

Our upcoming plans involve significant improvements to the backend, including enabling simultaneous usage by multiple users while providing visibility into each other's pinned locations. We are dedicated to creating distinct pin designs for various incidents, facilitating easier identification of events such as car accidents, robberies, or potential threats to personal safety. 

To ensure the relevance of the displayed incidents, pins will automatically expire after 24 hours from the time of the occurrence. By doing so, users will have access to the most up-to-date and current information regarding incidents in their area.
",https://github.com/subhanbaig209/AlertMe,,"Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","react-native, geolocation-api, google-maps, javascript",Subhan,Baig,subhanbaig209@gmail.com,,Yes,"University of California, Davis",I worked with React Native at this hackathon. It was hard at first to setup as we had to get the application running on our phones but in the end we learned a lot about React Native.,"",University of California - Davis,2,Hashim,Chaudhry,hashim0131@gmail.com,John,Missal,johnmissal10@gmail.com
Inventory Tracking System for Aggie Reuse Store,70,https://hackdavis2023.devpost.com/submissions/412873-inventory-tracking-system-for-aggie-reuse-store,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:18:41,"Inspiration

When we went to go thrift-shopping at the Aggie Reuse Store, we noticed how tedious and time-consuming of a process checking-in and checking-out the items out of the store was.  As CS students, we took it upon ourselves to make the process for the volunteers simpler. Our project aims to reduce the time and effort required for manual data entry, help improve accuracy by minimizing human error, and provide real-time visibility into item availability and stock.

What it does

The website allows user to do two things: Record Donations and Checkout Customers. For recording new stock that come in through donations, our hardware component to capture an image of an item. The image is classified into the clothing categories using a multiclass image classification machine learning algorithm that we trained and is added to the database. For checking out custormers, we offer a carousel of items with a drop-down menu of quantity for category and all categories changed are automatically updated in the database.

How we built it

We started by using a Raspberry Pi with the intention of performing the machine learning, image classification as well as the database management system all hosted on the Pi. We quickly realized that doing all these on the Raspberry Pi would be beyond its capabilities. So, with the absence of an external webcam, we moved to using the Raspberry Pi only to take the photos and then send them to a computer where the local machine will take it into an image classifier that runs on a machine learning model that we trained using TensorFlow Keras and run on a combination of datasets that we collected. While we were building the ML system, we were simultaneously working on the front end systems to take the output for the Image Classification and allow the Volunteer to enter information into their database with ease. We built  this using React JS.
Our Machine learning model has a 55% accuracy on Test Data, and a 95% accuracy rate on Training Data

Challenges we ran into

As beginners, it was hard for us to code complex ML algorithms and design functional web components. We were also unable to implement the backend due to issues with the NextJS server. We also ran into issues with react for routing and navigation. We were also unable to communicate between the ML program and Front End.  We attempted to use Google API for the backend, but were unable to get this to work in the required timeframe. 

Accomplishments that we're proud of

We are proud of what we were able to make in the 24 hours allotted to us, given that it is our first hackathon and we came into this little experience

What we learned

We learned how to setup frontend and backend servers. We learned how to implement multi class image classification algorithms. We also learned to prototype on Figma.

What's next for Inventory Tracking System for Aggie Reuse Store

Finish the Backend, Improve machine learning model by adding more data. combine the front end and back end.
",https://github.com/JayJ104/aggie-reuse,,"Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Hardware Hack, sponsored by the UC Davis Student Startup Center, Best Aggie Reuse Store Hack","javascript, python, machine-learning, image-classification, figma, react, tensorflow",Anjali,Jain,anjjain@ucdavis.edu,,Yes,University of California Davis,Github was extremely easy to use and useful in version control and collaboration,"",University of California - Davis,3,trisha,baadkar,trbaadkar@ucdavis.edu,Sandeep,Reehal,sreehal@ucdavis.edu,Trisha,Baadkar,baadkartrisha@gmail.com
Green Thumbs,22,https://hackdavis2023.devpost.com/submissions/412876-green-thumbs,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:20:18,"Inspiration

Jessica and I are huge fans of mobile games, so our initial thought was to gamify an experience meant to educate users about trees. Inspired by our love for mobile gaming and our passion for environmental conservation, we created Green Thumbs! We wanted to merge our enthusiasm for gaming with the urgent need to raise awareness about the benefits of planting trees and inspire individuals to take action in their own homes and spaces.

What it does

Green Thumbs allows users to plant and purchase trees. Each time a tree is purchased, Green Thumbs provides information and fun facts about the tree. Players can water their trees and generate coins, allowing them to purchase more trees and generate more coins. Furthermore, Green Thumbs provides useful resources, such as articles about how you can create drought friendly landscapes at home, identify invasive plant species, and learn more about Tree Davis. Players can also continue reading about their tree in their ""Collection"". 

How we built it

The both of us initially attempted to use Unity, but we are both intro programmers with no experience in game development. Thus, this project is designed and prototyped purely on Figma but if we had more time we would dedicate time into learning Unity. 

Challenges we ran into

I am a UX designer, so I had no experience designing for games. Jessica had never used Figma before, so we were both figuring things out as the project developed.

Accomplishments that we're proud of

We're so excited about the graphic design. It resembles a fun mobile game, but it is also educational. We put a lot of thought into selecting components, backgrounds, fonts, and colors to create a cohesive mobile game experience.

What we learned

Jessica got a crash course on Figma, and I learned to reference other games while creating Green Thumbs. 

What's next for Green Thumbs

Moving forward, we would develop this project on Unity. We would also add features such as increasing animal biodiversity as more trees are planted.
","https://www.figma.com/proto/kgy44hMo5MJNaXhbX8pRbH/HackDavis-2023---Green-Thumbs?type=design&node-id=30-4450&scaling=scale-down&page-id=0%3A1&starting-point-node-id=22%3A5, https://www.figma.com/file/kgy44hMo5MJNaXhbX8pRbH/HackDavis-2023---Green-Thumbs?type=design&node-id=0%3A1&t=6GBAm2cVcBv2HLZo-1",https://youtu.be/RDrcvJib0mM,Best Design,"figma, adobe-illustrator",Isabel,Shic,shic.isabel@gmail.com,,Yes,"University of California, Davis",We used Figma. The wifi was very slow so we went back home.,"",University of California - Davis,1,Jessica,Bartolome,jessicareesebartolome@gmail.com
Untitled,,"",Draft,Pending,Manage team,05/21/2023 13:20:40,"","",,"","",Jessica,Bartolome,jessicareesebartolome@gmail.com,,"","","","",University of California - Davis,0
Aggie's desktop interface,84,https://hackdavis2023.devpost.com/submissions/412879-aggie-s-desktop-interface,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:22:14,"Inspiration

After talking to Aggie's panel, the color pallet, logo, icons, and decorative elements for design decisions were made based on their current website and stickers design. 

What it does

It solves both of their current issues contain creating inventory and cunting customer footsteps. This design even creates opportunities for tracking what is not reusable and discharge and all on donated items as well.

How we built it

It is created on Adobe XD and open-source design resources

Challenges we ran into

creating user-friendly navigation and arranging data for easy accessibility

Accomplishments that we're proud of

providing growth opportunity

What we learned

creating tables and organizing data

What's next for Aggie's desktop interface

It has lots of room to grow from mobile and tablet design to development after user texting
","",,"","ux/ui, adobe, xd",Saman,Gholami,sgholami@student.sierracollege.edu,,Yes,Sierra College,GitHub,"",Sierra College,0
Fresh Focus AI,,"",Draft,Pending,Project overview,05/21/2023 13:22:49,"","",,"","",Anirudh,Venkatachalam,anirudh.venkat03@gmail.com,,"","","","",University of California - Davis,2,Adityaa,Ravi,adityaaravi@yahoo.com,Manasvini,Narayanan,write2manasvini@gmail.com
Untitled,,"",Draft,Pending,Manage team,05/21/2023 13:23:03,"","",,"","",John,Missal,johnmissal10@gmail.com,,"","","","",University of California - Davis,0
SecureSpark,33,https://hackdavis2023.devpost.com/submissions/412884-securespark,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:24:17,"Inspiration

Everyone wants to build meaningful connections with genuine people. But, often times, we find ourselves hurt all over again. As a result, I wanted to build an app that could help people find trustworthy partners in order to build authentic relationships again.

What it does

The app allows users to friend other users. After friending each other, users can write reviews and give each other a thumbs up or a thumbs down. Their reviews could be based off of whether they believe someone would be a good partner, or if they know this person is genuine and would strive to foster the best relationship with potential partners.

How we built it

I used React-Native to build the front-end.

Challenges we ran into

In 24 hours, I had to create an app by myself, but I ended up persevering and learning a lot!

Accomplishments that we're proud of

I had not done anything before with React-Native, so I am proud that I was able to build an app in 24 hours.

What we learned

I learned how to persevere through obstacles.

What's next for SecureSpark

I would love to implement more features that could help users feel more comfortable when finding potential partners.
",https://github.com/aandrewchen/HackDavis2023.git,,"Best Design, Most Creative Hack","react-native, javascript",Andrew,Chen,andche@ucdavis.edu,,No,"University of California, Davis",I used React-Native for the first time.,"",University of California - Davis,0
SeeFood,113,https://hackdavis2023.devpost.com/submissions/412887-seefood,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:31:21,"Inspiration

Our inspiration comes from a blog that one of our team members recently read about the difficulties and discrimination that disabled and visually impaired people face when using their mobile phones. On the blog site, “Life of a Blind Girl,” author Holly wrote an article called, “How do blind and visually impaired people use a mobile phone?” Holly talks about the struggles and judgment she feels from strangers when they notice her with a phone and ask her if she is faking her disability. Therefore, we wanted to create an innovation that pushes towards normalizing people with visual impairment and disabilities having phones. While there are a lot of features provided by Apple and other mobile providers such as Screen Reader, Zoom, Magnifier, and Display Accommodations, our team aspired to build an application that addressed and assisted in people’s daily lives. 

What it does

SeeFood is an innovative app that uses image classification with a user-friendly interface built on SwiftUI, CoreML, and Figma. Using your smartphone's camera, simply snap a picture of the food in front of you. Leveraging image classification, the app quickly and accurately identifies the food item. It also integrates seamlessly with Apple’s built-in VoiceOver features, providing an audio description of the identified food item, and ensuring accessibility for everyone. 

How we built it

We used CoreML to create an image classification model that identifies various common grocery items. We integrated our app on the SwiftUI in Xcode.

Challenges we ran into

During the development of this project, we encountered several challenges while integrating the backend and frontend. To streamline the workflow, we tried dividing the project into two parts, with one team focusing on the frontend and design aspect and the other on image classification and app implementation. However, as our team members were not previously familiar with the specific software used, we faced difficulties when trying to merge our frontend and backend together. 

Accomplishments that we're proud of

Our commitment and resilience in creating a functional app using software that we had no experience in, such as SwiftUI, CoreML, and Figma previously is something that our team is very proud of. Throughout our hackathon journey this weekend, we were constantly learning and expanding our knowledge on the various platforms and software tools available. 

What we learned

We learned how to utilize software and design tools such as SwiftUI, CoreML, and Figma. We also learned to incorporate existing documentation into our work. 

What's next for SeeFood

Our app has a lot of potential for improvement from its uses to its design. We would like to expand the number of grocery store items our app can identify. We would also like to implement a login feature that keeps track of some of the user’s information, like dietary restrictions or allergies. That way, when they scan food, alerts, and messages can appear to warn them if it contains allergens or other foods they want to avoid. Furthermore, we would like to continue working on our app’s interface to make it more user-friendly for individuals with visual impairments and disabilities. 
",https://github.com/dheeksham/hackdavis23.git,https://youtu.be/0BbnOIZfEZA,"Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Best Healthcare Hack, Most Creative Hack","swift, xcode, coreml, swiftui",Shruthi,Parasa,sparasa@ucdavis.edu,,Yes,"University of California, Davis and University of California, Berkeley","GitHub, SwiftUI, CoreML, Figma","","University of California - Davis, UC Davis",3,Daniela,Vargas,daniela_vargas@berkeley.edu,Nandhana,Selvam,nandhanaselvam@gmail.com,dheeksham,magesh,dheeksha.magesh@gmail.com
Scream Detection AI/ML Model,18,https://hackdavis2023.devpost.com/submissions/412891-scream-detection-ai-ml-model,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:34:06,"Scream_Detection_AI-ML_Model

This program uses a deep-neural network to detect the scream and take immediate actions to send help. 

Table of Contents


Introduction
Features
Usage
Results
Contributing
License


Introduction

The Scream Detection AI/ML Model is an innovative system developed to enhance the safety and security of our college community. The project aims to detect distress calls and screams in real-time, enabling immediate response and providing assistance to individuals in danger. This repository contains the source code and documentation related to the development and evaluation of the AI/ML model.

Features


Accurate detection of distress calls and screams
Real-time response system
Multi-layer perceptron (MLP) model for classification
Support vector machines (SVM) for additional confirmation
Visualizations for performance analysis
Easy integration with specified locations in the community


Usage


Prepare the dataset:
Collect audio samples of distress calls, screams, and background noise.
Organize the samples in the resources folder.
Update the newresources.csv file with the appropriate labels.
Train the AI/ML model:
Run the script to train the multi-layer perceptron model.
The model will be saved as a file for future use.
Evaluate the model:
Run the script to assess the model's performance.
The script generates visualizations, including training loss, accuracy, confusion matrix, audio waveform, spectrogram, and precision-recall curve.
Integration:
Install the model in specified locations within the community for real-time scream detection.
Use the process_file() and svm_process() functions in the code to process audio files and detect distress calls.


Results

The project has demonstrated promising results in accurately detecting distress calls and screams. The AI/ML model achieved high accuracy and has been validated through extensive training and evaluation. The visualizations provide insights into the model's performance, helping assess its effectiveness.







Contributing

Contributions are welcome! If you have any ideas or suggestions to enhance the project, please feel free to open an issue or submit a pull request. Let's collaborate to make our community safer together.

Future Plans

We plan to integrate hardware into our project. 
",https://github.com/Programmer7129/Scream_Detection_AI-ML_Model/tree/main,https://youtu.be/oiVs4YWtUmA,"Most Creative Use of GitHub, Best Beginner Hack, Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Open Data Hack, sponsored by UC Davis DataLab, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","python, react, flask, tensorflow, html, css, javascript",Vedant,Patel,vsxpatel@ucdavis.edu,,Yes,University of California Davis,"Tensorflow for AI/ML.
Javascript and React for frontend",N/A,UC Davis,1,Aariz,Iqbal,aaiqbal@ucdavis.edu
KHÄO,108,https://hackdavis2023.devpost.com/submissions/412893-khao,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:35:15,"Inspiration

My teammates and I noticed that we waste a lot of groceries since we do not know how to use them or the recipes to them. So we decided to come up with this idea evolved into a web application that helps people create their own food using their food items to the maximum potential. All you need is a receipt and an idea what you want to eat!

What it does

Reduce food wastage
Help students eat healthy at home
Save money
All on the receipt of the food items you buy!

How we built it

1.) HTML
2.) CSS
3.) REACT JS
4.) Open AI API
5.) Microsoft Azure Computer Vision

Challenges we ran into

Connecting ReactJs with Open AI API and using Microsoft Azure Computer Vision. Web design on Figma to the Front end web development using HTML,CSS, and react.js

Accomplishments that we're proud of

We were able to implement Microsoft Azure Computer Vision and read the grocery bills. Moreover, we use Open AI API to get the recipes depending on the user's preferences

What we learned

1.How OCR works


API for Open AI.
Front End web development using ReactJs
Time management and Project Planning
## What's next for KHÄO
Future features we will be adding- prior knowledge of items the user has, and having a camera option so instead of uploading the receipt , we just scan it or take a picture of items in the fridge we want to use and it suggests based on that

","https://github.com/ManojBaasha/khao, https://www.figma.com/proto/kccFWQKBPYLOVtJ54FTh3K/Untitled?type=design&node-id=1-4&scaling=scale-down&page-id=0%3A1&starting-point-node-id=1%3A4&show-proto-sidebar=1",https://youtu.be/mjzou3rdb-Q,"Best Use of Microsoft Cloud for Your Community, Best Design, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Best Healthcare Hack, Most Creative Hack","html, css, react, openai, computervision",Rohan,Malige,rmmalige@ucdavis.edu,,Yes,University of California Davis,We learnt using Microsoft Azure it was a huge learning curve for us beginners using OCR.,"",University of California - Davis,3,Toniya,Patil,tbpatil@ucdavis.edu,Manoj,Elango,melango@ucdavis.edu,Roshini,Pothapragada,rpothapragada@ucdavis.edu
Stable,50,https://hackdavis2023.devpost.com/submissions/412895-stable,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:35:27,"Inspiration

After talking to a representative from the American Wild Horse Campaign, we wanted to help with their idea of being able to track wild horses for preservation purposes.

What it does

We created a social media platform that's for horses. It lets users take photos of horses and upload them to show other users.

How we built it

To design it, we first used paper sketches and then iterated on the designs using figma. To implement it, we used next.js, react, material UI, javascript, and google fire base.

Challenges we ran into

We had some issues with cors, as well as learning how to use figma, next.js, and react.

Accomplishments that we're proud of

Our design team was able to create a proper design.

What we learned

We learned how to use development and design software and frameworks such as figma, react, and javascript.

What's next for Stable

We hope to continue implementing the web app as well as furthering our design in terms of the account page and sharing with other forms of social media.
","https://github.com/devin177/hackdavis2023, https://www.figma.com/file/SCe5syJ4pgPpq6AV82NlVI/HackDavis-Horse?type=design&node-id=1%3A3&t=bHxE2YrjDgM2o5vG-1",,"Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Best Design, Most Creative Hack, Best American Wild Horse Campaign (AWHC) Hack","javascript, figma, react",Devin,Ly,ly.devin.177@gmail.com,,Yes,UC Davis,"Github, Figma, Discord, Google Firebase","",University of California - Davis,3,Jack,Zheng,jackzheng274@gmail.com,Nanette,Ta,nuta@ucdavis.edu,Regina,Phan,ruphan@ucdavis.edu
ClassCanvas,39,https://hackdavis2023.devpost.com/submissions/412898-classcanvas,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:36:16,"Inspiration

Scheduling is a quarterly struggle for students including us. We tried to save some time and mental energy that goes into this process for students.

What it does

Our design takes an input of which classes you wish to take and our program will give you all the possible combinations of the classes that you can take without facing any  time clashes. Show students all the possible schedules they can have for the upcoming quarter, with an emphasis on showing different sections of classes they can take. More relevant with scheduling class times to make an ideal quarter schedule that fits student needs.

How we built it

To design the application, we used python in order to be able to read and write to CSV files. CSV files were a great way to store the large amounts of class data from UC Davis’s SisWeb, and in the future, when we’re using web-scraping tools in order to extract data more efficiently and in real time, having our data readily available in a CSV file will make it much easier to read and analyze. After we read the class schedule data in from the CSV file, which would tell us, class codes, what day and time they occurred, and the professor that was teaching the class, we used python to parse through the data and get information from the user regarding key classes they want to be included in their schedule. Once we did that, we could get all possible combinations of classes and output the best-case ones which didn’t have any time conflicts.

Challenges we ran into

Because we all had varying levels of experience in python, we had to figure out how to best delegate tasks so that they covered everyone’s strengths. When programming the part of out application that would parse through all the data and find all possible combinations of the given classes, we had difficulty figuring out how to create a nested for loop that would iterate from a section of a class down to another section of a class as to create a group of various sections of classes. In the end, we were able to figure out a good, efficient strategy that would run through all the sections of the classes.

Accomplishments that we're proud of

We were proud of the fact that we were able to create a functioning python application that would look through large amounts of data to find the best options, despite the fact that we all had varying levels of expertise in python

What we learned

We definitely learned a lot about how to work with databases. Additionally, coding in Python was new for so that was definitely a learning experience.

What's next for ClassCanvas

Currently, we have focused mainly on CS classes and hopefully we will easily be able to integrate all the other classes too. Additionally, we will add a feature where the user can input their time constraints(if they have job, or if they don't want to take late classes, etc) and the algorithm will only design combinations taking into consideration the user's preferences. We can also add a way the use can list priorities in their class choice and if there are two or more classes in which they only want to take one. ClassCanvas has a lot of further scope. It can also look at locations and see which sections would be closer for the user in commuting.
","https://drive.google.com/file/d/1qrozPuTRWQy_2YoS06wfQuiYwCvVu7pw/view, https://drive.google.com/file/d/12GvzN1yyOrFAZCa8ohTYazEXmAmgNdM7/view",,"Best Domain Name from Domain.com, Best Beginner Hack, Best Design, Most Creative Hack","python, database, csv",Aadvika,Ahuja,aadvika.ahuja@gmail.com,,No,UC Davis,"New language for some of use(python)
data bases
tried web scraping
csv to excel and excel to csv",clashofclasses.tech,University of California - Davis,3,Neerja,Natu,neerjanatu@gmail.com,Veda,Periwal,vedaperiwal@gmail.com,Manvi,Nawani,manvinawani12@gmail.com
Green Screen,63,https://hackdavis2023.devpost.com/submissions/412899-green-screen,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:37:04,"Inspiration✨

We wanted to create a project that is simple yet usable for users and raise attention to what environmental impact our daily actions cause to the globe. Video streaming is something that everyone does every day. We want to investigate how much carbon footprint this behavior creates and, furthermore, inform users about what actions they can take to offset the carbon emissions we generate.

What it does🌍

We demonstrate facts regarding carbon emissions caused by streaming and suggest actions that we can all take to mitigate this. At the bottom of the webpage is an interactive page where users can see how much carbon emission is generated by youtube channels. 

How we built it 🛠

The webpage is built with Vue.js for frontend and D3.js for interactive scrolling. Data about youtube channels come from YouTube data API v3. We calculate how much CO2 emission is generated according to channel videos and view counts using Flask as backend.

Challenges we ran into

We first decided to go with pytube library to fetch channel information, however, many of its API are deprecated and it takes many HTTP requests that will likely make the response time exceeds user expectation. So we decided to combine it with Youtube data API v3 to fetch the data we need, then do the calculation in backend using Flask and sent the result to frontend. This way, the response time is faster and does not freeze the frontend.

Accomplishments that we're proud of 🔊

We are particularly proud of this project because it brings people's attention to carbon emissions caused by video streaming, which is commonly ignored by the general public. Also, the design and structure of the project make it accessible to non-technical users.
",https://github.com/SamLee-dedeboy/GreenScreen,https://youtu.be/8PvnzIYfW20,"Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Most Creative Hack, Best TreeDavis Hack","vue.js, vite, python, pytube, d3.js, youtubeapi, flask",Li-Wen,Lin,s953329@gmail.com,,No,UC Davis,Great,"","University of California - Davis, UC Davis",1,YuTe,Lee,samytleezzz@gmail.com
TreeDavis_solution,28,https://hackdavis2023.devpost.com/submissions/412903-treedavis_solution,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:39:34,"Inspiration

wanted to find the solution to identifying and cherish the contribution of each individual tree in Davis.

What it does

access info and metadata about a specific tree in a location for general public and tree Davis staff, to update info

How we built it

we built the API out of salesforce rest API then we used postman to set up the API codes.

Challenges we ran into

We ran into several challenges, specifically accessing the salesforce API which connected the CRM database that TreeDavis has in place for volunteers. We also encountered challenges in publishing the app to a public url. 

Accomplishments that we're proud of

We are very proud that we were able to contribute to TreeDavis's issue and create an effective solution.

What we learned

We learned how to access a CRM API from a large platform like Salesforce and also how to design a web app that connects all resources together.

What's next for TreeDavis_solution

Access public information about carbon neutrality benefits and O2 production of respective trees. 
",https://github.com/SayanBhatia/TreeDavis.git,,Best TreeDavis Hack,"python, heroku, flask, html5, css3, api, salesforce, crm",SrivatsaD,Devaraja,manojsrivatsa26@gmail.com,,Yes,UC Davis,It was great working on the project!,"",University of California - Davis,0
TherAPI,10,https://hackdavis2023.devpost.com/submissions/412907-therapi,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:42:09,"Inspiration

We were inspired to help people find therapists in the local Davis area because it extremely difficult.

What it does

You simply input your preferences, such as therapy type, specialties, location, and any specific requirements you may have.  ChatGPT analyzes your input, considers your individual circumstances, and generates personalized therapist recommendations just for you.

We also plan to display the therapist's location on a google map and add functionality for users to end emails to therapists.

How we built it


Frontend: Next.js
APIs: OpenAI Embedding and Models api as well as pinecone to store embeddings, Google Maps API 


Challenges we ran into


Dealing with embeddings and learning about vector databases for the first time(steep learning curve).


Accomplishments that we're proud of


Streaming the GPT response on the client.


What we learned


How vector databases work and a general understanding of how models embed data and find similar searches.


What's next for TherAPI


Display therapist addresses, send emails, and expand outside of the Davis area.

",https://therapi.tech/,,"","next.js, vercel",Aarush,Agrawal,aaagrawal@ucdavis.edu,,Yes,"UC DAVIS, HARVARD",Great!,"",University of California - Davis,3,Denis,Pandarakalam,dpandarakalam@gmail.com,Lucas,Punz,lkpunz@ucdavis.edu,Kushal,Chattopadhyay,kchattopadhyay@college.harvard.edu
SafeZone,61,https://hackdavis2023.devpost.com/submissions/412908-safezone,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:42:24,"Inspiration

In light of recent events that took place in Davis, we realized that our community was in need of a way to communicate effectively with eachother in order to keep each other safe. In those hard times students were forced to rely on police radios and scanners for updates on the events happening around them. Social media simply wasn't enough to keep track of all the locations over Davis to stay away from and not everyone was properly alerted of the attacks and events taking place.

What it does

We have designed a web application called ""SafeZone"" which allows for a better means of communication that allows the community to be aware of all suspicious activity happening around them, thus the app will help our community feel safer. On opening the application there is a view of points of suspicious activity that were dropped previously by other people in the community. This data is stored in Firestore in Firebase. After calculating distance and other metrics, the application provides a radius around your current location so you can see where you are in relation to the suspicious activity occurring. In addition, it also gives a count of each kind crime that happened which gives our users an idea of the nature of the crimes.

In order to add a point on the map, users simply have to search and select the location in the search bar and select a descriptor for the activity in the dropdown and click submit. They will see an icon pop up on the map at the selected address that is color coded based on its descriptor. An index for the colors and labels of descriptors is shown on the left hand sidebar.

How we built it

This application integrates the Google Maps API to present a map of the suspicious activity happening around you by using geolocation to sense your current location. This project uses JavaScript in React and TypeScript. In addition, we used Firebase to store our data on the crimes being committed. 

Challenges we ran into

This is the first time for both of us using react. We were both extremely unfamiliar with the syntax of this language which made it extremely difficult to solve bugs every step of the way through. We had to get a lot of guidance from online videos, but there were many times where the steps shown in the videos did not translate exactly when we did it on our local computers due to changes in the version of react and firebase. In addition, we had a time crunch which made it rather stressful to debug when it came towards the end.

Accomplishments that we're proud of

Every error we ran into was a hurdle for us as we would be stuck for hours not knowing what to do. The satisfaction we felt after fixing our bugs led to tears of joy. Since both of us are beginners, we were very happy with how the maps panned out to be very functional while also looking professional. We were extremely proud of integrating the google maps api. 

What we learned

Both of us got a good exposure to React as well as learning how to integrate APIs. We learnt to use firebase effectively and utilizing libraries to efficiently code the functionalities we need.

What's next for SafeZone

We hope to add some things that we were unable to finish in the 24hrs in the future, such as color coding of the data points to represent their type of crime, as well as being able to hover over the points for more detailed descriptions of what the crime consisted of, such as description of perpetrator which would be added by the user who recorded that piece of data. All in all, we believe we can make our application more sophisticated given more time and hope to do so in the future.
","https://github.com/srilakshmipanda/HackDavis, https://drive.google.com/file/d/1aVsVUsT-FyI5iORtvkLU1k6-EJZjBlVW/view?usp=share_link, https://youtu.be/Em0MHzscvxk",https://youtu.be/Em0MHzscvxk,"Best Domain Name from Domain.com, Most Creative Use of GitHub, Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Design, Most Creative Hack","google, react, javascript, typescript, firebase, gps, google-maps, firestore, visual-studio",Satyasree,Sanegepalli,ssanegepalli@ucdavis.edu,,Yes,UC Davis,"We used GitHub and Firebase, both which worked very well for both our teammates. They were not slow, updated quickly and were convenient to use.",safezone23.tech,University of California - Davis,1,Sri Lakshmi Dur,Panda,slpanda@ucdavis.edu
RE-ATTIRE,115,https://hackdavis2023.devpost.com/submissions/412909-re-attire,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:43:14,"Inspiration

In a world consumed by fast fashion, we envision a different path—a path where style and eco-friendly decisions are made. Our mission is to create a clothes swapping app that puts an end to the relentless cycle of excessive consumption and waste. 

What it does

RE-ATTIRE is an app that empowers you to make a positive impact on the planet, one clothing swap at a time. 

How we built it

Using Figma and prototyping it

Challenges we ran into

Deciding on a project to do and Figma challenges to do.

What's next for RE-ATTIRE

Creating more pages in our app and conducting user testing.
",https://www.figma.com/proto/awjtqG4YOcms4m1Euy2kUY/HackDavis%3A-Clothes-Swappy?page-id=2%3A113&type=design&node-id=48-4605&viewport=238%2C593%2C0.15&scaling=scale-down&starting-point-node-id=48%3A4605&show-proto-sidebar=1,,"Best Design, Best Aggie Reuse Store Hack",figma,Annabelle,Wu,aahwu@ucdavis.edu,,Yes,UC Davis,Good,"",University of California - Davis,1,Sechan,Kim,sechan.jkim@gmail.com
Help People with Depression,47,https://hackdavis2023.devpost.com/submissions/412913-help-people-with-depression,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:47:06,"Inspiration

One of my friends once tried to call the suicidal hotline number but she had to stay on hold for 35 minutes. And I believe this is not right. 

What it does

It have 3 pages: 


With colorful thoughts,reminders and quotes
All hotline phone numbers
Chat option


How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Help People with Depression
",https://github.com/Harman72/youareimportant.github.io.git,,"","html, css, javascript, visual-studio",Harman72,Kaur,harmanxc01@gmail.com,,Yes,"Yuba college, UC davis",It was good and fun as a first time participant.,"",University of California - Davis,0
Cardify,96,https://hackdavis2023.devpost.com/submissions/412914-cardify,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:48:15,"Inspiration

Flashcards have always been a great way to study for upcoming tests. But they can be a pain to create, manually making each card on paper or on a website like Quizlet. We decided to develop a solution by utilizing generative AI that processes your textbook and creates flashcards for you. 

What it does

Our website allows users to upload a pdf of their textbook, and then choose either the entire textbook or certain page numbers for the AI model to create flashcards for. When the user clicks generate, the page navigates to a list of all the flashcards, and the user can click through them, save them, or export them. 

How we built it

We built our website using Flask for the backend and React for the frontend. 

Challenges we ran into

One challenge we ran into was training the model to output a satisfiable definition given a term. Since many of the datasets we used were more geared toward summarization, we had to finetune the model hyperparameters much more than expected. 

Accomplishments that we're proud of

We are proud that we built a functional frontend and backend that can communicate with each other.

What we learned

We learned how to integrate a Flask backend with a React frontend. We also learned how to adjust machine learning hyperparameters and preprocess data to fit our use case. 

What's next for Cardify

We plan on adding a user interface for registration so users can save their flashcard sets. We also want to improve the quality of our model to provide more accurate flashcard term and definitions. 
",https://github.com/DCR-03/SpeedReadChat,,"Best Interdisciplinary Hack, sponsored by the College of Letters & Science, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","flask, react, huggingface",Russell,Chien,russellchien6@gmail.com,,Yes,"UCDavis, UC Santa Cruz",We used Flask and React,"","University of California - Davis, University of California - Santa Cruz",3,nMarks,Marks,nmarks413@gmail.com,Dominick,Rangel,rangel.dominick03@gmail.com,alpglr,Guler,aguler@ucdavis.edu
Tree Dictionat=ry,15,https://hackdavis2023.devpost.com/submissions/412918-tree-dictionat-ry,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 13:59:44,"Inspiration

What it does

How we built itllll

Challenges we ran intohh

Accomplishments that we're proud of

What we learned

What's next for Tree Dictionat=ry
","",,"",c++,Minji,Yun,myun@ucdavis.edu,,No,UCD,AI/ML,"","",0
GreenTrail,9,https://hackdavis2023.devpost.com/submissions/412919-greentrail,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 14:00:11,"Inspiration

Our goal for social good is to limit the amount of landfills and litter in streets. We believe an application is needed to help people identify the correct bin and convince them to hold on to their trash instead of littering. They need to be aware of the available bins near them to do so. These two goals guided us to create GreenTrail.

What it does

Our apple application allows users to locate the nearest bin for their needs through a GPS system. These include compost, recycle, and trash bins.

How we built it

We built the iOS application with Swift, and we imported a python model with CoreML to make predictions.

Challenges we ran into

The most challenging part of the process was integrating the python model into Swift for prediction. We tried using TensorflowLite as an interpreter for our model, but we could not figure it out. 

Accomplishments that we're proud of

We are proud to have taken on a difficult project, and we were able to learn new frameworks and new ways to tackle problems under time pressure. 

What we learned

Working with Swift was a new experience. We learned how Swift handles the camera taking photos and how map features are implemented. 

What's next for GreenTrail

GreenTrail can be improved in several ways. First, more data will greatly increase the capabilities of our application. Data would help our machine learning model generalize better to new cases and can even increase the number of objects it is able to detect. Having more data also gives users a comprehensive list of bins they can choose from. 
Second, a feature can be added to allow users to input bins and facilities into the application. These entries can be shared with others to benefit everyone looking for nearby bins.
","",,"Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Open Data Hack, sponsored by UC Davis DataLab, Karim Majdi Abou Najm Memorial Prize for Technical Complexity, Most Creative Hack","swift, python",Peter,Wu,petercwu1205@gmail.com,,Yes,"UC Davis, USC",N/A,"","",1,Sam,Xie,samcxie@gmail.com
Aggieanon,116,https://hackdavis2023.devpost.com/submissions/412927-aggieanon,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 14:20:09,"Inspiration

Because of the sad things happened to Davis last few weeks. We feel like if you have feelings like unhappy about something, stressed about future, and any kind of mental pressure and you don't want your friends or parents to know about it, you need a place. 

What it does

It help people with their mental pressure through talking about it with peers or professionals anonymously.

How we built it

I used Figma.

Challenges we ran into

I was new to Figma like super new. My teammates disappeared one by one.

Accomplishments that we're proud of

I made an app included any pages I can think of.

What we learned

I learned how to use Figma to design an app. I learned how to make buttons work. 

What's next for Hackanon

Not sure yet. I really want to try hardware next time.
","https://www.figma.com/file/Bu4sxyHN6LVwAxbbi73EfF/Untitled?type=design&node-id=0-1&t=aHgOsBX2opLGnY6C-0, https://www.figma.com/file/Bu4sxyHN6LVwAxbbi73EfF/Untitled?type=design&node-id=0%3A1&t=aHgOsBX2opLGnY6C-1",,"Best Beginner Hack, Best Hack for Local-Global Good, sponsored by UC Davis Global Affairs, Best Healthcare Hack, Most Creative Hack",figma,Yaqi,Tan,yqtan@ucdavis.edu,,Yes,Uc Davis,The wifi was bad on Saturday noon to about 4pm.,"",ucdaivs,0
Untitled,,"",Draft,Pending,Manage team,05/21/2023 14:25:44,"","",,"","",Rohith Raj,Srinivasan,rohith.june6.sub@gmail.com,,"","","","",University of California - Davis,1,Gopal,Nambiar,gopalnambiar2@gmail.com
Con-Nect,117,https://hackdavis2023.devpost.com/submissions/412935-con-nect,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 14:52:30,"Inspiration

The idea behind ""Con-Nect"" is driven by the belief in second chances and the understanding that everyone deserves an opportunity to turn their lives around. By providing a dedicated platform that connects convicts with job opportunities, the app aims to address the gap between employers and this often marginalized talent pool.

What it does

We provide services where recently released convicts will be able to connect with mentors to help reintegrate back into society.

How we built it

We used ionic angular for developing the mobile app and a llm model for our interview chat bot.
","https://github.com/Nekorra/interviewchatbot, https://github.com/Nekorra/con-nect_final",,Most Creative Hack,"ionic, angular.js, generative-ai",Abhinav,Srinivas,abhisrin@gmail.com,,Yes,UC Davis - all team members,N/A,"",University of California - Davis,3,Shaurya,Srivastav,ssrivastav@ucdavis.edu,Ayush,Maral,aamaral@ucdavis.edu,Saee,Patil,saeenppatil@gmail.com
burgr+icerem,118,https://hackdavis2023.devpost.com/submissions/412975-burgr-icerem,Submitted (Gallery/Visible),Pending,Submit,05/21/2023 18:29:18,"Savoring the Perfect Blend of Innovation and Flavor at HackDavis 2023! 🍔✨

Inspiration

Our hackathon submission, ""burgr+icerem,"" is inspired by the idea of promoting social good through food. We believe that even simple pleasures like enjoying a burger and ice cream can contribute to positive change in society. We wanted to create an experience that combines the joy of indulging in delicious food with a platform for making a difference in the community.

What it does

While ""burgr+icerem"" is just a static image of a burger and ice cream, it serves as a visual representation of the idea that technology and innovation can enhance even the simplest pleasures in life. It encourages viewers to embrace the concept of savoring delightful moments and finding inspiration in everyday experiences.

How we built it

To create the image of the burger and ice cream, our team employed graphic design software and artistic skills to craft a visually appealing and appetizing representation of these food items. We paid attention to details such as colors, textures, and composition to make the image as enticing as possible. The backend infrastructure was built using microservices architecture, allowing for modular and scalable development. We integrated with payment gateways to facilitate secure and hassle-free transactions. burgr+icerem was designed with a user-friendly and intuitive approach, ensuring a delightful experience for the audience.

Challenges we ran into

During the creation process, we encountered several challenges. One of the main difficulties was striking the right balance between realism and artistic appeal in the image. We wanted the food to look appetizing and realistic while also maintaining an artistic flair and encapsulating essential essences of HackDavis. Additionally, capturing the perfect lighting and shading for the image posed a significant challenge.

Accomplishments that we're proud of

We are proud to have created ""burgr+icerem"" as a tangible example of how simple everyday choices can contribute to social good. The successful integration of various technologies and services, along with the seamless user experience, stands as a testament to our team's dedication and skills. We take pride in the fact that ""burgr+icerem"" provides a platform for individuals to make a positive impact on society while enjoying their favorite food. 

What we learned

Throughout the development process, we gained invaluable insights into the challenges and opportunities of combining technology and social good. We learned about the intricacies of building a scalable and secure platform, as well as the importance of user experience in driving engagement and adoption. Additionally, researching and partnering with charitable organizations broadened our understanding of the diverse issues that can be addressed through collective efforts. Through this project, we learned the importance of attention to detail and how small nuances can significantly impact the overall perception of an image. We also discovered the power of visual communication and its ability to evoke emotions and convey ideas effectively, which is essential to any project and product.

What's next for burgr+icerem

In the future, we envision ""burgr+icerem"" evolving into a larger project that explores the intersection of art, food, and technology. We aim to create an interactive experience where users can virtually customize their own burgers and ice cream combinations, providing a fun and engaging platform for culinary creativity. Our goal is to continue celebrating the joy of comfort food and inspire others to find delight in the simple pleasures of life.
","",,"","drivethru, git, stripe, americanexpress, amazon-web-services, cloud-chomp, bite-bot, lettucedb, chatgp3at, node.js, pepitospaletas, innoutburger",Alex,Le,le.alex101@gmail.com,,No,UC Davis,n/a,"",University of California - Davis,1,Ethan,Thai,eethai@ucdavis.edu
